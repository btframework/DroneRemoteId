<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wclWiFiFramework</name>
    </assembly>
    <members>
        <member name="T:wclWiFi.wclWiFiClient">
            <summary> The <c>wclWiFiClient</c> component provides access to the
              Wireless LAN client functions. </summary>
            <remarks> <para> The component is not thread-safe and must be used in one
              thread in which it was created. </para>
              In order to be notified about the WLAN events an application must use
              the <see cref="T:wclWiFi.wclWiFiEvents" /> component. </remarks>
            <seealso cref="T:wclWiFi.wclCustomWiFiSecurableComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.InternalClose">
            <summary> Executes additional finalization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.InternalOpen">
            <summary> Executes additional initialization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.EnumInterfaces(wclWiFi.wclWiFiInterfaceData[]@)">
            <summary> Enumerates all of the wireless LAN interfaces currently
              enabled on the local computer. </summary>
            <param name="Ifaces"> The dynamic array of the
              <see cref="T:wclWiFi.wclWiFiInterfaceData" /> structures which receives the
              returned list of wireless LAN interfaces. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              error codes. </para> </returns>
            <remarks> An application is responsible for releasing a memory
              allocated for the <c>Ifaces</c> dynamic array. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceData" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.EnumAvailableNetworks(System.Guid,wclWiFi.wclWiFiAvailableNetworkFilter,wclWiFi.wclWiFiAvailableNetwork[]@)">
            <summary> Retrieves the list of available networks on a wireless
              LAN interface. </summary>
            <param name="IfaceId"> The Wireless LAN interface's ID to
              be queried. </param>
            <param name="Filters"> A set of flags that control the type of networks
              returned in the list. </param>
            <param name="Networks"> A dynamic array to receive the returned list
              of visible networks. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The caller is responsible to despose the memory allocated for
              the dynamic array contains the available network list. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAvailableNetworkFilter" />
            <seealso cref="T:wclWiFi.wclWiFiAvailableNetwork" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.EnumBss(System.Guid,System.String,wclWiFi.wclWiFiBssType,System.Boolean,wclWiFi.wclWiFiBss[]@)">
            <summary> The method retrieves a list of the basic service set (BSS)
              entries of the wireless network or networks on a given wireless
              LAN interface. </summary>
            <param name="IfaceId"> The Wireless LAN interface's ID to
              be queried. </param>
            <param name="Ssid"> <para> The SSID of the network from which the BSS
              list is requested. This parameter is optional. When set to the empty
              string, the returned list contains all of available BSS entries on a
              wireless LAN interface. </para>
              <para> In addition, the <c>BssType</c> parameter must be set to either
              <c>bssInfrastructure</c> or <c>bssindependent</c> and the
              <c>SecurityEnabled</c> parameter must be specified. </para> </param>
            <param name="BssType"> The BSS type of the network. This parameter is
              ignored if the SSID of the network for the BSS list is unspecified
              (the <c>Ssid</c> parameter is the empty string). </param>
            <param name="SecurityEnabled"> A value that indicates whether security
              is enabled on the network. This parameter is only valid when the SSID
              of the network for the BSS list is specified (the <c>Ssid</c>
              parameter is not an empty string). </param>
            <param name="BssList"> A storage to receive the returned list of of BSS
              entries. The caller is responsible to dispose the allocated
              memory. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The caller is responsible to despose the memory allocated for
              the dynamic array contains the BSS list. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
            <seealso cref="T:wclWiFi.wclWiFiBss" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Scan(System.Guid)">
            <summary> The Scan function requests a scan for available
              networks. </summary>
            <param name="IfaceId"> The WLAN interface's ID. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> The Scan function requests that the native 802.11 Wireless
              LAN driver scan for available wireless networks. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Scan(System.Guid,System.String)">
            <summary> The Scan function requests a scan for available
              networks. </summary>
            <param name="IfaceId"> The WLAN interface's ID. </param>
            <param name="Ssid"> Specifies the SSID of the network to be scanned.
              This parameter is optional. When set to an empty string, the returned
              list contains all available networks. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> The Scan function requests that the native 802.11 Wireless
              LAN driver scan for available wireless networks. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Scan(System.Guid,System.Byte[])">
            <summary> The Scan function requests a scan for available
              networks. </summary>
            <param name="IfaceId"> The WLAN interface's ID. </param>
            <param name="Ie"> An information element to include in probe requests.
              This may include client provisioning availability information and
              802.1X authentication requirements. On Windows XP with SP3 and
              Wireless LAN API for Windows XP with SP2 this parameter must be
              <c>null</c>. Maximum length of data is 240 bytes. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> The Scan function requests that the native 802.11 Wireless
              LAN driver scan for available wireless networks. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Scan(System.Guid,System.String,System.Byte[])">
            <summary> The Scan function requests a scan for available
              networks. </summary>
            <param name="IfaceId"> The WLAN interface's ID. </param>
            <param name="Ssid"> Specifies the SSID of the network to be scanned.
              This parameter is optional. When set to an empty string, the returned
              list contains all available networks. </param>
            <param name="Ie"> An information element to include in probe requests.
              This may include client provisioning availability information and
              802.1X authentication requirements. On Windows XP with SP3 and
              Wireless LAN API for Windows XP with SP2 this parameter must be
              <c>null</c>. Maximum length of data is 240 bytes. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> The Scan function requests that the native 802.11 Wireless
              LAN driver scan for available wireless networks. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Connect(System.Guid,wclWiFi.wclWiFiConnectionMode,System.String,System.String,wclWiFi.wclWiFiBssType,wclWiFi.wclWiFiConnectFlag,System.String[])">
            <summary> The method attempts to connect to a specific
              network. </summary>
            <param name="IfaceId"> The ID of the interface to use for the
              connection. </param>
            <param name="Mode"> A value that specifies the mode of
              connection. </param>
            <param name="Profile"> <para> Specifies the profile being used for the
              connection. </para>
              <para> If <c>Mode</c> is set to <c>cmProfile</c>, then <c>Profile</c>
              specifies the name of the profile used for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmTemporaryProfile</c>, then
              <c>Profile</c> specifies the XML representation of the profile used
              for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmDiscoverySecure</c>
              or <c>cmDiscoveryUnsecure</c>, then <c>Profile</c> should
              be set to an empty string. </para> </param>
            <param name="Ssid"> Specifies the SSID of the network to connect to.
              This parameter is optional. When set to and empty string, all SSIDs
              in the profile will be tried. This parameter must not be an empty
              string if <c>Mode</c> is set to <c>cmDiscoverySecure</c> or
              <c>cmDiscoveryUnsecure</c>. </param>
            <param name="BssType"> Indicates the BSS type of the network. If a
              profile is provided, this BSS type must be the same as the one in the
              profile. </param>
            <param name="Flags"> The flags used to specify the connection
              parameters. </param>
            <param name="BssList"> The basic service set (BSS) identifiers (MACs)
              desired for the connection. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> <para> The <c>Connect</c> method returns immediately. To be
              notified when a connection is established or when no further
              connections will be attempted, a client must use the
              <see cref="T:wclWiFi.wclWiFiEvents" /> component. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
            <seealso cref="T:wclWiFi.wclWiFiConnectFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Connect(System.Guid,wclWiFi.wclWiFiConnectionMode,System.String,System.String,wclWiFi.wclWiFiBssType,wclWiFi.wclWiFiConnectFlag,System.String)">
            <summary> The method attempts to connect to a specific
              network. </summary>
            <param name="IfaceId"> The ID of the interface to use for the
              connection. </param>
            <param name="Mode"> A value that specifies the mode of
              connection. </param>
            <param name="Profile"> <para> Specifies the profile being used for the
              connection. </para>
              <para> If <c>Mode</c> is set to <c>cmProfile</c>, then <c>Profile</c>
              specifies the name of the profile used for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmTemporaryProfile</c>, then
              <c>Profile</c> specifies the XML representation of the profile used
              for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmDiscoverySecure</c>
              or <c>cmDiscoveryUnsecure</c>, then <c>Profile</c> should
              be set to an empty string. </para> </param>
            <param name="Ssid"> Specifies the SSID of the network to connect to.
              This parameter is optional. When set to and empty string, all SSIDs
              in the profile will be tried. This parameter must not be an empty
              string if <c>Mode</c> is set to <c>cmDiscoverySecure</c> or
              <c>cmDiscoveryUnsecure</c>. </param>
            <param name="BssType"> Indicates the BSS type of the network. If a
              profile is provided, this BSS type must be the same as the one in the
              profile. </param>
            <param name="Flags"> The flags used to specify the connection
              parameters. </param>
            <param name="Bss"> The basic service set (BSS) identifier (MAC) desired for
               the connection. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> <para> The <c>Connect</c> method returns immediately. To be
              notified when a connection is established or when no further
              connections will be attempted, a client must use the
              <see cref="T:wclWiFi.wclWiFiEvents" /> component. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
            <seealso cref="T:wclWiFi.wclWiFiConnectFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Connect(System.Guid,wclWiFi.wclWiFiConnectionMode,System.String,System.String,wclWiFi.wclWiFiBssType,wclWiFi.wclWiFiConnectFlag)">
            <summary> The method attempts to connect to a specific
              network. </summary>
            <param name="IfaceId"> The ID of the interface to use for the
              connection. </param>
            <param name="Mode"> A value that specifies the mode of
              connection. </param>
            <param name="Profile"> <para> Specifies the profile being used for the
              connection. </para>
              <para> If <c>Mode</c> is set to <c>cmProfile</c>, then <c>Profile</c>
              specifies the name of the profile used for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmTemporaryProfile</c>, then
              <c>Profile</c> specifies the XML representation of the profile used
              for the connection. </para>
              <para> If <c>Mode</c> is set to <c>cmDiscoverySecure</c>
              or <c>cmDiscoveryUnsecure</c>, then <c>Profile</c> should
              be set to an empty string. </para> </param>
            <param name="Ssid"> Specifies the SSID of the network to connect to.
              This parameter is optional. When set to and empty string, all SSIDs
              in the profile will be tried. This parameter must not be an empty
              string if <c>Mode</c> is set to <c>cmDiscoverySecure</c> or
              <c>cmDiscoveryUnsecure</c>. </param>
            <param name="BssType"> Indicates the BSS type of the network. If a
              profile is provided, this BSS type must be the same as the one in the
              profile. </param>
            <param name="Flags"> The flags used to specify the connection
              parameters. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> <para> The <c>Connect</c> method returns immediately. To be
              notified when a connection is established or when no further
              connections will be attempted, a client must use the
              <see cref="T:wclWiFi.wclWiFiEvents" /> component. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
            <seealso cref="T:wclWiFi.wclWiFiConnectFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.Disconnect(System.Guid)">
            <summary> Disconnects an interface from its current network. </summary>
            <param name="IfaceId"> The WLAN interface's ID to be
              disconnected. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <remarks> Do not call the method before calling <c>Connect</c> unless
              you want to change a profile to an on-demand profile. When you call
              <c>Connect</c> to establish a network connection, any existing network
              connection is dropped automatically. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetShowDeniedNetworks(System.Boolean@)">
            <summary> Reads the WLAN ACM value indicating whether user and group
              policy-denied networks will be included in the available networks
              list. </summary>
            <param name="Show"> If the method returns <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />
              <c>Show</c> parameter retured as <c>True</c>, then user and group
              policy-denied networks will be included in the available networks
              list; if the parameter is <c>False</c> on return, user and group
              policy-denied networks will not be included in the available
              networks list. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetPowerSetting(wclWiFi.wclWiFiPowerSetting@)">
            <summary> Reads the WLAN ACM Power Setting. </summary>
            <param name="Setting"> The ACM the power settings. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
            <seealso cref="T:wclWiFi.wclWiFiPowerSetting" />
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetOnlyUseGpProfiles(System.Boolean@)">
            <summary> Reads the ACM value indicating whether profiles not created
              by group policy can be used to connect to an allowed network with a
              matching group policy profile. </summary>
            <param name="Enabled"> If <c>True</c> only profiles created by group
              policy can be used; if <c>False</c>, any profile can be
              used. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              return codes. </para> </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetAllowExplicitCreds(System.Boolean@)">
            <summary> Reads the ACM value indicating whether the current wireless
              interface has shared user credentials allowed. </summary>
            <param name="Allow"> If <c>True</c> then the current wireless interface
              has shared user credentials allowed; if <c>False</c>, the current
              wireless interface does not allow shared user credentials. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetBlockPeriod(System.UInt32@)">
            <summary> Read the ACM value that indicates the blocked period setting
              for the current wireless interface. </summary>
            <param name="Period"> The blocked period setting for the current
              wireless interface. The blocked period is the amount of time, in
              seconds, for which automatic connection to a wireless network will
              not be attempted after a previous failure. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmGetVirtualStationExtensibility(System.Boolean@)">
            <summary> Reads the ACM value indicating whether extensibility on a
              virtual station is allowed. </summary>
            <param name="Allowed"> If <c>True</c> then extensibility on a virtual
              station is allowed; if <c>False</c>, extensibility on a virtual
              station is not allowed. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> By default, extensibility on a virtual station is allowed.
              This value is persisted across restarts. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmSetShowDeniedNetworks(System.Boolean)">
            <summary> Sets the WLAN ACM value indicating whether user and group
              policy-denied networks will be included in the available networks
              list. </summary>
            <param name="Show"> If <c>True</c>, then user and group policy-denied
              networks will be included in the available networks list; if the
              parameter is <c>False</c> on return, user and group policy-denied
              networks will not be included in the available networks list. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmSetAllowExplicitCreds(System.Boolean)">
            <summary> Sets the ACM value indicating whether the current wireless
              interface has shared user credentials allowed. </summary>
            <param name="Allow"> If <c>True</c> then the current wireless interface
              has shared user credentials allowed; if <c>False</c>, the current
              wireless interface does not allow shared user credentials. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmSetBlockPeriod(System.UInt32)">
            <summary> Sets the ACM value that indicates the blocked period setting
              for the current wireless interface. </summary>
            <param name="Period"> The blocked period setting for the current
              wireless interface. The blocked period is the amount of time, in
              seconds, for which automatic connection to a wireless network will
              not be attempted after a previous failure. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiClient.AcmSetVirtualStationExtensibility(System.Boolean)">
            <summary> Sets the ACM value indicating whether extensibility on a
              virtual station is allowed. </summary>
            <param name="Allowed"> If <c>True</c> then extensibility on a virtual
              station is allowed; if <c>False</c>, extensibility on a virtual
              station is not allowed. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="T:wclWiFi.wclWiFiAvailableNetworkFilter">
            <summary> The flags that control the type of networks returned in
              the list by the <c>EnumAvailableNetworks</c> method of the
              <see cref="T:wclWiFi.wclWiFiClient" /> component. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetworkFilter.ffIncludeAllAdhocProfiles">
            <summary> Include all ad hoc network profiles in the available network
              list, including profiles that are not visible. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetworkFilter.ffIncludeAllManualHiddenProfiles">
            <summary> Include all hidden network profiles in the available network
              list, including profiles that are not visible. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiAuthAlgorithm">
            <summary> Defines a wireless LAN authentication algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auOpen">
            <summary> Specifies an IEEE 802.11 Open System authentication
              algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auSharedKey">
            <summary> Specifies an 802.11 Shared Key authentication algorithm that
              requires the use of a pre-shared Wired Equivalent Privacy (WEP)
              key for the 802.11 authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpa">
            <summary> <para> Specifies a WiFi Protected Access (WPA) algorithm.
              IEEE 802.1X port authentication is performed by the supplicant,
              authenticator, and authentication server. Cipher keys are dynamically
              derived through the authentication process. </para>
              <para> This algorithm is valid only for BSS types of
              <c>bssInfrastructure</c>. </para>
              <para> When the WPA algorithm is enabled, the 802.11 station will
              associate only with an access point whose beacon or probe responses
              contain the authentication suite of type 1 (802.1X) within the WPA
              information element (IE). </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpaPsk">
            <summary> <para> Specifies a WPA algorithm that uses preshared keys
              (PSK). IEEE 802.1X port authentication is performed by the supplicant
              and authenticator. Cipher keys are dynamically derived through a
              preshared key that is used on both the supplicant and
              authenticator. </para>
              <para> This algorithm is valid only for BSS types of
              <c>bssInfrastructure</c>. </para>
              <para> When the WPA PSK algorithm is enabled, the 802.11 station will
              associate only with an access point whose beacon or probe responses
              contain the authentication suite of type 2 (preshared key) within
              the WPA IE. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpaNone">
            <summary> This value is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auRsna">
            <summary> <para> Specifies an 802.11i Robust Security Network
              Association (RSNA) algorithm. WPA2 is one such algorithm. IEEE 802.1X
              port authentication is performed by the supplicant, authenticator, and
              authentication server. Cipher keys are dynamically derived through
              the authentication process. </para>
              <para> This algorithm is valid only for BSS types of
              <c>bssInfrastructure</c>. </para>
              <para> When the RSNA algorithm is enabled, the 802.11 station will
              associate only with an access point whose beacon or probe responses
              contain the authentication suite of type 1 (802.1X) within the
              RSN IE. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auRsnaPsk">
            <summary> <para> Specifies an 802.11i RSNA algorithm that uses PSK.
              IEEE 802.1X port authentication is performed by the supplicant and
              authenticator. Cipher keys are dynamically derived through a
              preshared key that is used on both the supplicant and
              authenticator. </para>
              <para> This algorithm is valid only for BSS types of
              <c>bssInfrastructure</c>. </para>
              <para> When the RSNA PSK algorithm is enabled, the 802.11 station will
              associate only with an access point whose beacon or probe responses
              contain the authentication suite of type 2(preshared key) within
              the RSN IE. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpa3">
            <summary> Specifies a WPA3-Enterprise 192-bit mode algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpa3Sae">
            <summary> Specifies a WPA3-Simultaneous Authentication of Equals
              (WPA3-SAE) algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auOwe">
            <summary> Specifies an opportunistic wireless encryption (OWE)
              algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auWpa3Ent">
            <summary> Specifies a WPA3-Enterprise algorithm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthAlgorithm.auUnknown">
            <summary> The authentication algorithm is unknown or invalid. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiCipherAlgorithm">
            <summary> Defines a cipher algorithm for data encryption and
              decryption. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caNone">
            <summary> Specifies that no cipher algorithm is enabled or
              supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caWep40">
            <summary> Specifies a Wired Equivalent Privacy (WEP) algorithm, which
              is the RC4-based algorithm that is specified in the 802.11-1999
              standard. This enumerator specifies the WEP cipher algorithm with a
              40-bit cipher key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caTkip">
            <summary> Specifies a Temporal Key Integrity Protocol (TKIP) algorithm,
              which is the RC4-based cipher suite that is based on the algorithms
              that are defined in the WPA specification and IEEE 802.11i-2004
              standard. This cipher also uses the Michael Message Integrity Code
              (MIC) algorithm for forgery protection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caCcmp">
            <summary> Specifies an AES-CCMP algorithm, as specified in the
              IEEE 802.11i-2004 standard and RFC 3610. Advanced Encryption
              Standard (AES) is the encryption algorithm defined in
              FIPS PUB 197. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caWep104">
            <summary> Specifies a WEP cipher algorithm with a 104-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caBip">
            <summary> Specifies a WiFi Protected Access (WPA) Use Group Key cipher
              suite. For more information about the Use Group Key cipher suite,
              refer to Clause 7.3.2.25.1 of the IEEE 802.11i-2004
              standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caGcmp128">
            <summary> Specifies a GCMP cipher algorithm with a 128-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caGcmp256">
            <summary> Specifies a GCMP cipher algorithm with a 256-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caCcmp256">
            <summary> Specifies an AES-CCMP algorithm with a 256-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caBipGmac128">
            <summary> Specifies a Broadcast Integrity Protocol Galois Message
              Authentication Code (BIP-GMAC) cipher algorithm with a 128-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caBipGmac256">
            <summary> Specifies a Broadcast Integrity Protocol Galois Message
              Authentication Code (BIP-GMAC) cipher algorithm with a 256-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caBipCmac256">
            <summary> Specifies a Broadcast Integrity Protocol Cipher-based Message
              Authentication Code (BIP-CMAC) cipher algorithm with a 256-bit cipher
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caUseGroup">
            <summary> Specifies a Robust Security Network (RSN) Use Group Key cipher
              suite. For more information about the Use Group Key cipher suite,
              refer to Clause 7.3.2.25.1 of the IEEE 802.11i-2004
              standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caWep">
            <summary> Specifies a WEP cipher algorithm with a cipher key of any
              length. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiCipherAlgorithm.caUnknown">
            <summary> The cipher algorithm is unknown or unsupported. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiAvailableNetworkFlag">
            <summary> Various flags for the available network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetworkFlag.nfConnected">
            <summary> This network is currently connected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetworkFlag.nfHasProfile">
            <summary> There is a profile for this network. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiBssCap">
            <summary> Defines the BSS capability. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssCap.bcEss">
            <summary> <para> An extended service set. A set of one or more
              interconnected basic service sets (BSSs) and integrated local area
              networks (LANs) that appears as a single BSS to the logical link
              control layer at any station associated with one of those
              BSSs. </para>
              <para> An AP set the ESS subfield to 1 and the IBSS subfield to 0
              within transmitted Beacon or Probe Response frames. A peer station
              within an IBSS (ad hoc network) sets the ESS subfield to 0 and the
              IBSS subfield to 1 in transmitted Beacon or Probe Response
              frames. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssCap.bcIbss">
            <summary> <para> An independent basic service set. A BSS that forms a
              self-contained network, and in which no access to a distribution
              system (DS) is available (an ad hoc network). </para>
              <para> An AP sets the ESS subfield to 1 and the IBSS subfield to 0
              within transmitted Beacon or Probe Response frames. A peer station
              within an IBSS (ad hoc network) sets the ESS subfield to 0 and the
              IBSS subfield to 1 in transmitted Beacon or Probe Response
              frames. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssCap.bcCfPollable">
            <summary> A value that indicates if the AP or peer station is
              pollable. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssCap.bcCfPollRequest">
            <summary> A value that indicates how the AP or peer station handles
              poll requests. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssCap.bcPrivacy">
            <summary> <para> A value that indicates if encryption is required for
              all data frames. </para>
              <para> An AP sets the Privacy subfield to 1 within transmitted Beacon
              and Probe Response frames if WEP, WPA, or WPA2 encryption is required
              for all data type frames exchanged within the BSS. If WEP, WPA, or
              WPA2 encryption is not required, the Privacy subfield
              is set to 0. </para>
              <para> A peer station within and IBSS sets the Privacy subfield to 1
              within transmitted Beacon and Probe Response frames if WEP, WPA, or
              WPA2 encryption is required for all data type frames exchanged within
              the IBSS. If WEP, WPA, or WPA2 encryption is not required, the
              Privacy subfield is set to 0. </para> </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiConnectFlag">
            <summary> Flags used to specify the connection parameters. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfHiddentNetwork">
            <summary> <para> Connect to the destination network even if the
              destination is a hidden network. A hidden network does not broadcast
              its SSID. Do not use this flag if the destination network is an ad-hoc
              network. </para>
              <para> If the profile specified by <c>Profile</c> is not an empty
              string, then this flag is ignored and the <c>nonBroadcast</c> profile
              element determines whether to connect to a hidden
              network. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfAdHocJoinOnly">
            <summary> Do not form an ad-hoc network. Only join an ad-hoc network if
              the network already exists. Do not use this flag if the destination
              network is an infrastructure network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfIgnorePrivacyBit">
            <summary> Ignore the privacy bit when connecting to the network.
              Ignoring the privacy bit has the effect of ignoring whether packets
              are encrypted and ignoring the method of encryption used. Only use
              this flag when connecting to an infrastructure network using a
              temporary profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfEapolPassThrough">
            <summary> Exempt EAPOL traffic from encryption and decryption. This flag
              is used when an application must send EAPOL traffic over an
              infrastructure network that uses Open authentication and WEP
              encryption. This flag must not be used to connect to networks that
              require 802.1X authentication. This flag is only valid when
              <c>Mode</c> is set to <c>cmTemporaryProfile</c>. Avoid using this flag
              whenever possible. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfPersistDiscoveryProfile">
            <summary> Automatically persist discovery profile on successful
              connection completion. This flag is only valid for
              <c>cmDiscoverySecure</c> or <c>cmDiscoveryUnsecure</c>. The profile
              will be saved as an all user profile, with the name generated from the
              SSID. If there is already a profile with the same name, a number will
              be appended to the end of the profile name. The profile will be saved
              with manual connection mode, unless
              <c>cfPersistDiscoveryProfileConnectionModeAuto</c> is also
              specified. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfPersistDiscoveryProfileConnectionModeAuto">
            <summary> To be used in conjunction with
              <c>cfPersistDiscoveryProfile</c>. The discovery profile will be
              persisted with automatic connection mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectFlag.cfPersistDiscoveryProfileOverwriteExisting">
            <summary> To be used in conjunction with
              <c>cfPersistDiscoveryProfile</c>. The discovery profile will be
              persisted and attempt to overwrite an existing profile with the same
              name. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiInterfaceData">
            <summary> The record describes the WLAN interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceData.Id">
            <summary> The WLAN interface GUID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceData.Description">
            <summary> The WLAN interface description. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceData.Primary">
            <summary> <c>true</c> if the interface is primary, <c>false</c> if the
              interface is secondary. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiAvailableNetwork">
            <summary> The record contains information about an available wireless
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.ProfileName">
            <summary> Contains the profile name associated with the network. If the
              network does not have a profile, this member will be empty. If
              multiple profiles are associated with the network, there will be
              multiple entries with the same SSID in the visible network list.
              Profile names are case-sensitive. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.Ssid">
            <summary> The SSID of the visible wireless network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.BssType">
            <summary> Specifies whether the network is infrastructure or
              ad hoc. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.NumberOfBssids">
            <summary> Indicates the number of BSSIDs in the network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.NetworkConnectable">
            <summary> Indicates whether the network is connectable or not. If set
              to <c>True</c>, the network is connectable, otherwise the network
              cannot be connected to. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.NotConnectableReason">
            <summary> Indicates why a network cannot be connected to. This member
              is only valid when <c>NetworkConnectable</c> is
              <c>False</c>. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.PhyTypes">
            <summary> Contains a set of <see cref="T:wclWiFi.wclWiFiPhy" /> values that
              represent the PHY types supported by the available networks. If the
              netxowkr supports more than 8 PHYs, this set contains only
              the first 8 PHY types. </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.MorePhyTypes">
            <summary> <para> Specifies if there are more than 8 PHY types
              supported. </para>
              <para> When this member is set to <c>True</c>, an application must
              call <c>EnumBss</c> of the <see cref="T:wclWiFi.wclWiFiClient" /> component to
              get the complete list of PHY types. The returned
              <see cref="T:wclWiFi.wclWiFiBss" /> has an array of
              <see cref="T:wclWiFi.wclWiFiBss" /> records. The <c>PhyId</c> member of the
              <see cref="T:wclWiFi.wclWiFiBss" /> record contains the PHY type for an
              entry. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.SignalQuality">
            <summary> A percentage value that represents the signal quality of the
              network. This member contains a value between 0 and 100. A value of
              0 implies an actual RSSI signal strength of -100 dbm. A value of 100
              implies an actual RSSI signal strength of -50 dbm. You can calculate
              the RSSI signal strength value for <c>SignalQuality</c> values
              between 1 and 99 using linear interpolation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.SecurityEnabled">
            <summary> Indicates whether security is enabled on the network. A value
              of <c>True</c> indicates that security is enabled, otherwise it
              is not. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.DefaultAuthAlgorithm">
            <summary> Indicates the default authentication algorithm used to join
              this network for the first time. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAuthAlgorithm" />
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.DefaultCipherAlgorithm">
            <summary> Indicates the default cipher algorithm to be used when
              joining this network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiCipherAlgorithm" />
        </member>
        <member name="F:wclWiFi.wclWiFiAvailableNetwork.Flags">
            <summary> Various flags for the network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAvailableNetworkFlag" />
        </member>
        <member name="T:wclWiFi.wclWiFiBss">
            <summary> The record contains information about a basic service
              set (BSS). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Ssid">
            <summary> The SSID of the access point (AP) or peer station associated
              with the BSS. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.PhyId">
            <summary> The identifier (ID) of the PHY that the wireless LAN
              interface used to detect the BSS network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Mac">
            <summary> The media access control (MAC) address of the access point
              for infrastructure BSS networks or the peer station for independent
              BSS networks (ad hoc networks) that sent the 802.11 Beacon or
              Probe Response frame received by the wireless LAN interface while
              scanning. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.BssType">
            <summary> The BSS network type. This member can be one of the
              following values: <c>bssInfrastructure</c> or
              <c>bssIndependent</c>. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiBss.PhyType">
            <summary> The PHY type for this network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Rssi">
            <summary> The received signal strength indicator (RSSI) value, in units
              of decibels referenced to 1.0 milliwatts (dBm), as detected by the
              wireless LAN interface driver for the AP or peer station. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.LinkQuality">
            <summary> The link quality reported by the wireless LAN interface
              driver. The link quality value ranges from 0 through 100. A value
              of 100 specifies the highest link quality. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.InRegDomain">
            <summary> <para> A value that specifies whether the AP or peer station
              is operating within the regulatory domain as identified by the
              country/region. </para>
              <para> If the wireless LAN interface driver does not support multiple
              regulatory domains, this member is set to <c>True</c>. </para>
              <para> If the 802.11 Beacon or Probe Response frame received from the
              AP or peer station does not include a Country information
              element (IE), this member is set to <c>True</c>. </para>
              <para> If the 802.11 Beacon or Probe Response frame received from the
              AP or peer station does include a Country IE, this member is set to
              <c>False</c> if the value of the Country String subfield does not
              equal the input country string. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.BeaconPeriod">
            <summary> <para> The value of the Beacon Interval field from the 802.11
              Beacon or Probe Response frame received by the wireless LAN
              interface. </para>
              <para> The interval is in 1.024 microsecond time units between target
              beacon transmission times. This information is retrieved from the
              beacon packet sent by an access point in an infrastructure BSS network
              or a probe response from an access point or peer station in response
              to a wireless LAN client sending a Probe Request. </para>
              <para> The IEEE 802.11 standard defines a unit of time as equal
              to 1.024 microseconds. This unit was defined so that it could be
              easily implemented in hardware. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Timestamp">
            <summary> The value of the Timestamp field from the 802.11 Beacon or
              Probe Response frame received by the wireless LAN
              interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.HostTimestamp">
            <summary> The host timestamp value that records when wireless LAN
              interface received the Beacon or Probe Response frame. This member
              is a count of 100-nanosecond intervals since
              January 1, 1601. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Capability">
            <summary> The value of the Capability Information field from the 802.11
              Beacon or Probe Response frame received by the wireless LAN
              interface. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssCap" />
        </member>
        <member name="F:wclWiFi.wclWiFiBss.ChCenterFrequency">
            <summary> <para> The channel center frequency of the band on which
              the 802.11 Beacon or Probe Response frame was received. The value of
              ChCenterFrequency is in units of kilohertz (kHz). </para>
              <note type="note"> This member is only valid for PHY types that are
              not frequency-hopping spread spectrum (FHSS). </note> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.Rates">
            <summary> <para> An array of supported data transfer rates. </para>
              <para> Each supported data transfer rate is stored as a Word. The
              first bit of the Word specifies whether the rate is a basic rate. A
              basic rate is the data transfer rate that all stations in a basic
              service set (BSS) can use to receive frames from the wireless medium.
              If the rate is a basic rate, the first bit of the Word is
              set to 1. </para>
              <para> To calculate the data transfer rate in Mbps for an arbitrary
              array entry Rates[i], use the following equation: </para>
              <para> <c>rate_in_mbps =
              (Rates[i] and $7FFF) * 0.5</c> </para> </summary>
            <remarks> The caller is responsible to release the memory allocated for
              the dynamic array. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiBss.IeRaw">
            <summary> <para> This member contains variable-length information
              elements (IEs) bytes array from the 802.11 Beacon or Probe Response
              frames. For each BSS, the IEs are from the last Beacon or Probe
              Response frame received from that BSS network. If an IE is available
              in only one frame, the wireless LAN interface driver merges the IE
              with the other IEs from the last received Beacon or Probe Response
              frame. </para>
              <para> Information elements are defined in the IEEE 802.11
              specifications to have a common general format consisting of a
              1-byte Element ID field, a 1-byte Length field, and a variable-length
              element-specific information field. Each information element is
              assigned a unique Element ID value as defined in this IEEE 802.11
              standards. The Length field specifies the number of bytes in the
              information field. </para> </summary>
            <remarks> The caller is responsible to release the memory allocated for
              the dynamic array. </remarks>
        </member>
        <member name="T:wclWiFi.wclCustomWiFiComponent">
            <summary> The base component class for all WCL WiFi Framework
              components </summary>
            <remarks> The class implements the basic operations such us initializing
              and finalizing underlying WLAN subsystem, manages privileges and
              others common operations. </remarks>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.ElevatePrivileges">
            <summary> The function must setup privileges for Native WiFi. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> By default this function does nothing and always returns
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. The
              <c>wclCustomWiFiSecurableComponent</c> class overrides this function
              to implement elevation code. </remarks>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.InternalClose">
            <summary> Executes additional finalization produres. </summary>
            <remarks> <para> The derived class must override this method to execute
              extra finalization procedures. </para>
              <para> If the derived class does not need any extra finalization then
              the method must return <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> result
              code. </para> </remarks>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.InternalOpen">
            <summary> Executes additional initialization produres. </summary>
            <remarks> <para> The derived class must override this method to execute
              extra initialization procedures. </para>
              <para> If the derived class does not need any extra initialization
              then the method must return <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> result
              code. </para> </remarks>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.DoAfterOpen">
            <summary> Fires the <c>AfterOpen</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.DoBeforeClose">
            <summary> Fires the <c>BeforeClose</c> event. </summary>
        </member>
        <member name="P:wclWiFi.wclCustomWiFiComponent.Handle">
            <summary> Provides access to the WLAN subsyste handle. </summary>
            <value> The WLAN subsystem handle. </value>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.Close">
            <summary> Closes the component. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiComponent.Open">
            <summary> Opens the component. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> Before unsing any of the methods of the component an
              application must call the <c>Open</c> method. </remarks>
        </member>
        <member name="P:wclWiFi.wclCustomWiFiComponent.Active">
            <summary> Gets the component state. </summary>
            <value> <c>True</c> if the component is opened. </value>
        </member>
        <member name="E:wclWiFi.wclCustomWiFiComponent.AfterOpen">
            <summary> The event fires after the component was successfully
              opened. </summary>
            <remarks> The event fires only if the <c>Open</c> method returns
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the <c>Open</c> method failed then
              the even will not fire. </remarks>
        </member>
        <member name="E:wclWiFi.wclCustomWiFiComponent.BeforeClose">
            <summary> The even fires before the component will be closed. </summary>
        </member>
        <member name="T:wclWiFi.wclCustomWiFiSecurableComponent">
            <summary> The class adds the WLAN security management to basic WiFi
              methods. </summary>
            <remarks> This is the base class for the WiFi Framework components
              which require security settings management. </remarks>
            <seealso cref="T:wclWiFi.wclCustomWiFiComponent" />
        </member>
        <member name="M:wclWiFi.wclCustomWiFiSecurableComponent.ElevatePrivileges">
            <summary> The function sets up privileges for Native WiFi. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiSecurableComponent.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclWiFiDriParser">
            <summary> The class adds Drone Remote ID information element parsing
              methods. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInformationElementParser" />
            <summary> The class adds Drone Remote ID information element parsing
              methods. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInformationElementParser" />
        </member>
        <member name="M:wclWiFi.Dri.wclWiFiDriParser.#ctor">
            <summary> Creates new parser object. </summary>
        </member>
        <member name="M:wclWiFi.Dri.wclWiFiDriParser.ExtractDriElements(wclWiFi.wclWiFiBss,wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts Drone Remote ID information elements from WiFi BSS
              data. </summary>
            <param name="Bss"> The WiFi BSS data. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <remarks> As Windows may combine multiple Information Elements received
              in different Beacon advertisement in a single raw data stream there
              can be more than one IE with given ID. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiBss" />
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="M:wclWiFi.Dri.wclWiFiDriParser.ExtractDriElements(System.Byte[],wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts Drone Remote ID information elements from WiFi frame
              IE raw data. </summary>
            <param name="Raw"> The WiFi frame IE raw bytes array. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <remarks> As Windows may combine multiple Information Elements received
              in different Beacon advertisement in a single raw data stream there
              can be more than one IE with given ID. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="M:wclWiFi.Dri.wclWiFiDriParser.ParseDriMessages(wclWiFi.wclWiFiBss,System.Collections.Generic.List{wclWiFi.Dri.wclDriMessage})">
            <summary> Extracts DRI messages from BSS information
              elements. </summary>
            <param name="Bss"> The WiFi BSS data. </param>
            <param name="Messages"> If the method completed with success on output
              contains the DRI messages list. An application is responsible to free
              the returned list. If no one DRI message found the returning value
              is the empty list. </param>
            <seealso cref="T:wclWiFi.wclWiFiBss" />
        </member>
        <member name="M:wclWiFi.Dri.wclWiFiDriParser.ParseDriMessages(System.Byte[],System.Collections.Generic.List{wclWiFi.Dri.wclDriMessage})">
            <summary> Extracts DRI messages from information elements raw
              data. </summary>
            <param name="Raw"> The IE raw data. </param>
            <param name="Messages"> If the method completed with success on output
              contains the DRI messages list. An application is responsible to free
              the returned list. If no one DRI message found the returning value
              is the empty list. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="T:wclWiFi.Dri.wclDriVendor">
            <summary> The enumeration defines supported Drone Remote ID
              vendors. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriVendor.driAsd">
            <summary> ASD-STAN. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdMessageType">
            <summary> The ASD DRI message types. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtBasicId">
            <summary> The Basic ID message. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtLocation">
            <summary> The Location message. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtAuth">
            <summary> The Authentication message. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtSelfId">
            <summary> The Self ID message. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtSystem">
            <summary> The System message. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdMessageType.mtOperatorId">
            <summary> The Operator ID message. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdIdType">
            <summary> The ASD UAV ID type. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdIdType.itNone">
            <summary> Not assigned. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdIdType.itSerialNumber">
            <summary> Serial number. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdIdType.itCaaRegistrationId">
            <summary> Civil Aviation Authority. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdIdType.itUtmAssignedUuid">
            <summary> UAS (Unmanned Aircraft System) Traffic Management. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdIdType.itSpecificSessionId">
            <summary> ICAO managed ID. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavType">
            <summary> The ASD UAV type. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utNone">
            <summary> Not specified. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utAeroplane">
            <summary> Fixed wing. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utCopter">
            <summary> Helicopter or multirotor. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utGyroplane">
            <summary> Gyroplane. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utHybridLift">
            <summary> Fixed wing aircraft that can take off vertically. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utOrnithopter">
            <summary> Ornithopter. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utGlider">
            <summary> Glider. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utKite">
            <summary> Kite. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utFreeBalloon">
            <summary> Free balloon. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utCaptiveBalloon">
            <summary> Captive balloon. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utAirship">
            <summary> Such as a blimp. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utFreeFallParachute">
            <summary> Unpowered parachute. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utRocket">
            <summary> Rocket. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utTetheredPoweredAircraft">
            <summary> Tethered powered aircraft. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utGroundObstacle">
            <summary> Ground obstacle. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavType.utOther">
            <summary> Any other. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdDescriptionType">
            <summary> The description type. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdDescriptionType.dtText">
            <summary> General free-form information text. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdDescriptionType.dtEmergency">
            <summary> Emergency status description. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdDescriptionType.dtExtended">
            <summary> Extended status description. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdOperatorLocationType">
            <summary> UAV operator location type. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdOperatorLocationType.ltTakeOff">
            <summary> Takeoff location and altitude. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdOperatorLocationType.ltLiveGnss">
            <summary> Dynamic/Live location and altitude. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdOperatorLocationType.ltFixed">
            <summary> Fixed location and altitude. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdOperatorClassification">
            <summary> UAV operator classification. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdOperatorClassification.ocUndeclared">
            <summary> Classification not specififed. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdOperatorClassification.ocEu">
            <summary> European Union. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavEuCategory">
            <summary> European UAV category. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuCategory.ucUndeclared">
            <summary> Unspecified. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuCategory.ucOpen">
            <summary> Open category. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuCategory.ucSpecific">
            <summary> Specific category. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuCategory.ucCertified">
            <summary> Certified category. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavEuClass">
            <summary> European UAV class. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucUnspecified">
            <summary> Unspecified. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass0">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass1">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass2">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass3">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass4">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass5">
            <summary> Class 0. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavEuClass.ucClass6">
            <summary> Class 0. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavStatus">
            <summary> The ASD UAV status. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavStatus.usUndeclared">
            <summary> Undeclared. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavStatus.usGround">
            <summary> Ground. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavStatus.usAirborne">
            <summary> Airborne. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavStatus.usEmergency">
            <summary> Emergency. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavStatus.usFailure">
            <summary> RID system failure. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavHeightReference">
            <summary> The ASD UAV height reference. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHeightReference.hrTakeOff">
            <summary> Takeoff reference. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHeightReference.hrGround">
            <summary> Ground reference. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy">
            <summary> ASD UAV horizontal accuracy. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.haUnknown">
            <summary> Unknown. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha10Nm">
            <summary> 10 Nautical miles. 18.52 km </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha4Nm">
            <summary> 4 Nautical miles. 7.408 km </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha2Nm">
            <summary> 2 Nautical miles. 3.704 km </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha1Nm">
            <summary> 1 Nautical mile. 1.852 km </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha05Nm">
            <summary> 0.5 Nautical mile. 926 m </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha03Nm">
            <summary> 0.3 Nautical mile. 555.6 m </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha01Nm">
            <summary> 0.1 Nautical mile. 185.2 m </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha005Nm">
            <summary> 0.05 Nautical mile. 92.6 m </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha30M">
            <summary> 30 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha10M">
            <summary> 10 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha3M">
            <summary> 3 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy.ha1M">
            <summary> 1 meter. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy">
            <summary> ASD UAV vertical accuracy. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.vaUnknown">
            <summary> Unknown. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va150M">
            <summary> 150 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va45M">
            <summary> 45 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va25M">
            <summary> 25 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va10M">
            <summary> 10 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va3M">
            <summary> 3 meters. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy.va1M">
            <summary> 1 meter. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy">
            <summary> ASD UAV speed accuracy. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy.saUnknown">
            <summary> Unknown. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy.sa10MS">
            <summary> 10 m/s. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy.sa3MS">
            <summary> 3 m/s. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy.sa1Ms">
            <summary> 1 m/s. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy.sa03Ms">
            <summary> 0.3 m/s. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy">
            <summary> ASD UAV timestamp accuracy. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.taUnknown">
            <summary> Unknown. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta01s">
            <summary> 0.1 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta02s">
            <summary> 0.2 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta03s">
            <summary> 0.3 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta04s">
            <summary> 0.4 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta05s">
            <summary> 0.5 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta06s">
            <summary> 0.6 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta07s">
            <summary> 0.7 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta08s">
            <summary> 0.8 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta09s">
            <summary> 0.9 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta1s">
            <summary> 1 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta11s">
            <summary> 1.1 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta12s">
            <summary> 1.2 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta13s">
            <summary> 1.3 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta14s">
            <summary> 1.4 second. </summary>
        </member>
        <member name="F:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy.ta15s">
            <summary> 1.5 second. </summary>
        </member>
        <member name="T:wclWiFi.Dri.wclDriMessage">
            <summary> The base class for Drone Remote ID messages. </summary>
        </member>
        <member name="M:wclWiFi.Dri.wclDriMessage.#ctor(System.Byte[],wclWiFi.Dri.wclDriVendor)">
            <summary> Creates new DRI message object. </summary>
            <param name="Data"> The raw DRI message data. </param>
            <param name="Vendor"> The DRI system vendor ID. </param>
            <seealso cref="T:wclWiFi.Dri.wclDriVendor" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriMessage.Data">
            <summary> Gets the message raw data. </summary>
            <value> The raw bytes array. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriMessage.Vendor">
            <summary> Gets the vendor ID. </summary>
            <value> The vendor ID. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriVendor" />
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdMessage">
            <summary> The base class for ASD DRI message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdMessage.Counter">
            <summary> Gets the message counter. </summary>
            <value> The message counter. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdMessage.MessageType">
            <summary> Gets the message type. </summary>
            <value> The ASD DRI message type. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdMessageType" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdMessage.Version">
            <summary> Gets the protocol version. </summary>
            <value> The protocol version number. </value>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdIdMessage">
            <summary> The base class for ASD ID messages. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdIdMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdIdMessage.Id">
            <summary> Gets the ID. </summary>
            <value> The ID. </value>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdBasicIdMessage">
            <summary> The ASD Basic ID message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdIdMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdBasicIdMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdBasicIdMessage.IdType">
            <summary> Gets the UAV ID type. </summary>
            <value> The ID type. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdIdType" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdBasicIdMessage.UavType">
            <summary> Gets the UAV type. </summary>
            <value> The UAV type. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavType" />
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdSelfIdMessage">
            <summary> The ASD Self ID message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdSelfIdMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSelfIdMessage.Description">
            <summary> Gets the description. </summary>
            <value> The description. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSelfIdMessage.DescriptionType">
            <summary> Gets the description type. </summary>
            <value> The description type. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdDescriptionType" />
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdCoordinateMessage">
            <summary> The base class for ASD messages with coordinates. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdCoordinateMessage.DecodeAltitude(System.UInt16)">
            <summary> Converts unsigned integer encoded value to a floating point
             altitude value. </summary>
            <param name="Value"> The encoded value. </param>
            <returns> The decoded altitude. </returns>
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdCoordinateMessage.DecodeCoordinate(System.Int32)">
            <summary> Converts unsigned integer encoded values to a floating point
              coordinate value. </summary>
            <param name="Value"> The encoded value. </param>
            <returns> The decoded coordinate. </returns>
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdCoordinateMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdSystemMessage">
            <summary> The ASD System message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdCoordinateMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdSystemMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.AreaCeiling">
            <summary> Gets the area ceiling. </summary>
            <value> The area ceiling in meters. If ceiling is unknown or invalid the
              value is -1000m. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.AreaCount">
            <summary> Gets the area count. </summary>
            <value> The area count. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.AreaFloor">
            <summary> Gets the area floor. </summary>
            <value> The area floor in meters.  If floor is unknown or invalid the
              value is -1000m. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.AreaRadius">
            <summary> Gets the area radius. </summary>
            <value> The area radius in meters. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.OperatorAltitude">
            <summary> Gets the operator altitude. </summary>
            <value> The operator altitude. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.OperatorClassification">
            <summary> Gets the UAV operator classification. </summary>
            <value> The operator classification. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdOperatorClassification" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.OperatorLatitude">
            <summary> Gets the UAV operator latitude. </summary>
            <value> The latitude value. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.OperatorLocation">
            <summary> Gets the UAV operator location type. </summary>
            <value> The location type. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdOperatorLocationType" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.OperatorLongitude">
            <summary> Gets the UAV operator longitude. </summary>
            <value> The longitude value. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.Timestamp">
            <summary> Gets the timestamp. </summary>
            <value> The timestamp. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.UavEuCategory">
            <summary> Gets the European UAV category. </summary>
            <value> The UAV category. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavEuCategory" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdSystemMessage.UavEuClass">
            <summary> Gets the European UAV class. </summary>
            <value> The UAV class. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavEuClass" />
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdOperatorIdMessage">
            <summary> The ASD Operator ID message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdIdMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdOperatorIdMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdOperatorIdMessage.IdType">
            <summary> Gets the UAV operator ID type. </summary>
            <value> The operator ID type. </value>
        </member>
        <member name="T:wclWiFi.Dri.wclDriAsdLocationMessage">
            <summary> The ASD UAV Location message. </summary>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdCoordinateMessage" />
        </member>
        <member name="M:wclWiFi.Dri.wclDriAsdLocationMessage.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new DRI message object. </summary>
            <param name="Counter"> The message counter. </param>
            <param name="Data"> The raw DRI message data. </param>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.BaroAltitude">
            <summary> Gets the baro altitude. </summary>
            <value> The altitude in meters. If altitude is unknown or invalid the
              value is -1000m. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.BaroAccuracy">
            <summary> Gets the baro altitude accuracy. </summary>
            <value> The baro accuracy. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Direction">
            <summary> Gets the UAV direction. </summary>
            <value> The UAV direction in degrees. If the direction is unknown or
              invalid the value is 361. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.GeoAltitude">
            <summary> Gets the geo altitude. </summary>
            <value> The altitude in meters. If altitude is unknown or invalid the
              value is -1000m. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Height">
            <summary> Gets height. </summary>
            <value> The height in meters. If height is unknown or invalid the
              value is -1000m. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.HeightReference">
            <summary> Gets the height reference. </summary>
            <value> The height reference. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavHeightReference" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.HorizontalAccuracy">
            <summary> Gets the horizontal accuracy. </summary>
            <value> The horizontal accuracy. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavHorizontalAccuracy" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.HorizontalSpeed">
            <summary> Gets the horizontal speed. </summary>
            <value> The horizontal speed in m/s. The maximum speed value is
              254.25 m/s. If the speed is unknown or invalid the value is
              255 m/s. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Latitude">
            <summary> Gets the latitude. </summary>
            <value> The latitude. If the latitude is invalid or unknown the value
              is 0. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Longitude">
            <summary> Gets the longitude. </summary>
            <value> The longitude. If the longitude is invalid or unknown the value
              is 0. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.SpeedAccuracy">
            <summary> Gets the speed accuracy. </summary>
            <value> The speed accuracy. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavSpeedAccuracy" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Status">
            <summary> Gets the UAV status. </summary>
            <value> The UAV status. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavStatus" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.Timestamp">
            <summary> Gets the timestamp. </summary>
            <value> The timestamp. </value>
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.TimestampAccuracy">
            <summary> Gets the timestamp accuracy. </summary>
            <value> The timestamp accuracy. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavTimestampAccuracy" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.VerticalAccuracy">
            <summary> Gets the vertical accuracy. </summary>
            <value> The vertical accuracy. </value>
            <seealso cref="T:wclWiFi.Dri.wclDriAsdUavVerticalAccuracy" />
        </member>
        <member name="P:wclWiFi.Dri.wclDriAsdLocationMessage.VerticalSpeed">
            <summary> Gets the vertical speed. </summary>
            <value> The vertical speed in m/s. The maximum value is 62 m/s. If the
              speed is unknown or invalid the value is 63 m/s. </value>
        </member>
        <member name="T:wclWiFi.wclWiFiErrors">
            <summary> WiFi Framework error codes. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WLAN_BASE">
            <summary> The base error code for the WLAN subsystem. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WLAN_UNABLE_LOAD">
            <summary> Unable to load the WiFi subsystem. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WLAN_NOT_LOADED">
            <summary> The WiFi subsystem was not loaded. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WLAN_UNABLE_CREATE_MUTEX">
            <summary> The WiFi subsystem can not create synchronization mutex
              object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_BASE">
            <summary> The base error code for the WiFi framework. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_OPENED">
            <summary> A WiFi is already opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_CLOSED">
            <summary> A WiFi is already closed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NOT_ACTIVE">
            <summary> A WiFi was not opened (is not active). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_FUNCTION_NOT_FOUND">
            <summary> A calling function was not found in WLAN API. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ACCESS_DENIED">
            <summary> The caller does not have sufficient permissions. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INVALID_CLIENT_HANDLE">
            <summary> An invalid WLAN client handle used. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NOT_ENOUGH_MEMORY">
            <summary> WLAN API can not allocate memory to execute an
              requested operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NOT_SUPPORTED">
            <summary> The required operation is not supported by the WiFi
              subsystem. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_UNEXPECTED">
            <summary> An unexpected exception was raised during WLAN API
              call. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INVALID_ARGUMENT">
            <summary> One or more arguments passed into the WLAN API are
              invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NOT_AVAILABLE">
            <summary> The WiFi hardware or driver was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_TOO_MANY_SESSIONS">
            <summary> Too many sessions to WLAN subsystem are opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INVALID_STATE">
            <summary> The resource is not in the correct state to perform the
              requested operation. This error is returned if the wireless Hosted
              Network is disabled by group policy on a domain. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RADIO_OFF">
            <summary> The radio associated with the interface is turned off.
              There are no available networks when the radio is off. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RPC_SUBSYSTEM">
            <summary> Internal WLAN driver error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_PHY_NOT_FOUND">
            <summary> The PHY with given index was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_BAD_CONFIGURATION">
            <summary> The configuration data for the wireless Hosted Network is
              unconfigured. This error is returned if the application queries
              the Hosted Network Profile or Hosted Network Connection Settings
              before a SSID is configured in the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NOT_FOUND">
            <summary> The wireless profile specified by was not found in the profile
              store. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ALREADY_EXISTS">
            <summary> The WLAN profile already exists. Typically, this return value
              is used when <c>Overwrite</c> is <c>False</c>; however, if
              <c>Overwrite</c> is <c>True</c> and <c>Flags</c> specifies a different
              profile type than the one used by the existing profile, then the
              existing profile will not be overwritten and
              <c>WCL_E_WIFI_ALREADY_EXISTS</c> will be returned. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_BAD_PROFILE">
            <summary> The profile is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NO_MATCH">
            <summary> The interface does not support one or more of the capabilities
              specified in the profile. For example, if a profile specifies the use
              of WPA2 when the NIC only supports WPA, then this error code is
              returned. Also, if a profile specifies the use of FIPS mode when the
              NIC does not support FIPS mode, then this error code is
              returned. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DATA_NOT_FOUND">
            <summary> This error is returned if no user custom data exists for the
              profile specified. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_CREATE_THREAD_FAILED">
            <summary> Unable to create thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_GET_THREAD_RESULT_FAILED">
            <summary> Unable to get operation thread result code. </summary> 
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_START_ASYNC_OPERATION_FAILED">
            <summary> Unable to start asynchronous operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_WAIT_ASYNC_OPERATION_FAILED">
            <summary> Unable to get asynchronous operation information
              interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_GET_ASYNC_RESULT_FAILED">
            <summary> Unable to get asynchronous operation result. </summary> 
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_GET_SIZE_FAILED">
            <summary> Unable to get found adapters count. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_CHANGE_STATE_FAILED">
            <summary> Unable to change the WiFi Adapter state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_FEATURE_NOT_SUPPORTED">
            <summary> The feature is not supported on this platform. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONE_OF_MORE_BSS_IS_INVALID">
            <summary> One or more BSS ID in the BSS list used in Connect operation
              is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_PATH_NOT_FOUND">
            <summary> The system cannot find the path specified. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INVALID_DATA">
            <summary> The data is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_BAD_ARGUMENTS">
            <summary> One or more arguments are not correct. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_CANTOPEN">
            <summary> The configuration registry key could not be opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DATATYPE_MISMATCH">
            <summary> The data supplied is of the wrong type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOSTED_NETWORK_STARTED">
            <summary> The Hosted Network has already been started. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_PSD_IE_NOT_SUPPORTED">
            <summary> The Hosted Network does not support PSD IE on this platform. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_BASE">
            <summary> The base error code for WiFi EAP errors. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_ACCOUNT_OTHER_ERROR">
            <summary> The EAPHost received EAP failure after the identity exchange.
              There is likely a problem with the authenticating user
              account. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_CERT_STORE_INACCESSIBLE">
            <summary> The certificate store can not be accessed on either the
              authenticator or the peer. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_METHOD_NOT_INSTALLED">
            <summary> The requested EAP method is not installed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_QEC_INACCESSIBLE">
            <summary> The EAPHost is not able to communicate with the EAP quarantine
              enforcement client (QEC) on a client with Network Access Protection
              (NAP) enabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_IDENTITY_UNKNOWN">
            <summary> The EAPHost returns this error if the authenticator fails the
              authentication after the peer sent its identity. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_AUTHENTICATION_FAILED">
            <summary> The EAPHost returns this error on authentication
              failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_NEGOTIATION_FAILED">
            <summary> The EAPHost returns this error when the client and the server
              are not configured with compatible EAP types. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_METHOD_INVALID_PACKET">
            <summary> The EAPMethod received an EAP packet that cannot be
              processed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_REMOTE_INVALID_PACKET">
            <summary> The EAPHost received a packet that cannot be
              processed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_XML_MALFORMED">
            <summary> The EAPHost configuration schema validation failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_METHOD_CONFIG_DOES_NOT_SUPPORT_SSO">
            <summary> The EAP method does not support single signon for the provided
              configuration. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_HOST_METHOD_OPERATION_NOT_SUPPORTED">
            <summary> The EAPHost returns this error when a configured EAP method does
              not support a requested operation (procedure call). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_NOT_FOUND">
            <summary> The EAPHost could not find the user certificate for
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_INVALID">
            <summary> The user certificate being used for authentication does not have
              a proper extended key usage (EKU) set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_EXPIRED">
            <summary> The EAPhost found a user certificate which has
              expired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_REVOKED">
            <summary> The user certificate being used for authentication has been
              revoked. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_OTHER_ERROR">
            <summary> An unknown error occurred with the user certificate being used
              for authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CERT_REJECTED">
            <summary> The authenticator rejected the user certificate being used for
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_CREDENTIALS_REJECTED">
            <summary> The authenticator rejected the user credentials for
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_NAME_PASSWORD_REJECTED">
            <summary> The authenticator rejected the user credentials for
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_NO_SMART_CARD_READER">
            <summary> No smart card reader was present. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_SERVER_CERT_INVALID">
            <summary> The server certificate being user for authentication does not
              have a proper EKU set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_SERVER_CERT_EXPIRED">
            <summary> The EAPhost found a server certificate which has
              expired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_SERVER_CERT_REVOKED">
            <summary> The server certificate being used for authentication has been
              revoked. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_SERVER_CERT_OTHER_ERROR">
            <summary> An unknown error occurred with the server certificate being used
              for authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_ROOT_CERT_NOT_FOUND">
            <summary> The EAPHost could not find a certificate in trusted root
              certificate store for user certificate validation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_ROOT_CERT_INVALID">
            <summary> The authentication failed because the root certificate used for
              this network is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_USER_ROOT_CERT_EXPIRED">
            <summary> The trusted root certificate needed for user certificate
              validation has expired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_EAP_SERVER_ROOT_CERT_NOT_FOUND">
            <summary> The EAPHost could not find a root certificate in the trusted
              root certificate store for server certificate validation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_BASE">
            <summary> The base code for the WiFi subsystem reasons. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_UNKNOWN">
            <summary> The reason for failure is unknown. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NETWORK_NOT_COMPATIBLE">
            <summary> The wireless network is not compatible. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PROFILE_NOT_COMPATIBLE">
            <summary> The wireless network profile is not compatible. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NO_AUTO_CONNECTION">
            <summary> The profile specifies no auto connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NOT_VISIBLE">
            <summary> The wireless network is not visible. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_GP_DENIED">
            <summary> The wireless network is blocked by group policy. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_USER_DENIED">
            <summary> The wireless network is blocked by the user. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_BSS_TYPE_NOT_ALLOWED">
            <summary> The basic service set (BSS) type is not allowed on this wireless
              adapter. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IN_FAILED_LIST">
            <summary> The wireless network is in the failed list. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IN_BLOCKED_LIST">
            <summary> The wireless network is in the blocked list. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_SSID_LIST_TOO_LONG">
            <summary> The size of the service set identifiers (SSID) list exceeds the
              maximum size supported by the adapter. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_CONNECT_CALL_FAIL">
            <summary> The Media Specific Module (MSM) connect call fails. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_SCAN_CALL_FAIL">
            <summary> The MSM scan call fails. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NETWORK_NOT_AVAILABLE">
            <summary> <para> The specified network is not available. </para>
              <para> This reason code is also used when there is a mismatch between
              capabilities specified in an XML profile and interface and/or network
              capabilities. For example, if a profile specifies the use of WPA2 when
              the NIC only supports WPA, then this error code is returned. Also, if
              a profile specifies the use of FIPS mode when the NIC does not
              support FIPS mode, then this error code is returned. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PROFILE_CHANGED_OR_DELETED">
            <summary> The profile was changed or deleted before the connection was
              established. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_KEY_MISMATCH">
            <summary> The profile key does not match the network key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_USER_NOT_RESPOND">
            <summary> The user is not responding. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AP_PROFILE_NOT_ALLOWED_FOR_CLIENT">
            <summary> An application tried to apply a wireless Hosted Network profile
              to a physical wireless network adapter using the WlanSetProfile
              function, rather than to a virtual device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AP_PROFILE_NOT_ALLOWED">
            <summary> An application tried to apply a wireless Hosted Network profile
              to a physical wireless network adapter using the <c>SetProfile</c>
              method, rather than to a virtual device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_PROFILE_SCHEMA">
            <summary> The profile invalid according to the schema. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PROFILE_MISSING">
            <summary> The <c>WLANProfile</c> element is missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_PROFILE_NAME">
            <summary> The name of the profile is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_PROFILE_TYPE">
            <summary> The type of the profile is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_PHY_TYPE">
            <summary> The PHY type is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSM_SECURITY_MISSING">
            <summary> The MSM security settings are missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_SECURITY_NOT_SUPPORTED">
            <summary> The independent hardware vendor (IHV) security settings are
              missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_OUI_MISMATCH">
            <summary> The IHV profile OUI did not match with the adapter
              OUI. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_OUI_MISSING">
            <summary> The IHV OUI settings are missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_SETTINGS_MISSING">
            <summary> The IHV security settings are missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_CONNECTIVITY_NOT_SUPPORTED">
            <summary> An application tried to apply an IHV profile on an adapter that
              does not support IHV connectivity settings. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_CONFLICT_SECURITY">
            <summary> The security settings conflict. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_SECURITY_MISSING">
            <summary> The security settings are missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_BSS_TYPE">
            <summary> The BSS type is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_ADHOC_CONNECTION_MODE">
            <summary> Automatic connection cannot be set for an ad hoc
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NON_BROADCAST_SET_FOR_ADHOC">
            <summary> Non-broadcast cannot be set for an ad hoc network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AUTO_SWITCH_SET_FOR_ADHOC">
            <summary> Auto-switch cannot be set for an ad hoc network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AUTO_SWITCH_SET_FOR_MANUAL_CONNECTION">
            <summary> Auto-switch cannot be set for a manual connection
              profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_SECURITY_ONEX_MISSING">
            <summary> The IHV 802.1X security settings are missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PROFILE_SSID_INVALID">
            <summary> The SSID in the profile is invalid or missing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_TOO_MANY_SSID">
            <summary> Too many SSIDs were specified in the profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_BAD_MAX_NUMBER_OF_CLIENTS_FOR_AP">
            <summary> An application tried to apply a wireless Hosted Network profile
              to a physical network adapter NIC using the <c>SetProfile</c> method,
              and specified an unacceptable value for the maximum number of clients
              allowed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INVALID_CHANNEL">
            <summary> The channel specified is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_OPERATION_MODE_NOT_SUPPORTED">
            <summary> The operation mode is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AUTO_AP_PROFILE_NOT_ALLOWED">
            <summary> An internal operating system error occurred with the wireless
              Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AUTO_CONNECTION_NOT_ALLOWED">
            <summary> An internal operating system error occurred with the wireless
              Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_UNSUPPORTED_SECURITY_SET_BY_OS">
            <summary> The security settings are not supported by the operating
              system. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_UNSUPPORTED_SECURITY_SET">
            <summary> The security settings are not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_BSS_TYPE_UNMATCH">
            <summary> The BSS type does not match. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PHY_TYPE_UNMATCH">
            <summary> The PHY type does not match. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_DATARATE_UNMATCH">
            <summary> The data rate does not match. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_USER_CANCELLED">
            <summary> User has canceled the operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ASSOCIATION_FAILURE">
            <summary> Driver disconnected while associating. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ASSOCIATION_TIMEOUT">
            <summary> Association timed out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_PRE_SECURITY_FAILURE">
            <summary> Pre-association security failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_START_SECURITY_FAILURE">
            <summary> Failed to start security after association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_SECURITY_FAILURE">
            <summary> Security ends up with failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_SECURITY_TIMEOUT">
            <summary> Security operation times out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ROAMING_FAILURE">
            <summary> Driver disconnected while roaming. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ROAMING_SECURITY_FAILURE">
            <summary> Failed to start security for roaming. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ADHOC_SECURITY_FAILURE">
            <summary> Failed to start security for ad hoc peer. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_DRIVER_DISCONNECTED">
            <summary> Driver disconnected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_DRIVER_OPERATION_FAILURE">
            <summary> Driver failed to perform some operations. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_NOT_AVAILABLE">
            <summary> The IHV service is not available. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_IHV_NOT_RESPONDING">
            <summary> The response from the IHV service timed out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_DISCONNECT_TIMEOUT">
            <summary> Timed out waiting for the driver to disconnect. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_INTERNAL_FAILURE">
            <summary> An internal error prevented the operation from being
              completed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_UI_REQUEST_TIMEOUT">
            <summary> A user interaction request timed out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_TOO_MANY_SECURITY_ATTEMPTS">
            <summary> Roaming too often. Post security was not completed after 5
              attempts. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_AP_STARTING_FAILURE">
            <summary> An internal operating system error occurred that resulted in a
              failure to start the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_NO_VISIBLE_AP">
            <summary> Failed to connect because no connectable Access Point was
              visible. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_KEY_INDEX">
            <summary> Key index specified is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_PSK_PRESENT">
            <summary> Key required, PSK present. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_KEY_LENGTH">
            <summary> Invalid key length. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_PSK_LENGTH">
            <summary> Invalid PSK length. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_NO_AUTH_CIPHER_SPECIFIED">
            <summary> No auth/cipher pairs specified. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_TOO_MANY_AUTH_CIPHER_SPECIFIED">
            <summary> Too many auth/cipher pairs specified. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_DUPLICATE_AUTH_CIPHER">
            <summary> Profile contains duplicate auth/cipher pair. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_RAWDATA_INVALID">
            <summary> Profile raw data is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_AUTH_CIPHER">
            <summary> Invalid auth/cipher combination. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_ONEX_DISABLED">
            <summary> 802.1X disabled when it is required to be enabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_ONEX_ENABLED">
            <summary> 802.1X enabled when it is required to be disabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_PMKCACHE_MODE">
            <summary> Invalid PMK cache mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_PMKCACHE_SIZE">
            <summary> Invalid PMK cache size. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_PMKCACHE_TTL">
            <summary> Invalid PMK cache TTL. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_PREAUTH_MODE">
            <summary> Invalid pre-auth mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_PREAUTH_THROTTLE">
            <summary> Invalid pre-auth throttle. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_PREAUTH_ONLY_ENABLED">
            <summary> Pre-auth enabled when PMK cache is disabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_NETWORK">
            <summary> Capability matching failed at network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_NIC">
            <summary> Capability matching failed at NIC. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_PROFILE">
            <summary> Capability matching failed at profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_DISCOVERY">
            <summary> Network does not support specified capability type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_PASSPHRASE_CHAR">
            <summary> Passphrase contains invalid character. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_KEYMATERIAL_CHAR">
            <summary> Key material contains invalid character. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_WRONG_KEYTYPE">
            <summary> The key type specified does not match the key
              material. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_MIXED_CELL">
            <summary> A mixed cell is suspected. The AP is not signaling that it is
              compatible with a privacy-enabled profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_AUTH_TIMERS_INVALID">
            <summary> The number of authentication timers or the number of timeouts
              specified in the profile is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_INVALID_GKEY_INTV">
            <summary> The group key update interval specified in the profile is
              invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_TRANSITION_NETWORK">
            <summary> A "transition network" is suspected. Legacy 802.11 security is
              used for the next authentication attempt. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_KEY_UNMAPPED_CHAR">
            <summary> The key contains characters that are not in the ASCII character
              set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_PROFILE_AUTH">
            <summary> Capability matching failed because the network does not support
              the authentication method in the profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_PROFILE_CIPHER">
            <summary> Capability matching failed because the network does not support
              the cipher algorithm in the profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_SAFE_MODE">
            <summary> FIPS 140-2 mode value in the profile is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NIC">
            <summary> Profile requires FIPS 140-2 mode, which is not supported by
              network interface card (NIC). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NW">
            <summary> Profile requires FIPS 140-2 mode, which is not supported by
               network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_UNSUPPORTED_AUTH">
            <summary> Profile specifies an unsupported authentication,
              mechanism. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PROFILE_UNSUPPORTED_CIPHER">
            <summary> Profile specifies an unsupported cipher. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_UI_REQUEST_FAILURE">
            <summary> Failed to queue the user interface request. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CAPABILITY_MFP_NW_NIC">
            <summary> The wireless LAN requires Management Frame Protection (MFP) and
              the network interface does not support MFP. For more information, see
              the IEEE 802.11w amendment to the 802.11 standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_AUTH_START_TIMEOUT">
            <summary> 802.1X authentication did not start within configured
              time. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_AUTH_SUCCESS_TIMEOUT">
            <summary> 802.1X authentication did not complete within configured
              time. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_KEY_START_TIMEOUT">
            <summary> Dynamic key exchange did not start within configured
              time. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_KEY_SUCCESS_TIMEOUT">
            <summary> Dynamic key exchange did not complete within configured
              time. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M3_MISSING_KEY_DATA">
            <summary> Message 3 of 4-way handshake has no key data. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M3_MISSING_IE">
            <summary> Message 3 of 4-way handshake has no IE. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M3_MISSING_GRP_KEY">
            <summary> Message 3 of 4-way handshake has no GRP key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PR_IE_MATCHING">
            <summary> Matching security capabilities of IE in M3 failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_SEC_IE_MATCHING">
            <summary> Matching security capabilities of secondary IE in M3
              failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_NO_PAIRWISE_KEY">
            <summary> Required a pairwise key but access point (AP) configured only
              group keys. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_G1_MISSING_KEY_DATA">
            <summary> Message 1 of group key handshake has no key data. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_G1_MISSING_GRP_KEY">
            <summary> Message 1 of group key handshake has no group key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PEER_INDICATED_INSECURE">
            <summary> AP reset secure bit after connection was secured. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_NO_AUTHENTICATOR">
            <summary> 802.1X indicated that there is no authenticator, but the profile
              requires one. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_NIC_FAILURE">
            <summary> Plumbing settings to NIC failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_CANCELLED">
            <summary> Operation was canceled by a caller. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_KEY_FORMAT">
            <summary> Entered key format is not in a valid format. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_DOWNGRADE_DETECTED">
            <summary> A security downgrade was detected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_PSK_MISMATCH_SUSPECTED">
            <summary> A PSK mismatch is suspected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_FORCED_FAILURE">
            <summary> There was a forced failure because the connection method was not
              secure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M3_TOO_MANY_RSNIE">
            <summary> Message 3 of 4 way handshake contains too many RSN IE
              (RSN). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M2_MISSING_KEY_DATA">
            <summary> Message 2 of 4 way handshake has no key data (RSN
              Ad-hoc). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M2_MISSING_IE">
            <summary> Message 2 of 4 way handshake has no IE (RSN Ad-hoc). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_AUTH_WCN_COMPLETED">
            <summary> A MSM authentication WCN completed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_M3_MISSING_MGMT_GRP_KEY">
            <summary> Message 3 of 4 way handshake has no Mgmt Group Key
              (RSN). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_MSMSEC_G1_MISSING_MGMT_GRP_KEY">
            <summary> Message 1 of group key handshake has no group management
              key. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_UNABLE_TO_IDENTIFY_USER">
            <summary> No user is available for 802.1X authentication. This error can
              occur when machine authentication is disabled and no user is logged on
              to the machine. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_IDENTITY_NOT_FOUND">
            <summary> The 802.1X identity could not be found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_UI_DISABLED">
            <summary> Authentication could only be completed through the user
              interface and this interface could not be displayed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_EAP_FAILURE_RECEIVED">
            <summary> The EAP authentication failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_AUTHENTICATOR_NO_LONGER_PRESENT">
            <summary> The 802.1X authenticator went away from the network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_VERSION_NOT_SUPPORTED">
            <summary> The version of the OneX profile supplied is not
              supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_LENGTH">
            <summary> The OneX profile has an invalid length. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_DISALLOWED_EAP_TYPE">
            <summary> The EAP type specified in the OneX profile(possibly supplied by
              the EAPType element) is not allowed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG">
            <summary> The EAP Type specified in the OneX profile (possibly supplied
              by the EAPType element) is invalid, or one of the EAP flags (possibly
              supplied in the EAPConfig element) is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_ONEX_FLAGS">
            <summary> The supplicant flags (possibly supplied in the EAPConfig
              element) in the OneX profile are invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_TIMER_VALUE">
            <summary> A timer specified in the OneX profile (possibly supplied by the
              heldPeriod, authPeriod, or startPeriod element) is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_SUPPLICANT_MODE">
            <summary> The supplicant mode specified in the OneX profile (possibly
              supplied by the supplicantMode element) is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_AUTH_MODE">
            <summary> The authentication mode specified in the OneX profile (possibly
              supplied by the authMode element) is invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES">
            <summary> The connection properties specified in the OneX profile
              (possibly supplied by the EAPConfig element) are invalid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_UI_CANCELLED">
            <summary> User input was canceled. This value can be returned if an EAP
              method requested user input, but the user hit the Cancel button or
              dismissed the user input dialog. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS">
            <summary> The saved user credentials are not valid. This value can be
              returned if a profile was saved with bad credentials (an incorrect
              password, for example), since the credentials are not tested until the
              profile is actually used to establish a connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS">
            <summary> The saved user credentials have expired. This value can be
              returned if a profile was saved with credentials and the credentials
              subsequently expired (password expiration after some period of time,
              for example). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_ONEX_UI_NOT_PERMITTED">
            <summary> User interface is not permitted. On Windows 7 and on Windows
              Server 2008 R2 with the Wireless LAN Service installed, this value can
              be returned if an EAP method requested user input and the profile is
              configured with user credentials saved by another user and not the
              currently logged in user. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_RES_UNDEFINED">
            <summary> The undefined reason code. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_BASE">
            <summary> The base code for the 802.1x authentication reasons. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_PEER_INITIATED">
            <summary> The EAPHost component (the peer) requested the 802.1x module
              to restart 802.1X authentication. This results from a
              EapHostPeerProcessReceivedPacket function call that returns an
              EapHostPeerResponseAction enumeration value of
              EapHostPeerResponseStartAuthentication in the pEapOutput
              parameter. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_MSM_INITIATED">
            <summary> The Media Specific Module (MSM) initiated the 802.1X
              authentication restart. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_HELD_STATE_TIMEOUT">
            <summary> The 802.1X authentication restart was the result of a state
              timeout. The timer expiring is the heldWhile timer of the 802.1X
              supplicant state machine defined in IEEE 802.1X - 2004 standard for
              Port-Based Network Access Control. The heldWhile timer is used by the
              supplicant state machine to define periods of time during which
              it will not attempt to acquire an authenticator. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_AUTH_TIMEOUT">
            <summary> The 802.1X authentication restart was the result of an state
              timeout. The timer expiring is the authWhile timer of the 802.1X
              supplicant port access entity defined in IEEE 802.1X - 2004 standard
              for Port-Based Network Access Control. The authWhile timer is
              used by the supplicant port access entity to determine how long to
              wait for a request from the authenticator before timing it
              out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_CONFIGURATION_CHANGED">
            <summary> The 802.1X authentication restart was the result of a
              configuration change to the current profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_USER_CHANGED">
            <summary> The 802.1X authentication restart was the result of a change
              of user. This could occur if the current user logs off and new user
              logs on to the local computer. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_QUARANTINE_STATE_CHANGED">
            <summary> The 802.1X authentication restart was the result of receiving
              a notification from the EAP quarantine enforcement client (QEC) due
              to a network health change. If an EAPHost supplicant is participating
              in network access protection (NAP), the supplicant will respond to
              changes in the state of its network health. If that state changes,
              the supplicant must then initiate a re-authentication
              session. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_ALT_CREDS_TRIAL">
            <summary> The 802.1X authentication restart was caused by a new
              authentication attempt with alternate user credentials. EAP methods
              like MSCHAPv2 prefer to use logged-on user credentials for 802.1X
              authentication. If these user credentials do not work, then a dialog
              will be displayed to the user that asks permission to use alternate
              credentials for 802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_ONEX_RES_INVALID">
            <summary> Unknown reason. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_BASE">
            <summary> The base code for the hosted network reasons. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_UNSPECIFIED">
            <summary> Unknown error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_BAD_PARAMETER">
            <summary> Bad parameters. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_SERVICE_SHUTTING_DOWN">
            <summary> Service is shutting down. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INSUFFICIENT_RESOURCES">
            <summary> Service is out of resources. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_ELEVATION_REQUIRED">
            <summary> This operation requires elevation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_READ_ONLY">
            <summary> An attempt was made to write read-only data. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_PERSISTENCE_FAILED">
            <summary> Data persistence failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_CRYPT_ERROR">
            <summary> A cryptographic error occurred. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_IMPERSONATION">
            <summary> User impersonation failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_STOP_BEFORE_START">
            <summary> An incorrect function call sequence was made. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INTERFACE_AVAILABLE">
            <summary> A wireless interface has become available. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INTERFACE_UNAVAILABLE">
            <summary> <para> A wireless interface has become unavailable. </para>
              <para> This reason code is returned by the wireless Hosted Network
              functions any time the network state of the wireless Hosted Network is
              <c>hnUnavailable</c>. For example if the wireless Hosted Network is
              disabled by group policy on a domain, then the network state of the
              wireless Hosted Network is <c>hnUnavailable</c>. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_MINIPORT_STOPPED">
            <summary> The wireless miniport driver stopped the Hosted
              Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_MINIPORT_STARTED">
            <summary> The wireless miniport driver status changed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INCOMPATIBLE_CONNECTION_STARTED">
            <summary> <para> An incompatible connection started. </para>
              <para> An incompatible connection refers to one of the following
              cases: </para>
              <list type="bullet">
                <item> An ad hoc wireless connection is started on the primary station
                       adapter. </item>
                <item> Network monitoring is started on the primary station adapter by
                       an application (Network Monitor, for example). </item>
                <item> A wireless connection is started in FIPS safe mode on the
                       primary station adapter. FIPS safe mode is specified in the
                       profile of the wireless connection. </item>
              </list>
              <para> Windows will stop the wireless Hosted Network on the
              software-based wireless access point (AP) adapter when an incompatible
              connection starts on the primary station adapter. The network state of
              the wireless Hosted Network state would become
              <c>hnUnavailable</c>. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INCOMPATIBLE_CONNECTION_STOPPED">
            <summary> <para> An incompatible connection stopped. </para>
              <para> An incompatible connection previously started on the primary
              station adapter
              (<see cref="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_INCOMPATIBLE_CONNECTION_STARTED" />),
              but the incompatible connection has stopped. If the wireless Hosted
              Network was previously stopped as a result of an incompatible connection
              being started, Windows will not automatically restart the wireless
              Hosted Network. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_USER_ACTION">
            <summary> A state change occurred that was caused by explicit user
              action. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_CLIENT_ABORT">
            <summary> A state change occurred that was caused by client
              abort. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_AP_START_FAILED">
            <summary> The driver for the wireless Hosted Network failed to
              start. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_PEER_ARRIVED">
            <summary> A peer connected to the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_PEER_DEPARTED">
            <summary> A peer disconnected from the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_PEER_TIMEOUT">
            <summary> A peer timed out. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_GP_DENIED">
            <summary> The operation was denied by group policy. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_SERVICE_UNAVAILABLE">
            <summary> The Wireless LAN service is not running. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_DEVICE_CHANGE">
            <summary> The wireless adapter used by the wireless Hosted Network
              changed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_PROPERTIES_CHANGE">
            <summary> The properties of the wireless Hosted Network
              changed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_VIRTUAL_STATION_BLOCKING_USE">
            <summary> A virtual station is active and blocking operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_RES_SERVICE_AVAILABLE_ON_VIRTUAL_STATION">
            <summary> An identical service is available on a virtual
              station. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_BASE">
            <summary> The base error code for common Hosted Network errors. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_OPEN_IP_SETTINGS_FAILED">
            <summary> Unable to access the IP settings of a Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_READ_IP_FAILED">
            <summary> Unable to read TCP/IP settings of a Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_FEATURE_NOT_SUPPORTED">
            <summary> The requested feature is not supported on current platform. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_GET_IP_TABLE_FAILED">
            <summary> Get IP table failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HN_PEER_NOT_FOUND">
            <summary> The peer with specified MAC was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_BASE">
            <summary> The base Network List Manager error code. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_CLOSED">
            <summary> The Network List Manager is closed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_OPENED">
            <summary> The Network List Manager is opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_COINITIALIZE_FAILED">
            <summary> Unable to initialize COM subsystem. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNSUPPORTED">
            <summary> The Network List Manager is not supported on this
              platform. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_EVENTS_HANDLER_SET">
            <summary> The Network List Manager events handler is already
              set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_EVENTS_HANDLER_NOT_SET">
            <summary> The Network List Manager events handler was not set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_FIND_CONNECTION_POINTS_CONTAINER">
            <summary> Unable to find the Network List Manager events handler
              connection points container. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_FIND_CONNECTION_POINT">
            <summary> Unable to find the Network List Manager events handler
              connection point. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_NE_UNABLE_FIND_CONNECTION_POINTS_CONTAINER">
            <summary> Unable to find the Network events handler connection points
              container. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_NE_UNABLE_FIND_CONNECTION_POINT">
            <summary> Unable to find the Network events handler connection
              point. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_NETWORK_NOT_FOUND">
            <summary> The network with given ID was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_CONNECTIVITY">
            <summary> Unable to get a network's or machine's connectivity. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_CONNECTED_PROPERTY">
            <summary> Unable to read <c>Connected</c> property of the Network List
              Manager or Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_DOMAIN_TYPE">
            <summary> Unable to get a network's domain type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_NETWORK_CATEGORY">
            <summary> Unable to get a network's category. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_NETWORK_DESCRIPTION">
            <summary> Unable to get a network's description. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_NETWORK_NAME">
            <summary> Unable to get a network's name. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_NETWORK_ID">
            <summary> Unable to get a network's ID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_NETWORK_CREATED_AND_CONNECTED_DATE_TIME">
            <summary> Unable to get a network's creation and connection date and
              time. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_CONNECTION_ADAPTER_ID">
            <summary> Unable to get a connection's adapter ID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_GET_CONNECTION_ID">
            <summary> Unable to read a connection's ID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_SET_NETWORK_CATEGORY">
            <summary> Unable to set a network's category. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_SET_NETWORK_DESCRIPTION">
            <summary> Unable to set a network's description. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_SET_NETWORK_NAME">
            <summary> Unable to set a network's name. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_ENUMERATE_NETWORKS">
            <summary> Unable to enumerate available networks. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_NETWORKS_NOT_FOUND">
            <summary> Networks with required type were not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_CONNECTIONS_NOT_FOUND">
            <summary> Connections were not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNABLE_ENUMERATE_CONNECTIONS">
            <summary> Unable to enumerate connections. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_NETWORK_PROFILES_NOT_FOUND">
            <summary> Network profiles list was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_ACCESS_DENIED">
            <summary> Administrative rights required for this operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_NLM_UNEXPECTED">
            <summary> Unexpected or unknown error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_BASE">
            <summary> The base error code for the WiFi Sniffer. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNABLE_CREATE_MUTEX">
            <summary> Unable to create API synchronization mutex. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNABLE_LOAD_DLL">
            <summary> Unable to load NetMon API DLL. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_WRONG_REF_COUNTER">
            <summary> The API references counter is in wrong state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_OPENED">
            <summary> The WiFi Sniffer has already been opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_CLOSED">
            <summary> The WiFi Sniffer is closed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNABLE_CREATE_IFACE_MUTEX">
            <summary> Unable to create interface protection mutex. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_IFACE_IN_USE">
            <summary> The other instance of the WiFi Sniffer is already using the same
              interface for capturing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_NOINTERFACE">
            <summary> Indicates an issue between the Network Monitor API and the
              ndisnapp object. See Working with Multi-Threaded Code. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_ALREADY_EXIST">
            <summary> The object that you are trying to create already
              exists. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_EMPTY">
            <summary> Frame comment information was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FILE_NOT_FOUND">
            <summary> The specified file was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_INVALID_STATE">
            <summary> The API or driver is in the wrong state for the requested
              operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_NOT_FOUND">
            <summary> Reference to a file, file path, handle, or data field is
              incorrect. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_NOT_SUPPORTED">
            <summary> This function is not currently supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_PARAMETER_QUOTA_EXCEEDED">
            <summary> The upper limit of a resource has been reached. This may
              indicate that a handle limit has been reached. Sometimes this is an
              indication that handles are being leaked. These resources can be read
              with the NmGetApiConfiguration function and set with the NmApiInitialize
              function. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_RESOURCE_NOT_AVAILABLE">
            <summary> The field is a container, so the content is not
              available. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_API_VERSION_MISMATCHED">
            <summary> The version of the DLL does not match the version with which
              this executable was compiled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FILE_TOO_LARGE">
            <summary> The file size of the capture specified by the capture function
              exceeds the current limit, 500 MB. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FILE_TOO_SMALL">
            <summary> The file size of the capture specified by the capture function
              is too small to contain any useful frame information. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary> The frame size overlaps with the next frame. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary> The offset in the frame table points past the bounds of
              the file. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_FRAME_TOO_BIG_FOR_FILE">
            <summary> The file that you are saving to does not have enough space to
              hold the frame. This can occur when there is not enough disk space or
              if the file is over the 500 MB size limit. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_INVALID_NETMON_CAP_FILE">
            <summary> The file type is not a valid Network Monitor 3 capture
              file. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNSUPPORTED_FILE_TYPE">
            <summary> The file type is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNSUPPORTED_PCAP_DLT">
            <summary> The PCAP data link type is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_WRONG_ENDIAN">
            <summary> The data is big-endian, but only little-endian data is
              supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_WRONG_PCAP_VERSION">
            <summary> The file is not a supported PCAP version. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_CHANGED_MODE">
            <summary> Indicates an issue between the application and the
              API. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_UNEXPECTED">
            <summary> Unexpected WiFI Sniffer error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_SNIFF_ADAPTER_NOT_FOUND">
            <summary> No one supported adapter was found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_BASE">
            <summary> The base WiFi Direct error code. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_RADIO_NOT_AVAILABLE">
            <summary> The WiFi Direct radio was not available. This error occurs when
              the WiFi Direct radio has been turned off. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_RESOURCE_IN_USE">
            <summary> The operation cannot be serviced because the necessary resources
              are currently in use. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_UNKNOWN">
            <summary> Unknown or unexpected WiFi Direct error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_NOT_SUPPORTED">
            <summary> WiFi Direct features are not supported. For WiFi Direct features
              Windows 10 is required. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_BASE">
            <summary> The base error code for all WiFi Direct pairing
              errors. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_NOT_READY">
            <summary> The device is not in a state where it can be paired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_NOT_PAIRED">
            <summary> The device is not currently paired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_ALREADY_PAIRED">
            <summary> The device has already been paired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_REJECTED">
            <summary> The device rejected the connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_TOO_MANY_CONNECTTIONS">
            <summary> The device indicated it cannot accept any more incoming
              connections. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_HARDWARE_FAILURE">
            <summary> The device indicated there was a hardware failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_TIMEOUT">
            <summary> The authentication process timed out before it could
              complete. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_NOT_ALLOWED">
            <summary> The authentication protocol is not supported, so the device is
              not paired. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_FAILURE">
            <summary> Authentication failed, so the device is not paired. Either the
              device or the application rejected the authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_NO_PROFILES">
            <summary> There are no network profiles for this device to use. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_PROTECTION_LEVEL">
            <summary> The minimum level of protection is not supported by the device
              or the application. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_ACCESS_DENIED">
            <summary> Your application does not have the appropriate permissions level
              to pair the device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_INVALID_CEREMONY">
            <summary> The ceremony data was incorrect. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_CANCELLED">
            <summary> The pairing action was canceled before completion. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_IN_PROGRESS">
            <summary> The device is already attempting to pair or unpair. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_HANDLER_NOT_REGISTERED">
            <summary> Either the event handler wasn't registered or a required
              <c>TwclWiFiDirectPairingKinds</c> was not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_REJECTED_BY_HANDLER">
            <summary> The application handler rejected the pairing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_HAS_ASSOCCIATION">
            <summary> The remove device already has an association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_PAIR_UNKNOW">
            <summary> An unknown or unexpected failure occurred. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_BASE">
            <summary> The base error code for WiFi Direct device errors. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CONNECTED">
            <summary> The WiFi Direct device is connected or connecting. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_DISCONNECTED">
            <summary> The WiFi Direct device is disconnected or
              disconnecting. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_TERMINATION_EVENT_FAILED">
            <summary> Unable to create WiFi Direct device's thread termination
              event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_START_THREAD_FAILED">
            <summary> Unable to start WiFi Direct device connection thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_INFORMATION_FAILED">
            <summary> Unable to create device information object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_QUERY_ASYNC_INFO_FAILED">
            <summary> IAsyncInfor interface not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_INFORMATION_FAILED">
            <summary> Unable to get device information object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_EXTENDED_INFO_NOT_SUPPORTED">
            <summary> Extended device information not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_PAIRING_NOT_SUPPORTED">
            <summary> WiFi Direct device does not support pairing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CUSTOM_PAIRING_NOT_SUPPORTED">
            <summary> WiFi Direct device does not support custom pairing. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_NAME_FAILED">
            <summary> Unable to get WiFi Direct device's name. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_PAIRING_SYNC_EVENT_FAILED">
            <summary> Unable to create WiFi Direct device pairing notification
              synchronization event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CONNECTION_TERMINATED_BT_USER">
            <summary> Connection has been terminated by user. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WAIT_FAILED">
            <summary> Wait for notification message processing failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_PAIRING_MUTEX_FAILED">
            <summary> Unable to create pairing synchronization mutex. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_SET_GO_FAILED">
            <summary> Unable to set Group Owner Intent. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_CONNECTION_PARAMETERS_FAILED">
            <summary> Unable to get connection parameters. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_SET_PAIRING_PROCEDURE_FAILED">
            <summary> Unable to set preferred pairing procedure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_CUSTOM_PAIRING_FILED">
            <summary> Unable to get custom pairing interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_SET_PAIRING_EVENT_HANDLER_FAILED">
            <summary> Unable to set pairing event handler. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_PAIRING_SETTINGS_FILED">
            <summary> Unable to get pairing settings. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_START_PAIRING_FAILED">
            <summary> Unable to start pairing with remote WiFi Direct
              device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_PAIRING_RESULT_FAILED">
            <summary> Unable to get pairing result. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_PAIRING_FAILED">
            <summary> Unable to pair with remote device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_FAILED">
            <summary> Unable to create WiFi Direct device object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_GET_RESULT_FAILED">
            <summary> Unable to get WiFi Direct device creation operation
              result. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_OBJECT_NOT_CREATED">
            <summary> WiFi Direct device object was not created. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_SET_DISCONNECT_EVENT_HANDLER_FAILED">
            <summary> Unable to set disconnection event handler. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_ENDPOINTS_FAILED">
            <summary> Unable to get connection endpoint pairs. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_ENDPOINTS_COUNT_FAILED">
            <summary> Unable to get connection endpoints count. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_ENDPOINTS_NOT_FOUND">
            <summary> No connection endpoints were found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_ENDPOINT_PAIR_FILED">
            <summary> Unable to get default (first) connection endpoint
              pair. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_HOST_NAME_FAILED">
            <summary> Unable to get IHostName interface for the connection
              endpoint pair. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_CANONICAL_NAME_FAILED">
            <summary> Unable to convert Host Name to IP address. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_GET_PAIRED_FAILED">
            <summary> Unable to get WiFi Direct device's pairing status. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_START_UNPAIR_FAILED">
            <summary> Unable to start unpairing operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_CREATE_TIMEOUT">
            <summary> Timeout during creating WiFi Direct device object. Usually it
              appears when device has wrong DHCP configuration or uses static IP. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_START_CREATE_FAILED">
            <summary> Unable to start WiFi Direct device object creating procedure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_BASE">
            <summary> The base error code for WiFi Direct Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_START_ABORTED">
            <summary> The publisher is aborted due to error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_GET_ADVERTISEMENT">
            <summary> Unable to get the WiFi Direct Advertisement object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_GO">
            <summary> Unable to set an Autonomous  Group Owner state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_SET_DISCOVERABILITY_FAILED">
            <summary> Unable to set Listen State Discoverability. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_GET_LEGACY_SETTINGS">
            <summary> Unable to access the WiFi Direct Advertiser Legacy mode
              settings. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_CHANGE_LEGACY_MODE">
            <summary> Unable to change the Legacy mode setting of the WiFi Direct
              Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_SSID">
            <summary> Unable to set SSID for the WiFi Direct Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_GET_CREDENTIAL">
            <summary> Unable to access Legacy mode security settings of the WiFi
              Direct Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_PASSPHRASE">
            <summary> Unable to set the WiFi Direct Advertiser's Legacy mode
              pass phrase. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_CREATE_ASYNC_EVENT">
            <summary> Unable to create start synchronization event for the WiFi Direct
              Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_PUBLISHER_EVENT">
            <summary> Unable to set event handler for WiFi Direct
              Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_START_PUBLISHER">
            <summary> Filed to start WiFi Direct Advertiser. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_LISTENER_HANDLER">
            <summary> Unable to set event handler for WiFi Direct Advertiser
              connection listening. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_ACTIVE">
            <summary> A WiFi Direct Advertiser is already running. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_CREATE_THREAD_EVENT">
            <summary> Unable to create WiFi Direct Advertiser working thread
              initialization event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_CREATE_WORKING_THREAD">
            <summary> Unable to start WiFi Direct Advertiser working
              thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_NOT_ACTIVE">
            <summary> WiFi Direct Advertiser is not running. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_UNABLE_SET_OPEN_AUTH_MODE">
            <summary> Unable to create legacy Soft AP with Open Authentication (Open Network). </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_ALREADY_RUNNING">
            <summary> WiFi Direct Advertiser is already running by other WiFi Framework based application. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_CREATE_MUTEX_FAILED">
            <summary> Unable to create global mutex object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_ADVERTISER_HOTSPOT_RUNNING">
            <summary> Mobile HotSpot is already running on PC. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_BASE">
            <summary> The base error code for WiFi Direct Device Watcher. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_ACTIVE">
            <summary> The WiFi Direct Device Watcher is already running. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_EVENT_FAILED">
            <summary> Unable to create WiFi Direct Device Watcher thread
              synchronization event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_THREAD_FAILED">
            <summary> Unable to start WiFi Direct Device Watcher worker thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_NOT_ACTIVE">
            <summary> The WiFi Direct Device Watcher is not running. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_DEVICE_STATICS_FAILED">
            <summary> Unable to create WiFi Direct Device activation
              factory. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_DEVICE_STATICS2_FAILED">
            <summary> IWiFiDirectDeviceStatics2 interface is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_GET_DEVICE_SELECTOR_FAILED">
            <summary> Unable to get Device Selector. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_DEVICE_INFORMATION_FAILED">
            <summary> Unable to create Device Information Activation
              Factory. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_FAILED">
            <summary> Unable to create Device Watcher object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_SET_ADDED_EVENT_FAILED">
            <summary> Unable to set device added event handler. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_SET_COMPLETED_EVENT_FAILED">
            <summary> Unable to set discovering completed event handler. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_START_FAILED">
            <summary> Unable to start WiFi Direct Device Watcher. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_NOTIFICATION_EVENT_FAILED">
            <summary> Unable to create discovering completed notification
              event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_DISCOVERING_TERMINATED">
            <summary> Discovering terminated by user. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_UNEXPECTED">
            <summary> Unexpected or unknown error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_CREATE_INIT_EVENT_FAILED">
            <summary> Unable to create WiFi Direct Device Watcher thread
              initialization event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_SET_STOPPED_EVENT_FAILED">
            <summary> Unable to set device watcher stopped event handler. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_START_GET_PAIRED_THREAD_FAILED">
            <summary> Unable to start working thread to read remote WiFi Direct device's paired status. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_START_UNPAIR_THREAD_FAILED">
            <summary> Unable to start WiFi Direct device unpairing thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_START_NAME_RESOLVING_THREAD_FAILED">
            <summary> Unable to start WiFi Direct device name resolving thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_START_ENUM_PAIRED_DEVICES_THREAD_FAILED">
            <summary> Unable to start paired WiFi Direct devices enumeration thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_ENUMERATE_DEVICES_FAILED">
            <summary> Unable to enumerate available devices. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_QUERY_ASYNC_INFO_FAILED">
            <summary> IAsyncInfor interface not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_DIRECT_DEVICE_WATCHER_GET_ENUM_RESULT_FAILED">
            <summary> Get devices enumeration result failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_BASE">
            <summary> The base error code for WiFi interface operations. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_NOT_CONNECTED">
            <summary> A WiFi interface is not connected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_OPEN_IP_SETTINGS_FAILED">
            <summary> Unable to access the IP settings of an WiFi interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_READ_IP_FAILED">
            <summary> Unable to read TCP/IP settings of an WiFi interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_SET_IP_FAILED">
            <summary> Unable to change IP settings for a WiFi interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_INVALID_IP">
            <summary> IP address is not valid. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_ADMIN_RIGHTS_REQUIRED">
            <summary> Administrative rights required for this operation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_IP_NOT_CONFIGURED">
            <summary> The TCP/IP settings for the given WLAN interface was not
              configured. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_INTERFACE_VIRTUAL_ADAPTER_NOT_FOUND">
            <summary> The network interface for the given virtual adapter was not
              found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_BASE">
            <summary> The base error code for Network Configuration operations. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_PREPARE_FAILED">
            <summary> Unable to prepare Network Configuration API. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_CREATE_FAILED">
            <summary> Network Configuration API create failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_LOCK_CREATE_FAILED">
            <summary> Network Configuration API lock create failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_LOCK_FAILED">
            <summary> Network Configuration API lock failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_INIT_FAILED">
            <summary> Network Configuration API initialization failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_ENUM_INTERFACES_FAILED">
            <summary> Unable to enumerate network interfaces. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_INTERFACE_NOT_FOUND">
            <summary> Interface was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_PROTOCOL_NOT_FOUND">
            <summary> TCP/IP protocol was not found for the given WiFi interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_SWITCH_PROTOCOL_FAILED">
            <summary> Unable to switch protocol state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_APPLY_CHANGES_FAILED">
            <summary> Unable to apply changes in network configuration. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_NETCFG_START_THREAD_FAILED">
            <summary> Start protocol changes thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_BASE">
            <summary> The base error code for Mobile HotSpot operations. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_ACTIVE">
            <summary> A Mobile HotSpot has already been opened. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_NOT_ACTIVE">
            <summary> A Mobile HotSpot is closed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CLOSED">
            <summary> A Mobile HotSpot has already been closed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CREATE_INIT_EVENT_FAILED">
            <summary> Unable to create initialization event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CREATE_TERM_EVENT_FAILED">
            <summary> Unable to create termination event. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_START_THREAD_FAILED">
            <summary> Unable to create and start working thread. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CREATE_NET_INFO_FAILED">
            <summary> Unable to create Network Information object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_PROFILE_FAILED">
            <summary> Unable to get Internet connection profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_PROFILE_NOT_FOUND">
            <summary> Internet connection profile was not found. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CREATE_MANAGER_FACTORY_FAILED">
            <summary> Unable to create Mobile HotSpot Manager activation factory
              object. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CREATE_MANAGER_FAILED">
            <summary> Unable to create Mobile HotSpot Manager. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_STATE_FAILED">
            <summary> Unable to get Mobile HotSpot state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_STARTED">
            <summary> Mobile HotSpot is already started. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_START_FAILED">
            <summary> Unable to start Mobile HotSpot. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_QUERY_ASYNC_INFO_FAILED">
            <summary> IAsyncInfor interface not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_OPERATION_RESULT_FAILED">
            <summary> Unable to get operation result. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_OPERATION_STATUS_FAILED">
            <summary> Get operation status failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_MOBILE_DEVICE_OFF">
            <summary> The operation could not begin because the mobile broadband
              device is turned off. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_WIFI_DEVICE_OFF">
            <summary> The operation could not begin because the WiFi device is turned off. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CHECK_TIMEOUT">
            <summary> The operation did not complete because the mobile operator could
              not be contacted to confirm tethering capabilities are provided for
              this account. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CHECK_FAILURE">
            <summary> The operation did not complete because the account does not
              currently support tethering operations. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_OPERATION_IN_PROGRESS">
            <summary> The operation is still in progress. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_BLUETOOTH_DEVICE_OFF">
            <summary> The operation could not begin because Bluetooth or a required
              Bluetooth device is turned off. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_NETWORK_LIMITATION">
            <summary> The operation did not complete because of limited network connectivity. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_UNKNOWN">
            <summary> Unknown or undefined operation result. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_STOPPED">
            <summary> The Mobile HotSpot is topped. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_WIFI_HARDWARE_NOT_FOUND">
            <summary> WiFi hardware is turned off or not available. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_CONFIG_FAILED">
            <summary> Get access point configuration failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_SSID_FAILED">
            <summary> Unable to get current SSID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_SET_SSID_FAILED">
            <summary> Unable to set new SSID. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_SET_CONFIG_FAILED">
            <summary> Unable to save new AP config. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_PASSPHRASE_FAILED">
            <summary> Unable to get current passphrase. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_SET_PASSPHRASE_FAILED">
            <summary> Unable to set new passphrase. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_MAX_CLIENTS_FAILED">
            <summary> Unable to get maximum client connections count. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_CLIENTS_COUNT_FAILED">
            <summary> Unable to get connected clients count. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_CLIENTS_FAILED">
            <summary> Unable to get connected clients list. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_CLIENTS_LIST_SIZE_FAILED">
            <summary> Unable to get connected clients list size. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_BAND_NOT_SUPPORTED">
            <summary> Specified band is not supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_SET_BAND_FAILED">
            <summary> Unable to change band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_CHANGE_NO_CONNECTION_TIMEOUT_FAILED">
            <summary> Unable to change No Connection Timeout state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiErrors.WCL_E_WIFI_HOTSPOT_GET_NO_CONNECTION_TIMEOUT_FAILED">
            <summary> Get Not Connection Timeout state failed. </summary>
        </member>
        <member name="T:wclWiFi.wclEWiFi">
            <summary> The base exception class for all WiFi exceptions. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclWiFi.wclEWiFi.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclWiFi.wclEWiFiSniffer">
            <summary> The WiFi Sniffer exceptions. </summary>
            <seealso cref="T:wclWiFi.wclEWiFi" />
        </member>
        <member name="M:wclWiFi.wclEWiFiSniffer.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclWiFi.wclWiFiEvents">
            <summary> The <c>wclWiFiEvents</c> component provides access to the
              Wireless LAN notifications. </summary>
            <seealso cref="T:wclWiFi.wclCustomWiFiComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.InternalClose">
            <summary> Executes additional finalization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.InternalOpen">
            <summary> Executes additional initialization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmAdHocNetworkStateChange(System.Guid,wclWiFi.wclWiFiAdHocNetworkState)">
            <summary> Fires the <c>OnAcmAdHocNetworkStateChange</c>
              event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> The new adhoc network state. </param>
            <seealso cref="T:wclWiFi.wclWiFiAdHocNetworkState" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmAutoconfDisabled(System.Guid)">
            <summary> Fires the <c>OnAcmAutoconfDisabled</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmAutoconfEnabled(System.Guid)">
            <summary> Fires the <c>OnAcmAutoconfEnabled</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmBackgroundScanDisabled(System.Guid)">
            <summary> Fires the <c>OnAcmBackgroundScanDisabled</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmBackgroundScanEnabled(System.Guid)">
            <summary> Fires the <c>OnAcmBackgroundScanEnabled</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmBssTypeChange(System.Guid,wclWiFi.wclWiFiBssType)">
            <summary> Fires the <c>OnAcmBssTypeChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="BssType"> The new basic service set (BSS) type. </param>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmConnectionAttemptFail(System.Guid,wclWiFi.wclWiFiAcmConnectionEventData)">
            <summary> Fires the <c>OnAcmConnectionAttemptFail</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <remarks> A connection consists of one or more connection attempts. An
              application may receive zero or more <c>OnAcmConnectionAttemptFail</c>
              events between receiving the <c>OnAcmConnectionStart</c> event and the
              <c>OnAcmConnectionComplete</c> event. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmConnectionComplete(System.Guid,wclWiFi.wclWiFiAcmConnectionEventData)">
            <summary> Fires the <c>OnAcmConnectionComplete</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <remarks> The connection succeeded if the <c>Reason</c> field of the
              <c>Data</c> parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise,
              the connection has failed. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmConnectionStart(System.Guid,wclWiFi.wclWiFiAcmConnectionEventData)">
            <summary> Fires the <c>OnAcmConnectionStart</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmDisconnected(System.Guid,wclWiFi.wclWiFiAcmConnectionEventData)">
            <summary> Fires the <c>OnAcmDisconnected</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmDisconnecting(System.Guid,wclWiFi.wclWiFiAcmConnectionEventData)">
            <summary> Fires the <c>OnAcmDisconnecting</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmFilterListChange(System.Guid)">
            <summary> Fires the <c>OnAcmFilterListChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmInterfaceArrival(System.Guid)">
            <summary> Fires the <c>OnAcmInterfaceArrival</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmInterfaceRemoval(System.Guid)">
            <summary> Fires the <c>OnAcmInterfaceRemoval</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmNetworkAvailable(System.Guid)">
            <summary> Fires the <c>OnAcmNetworkAvailable</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmNetworkNotAvailable(System.Guid)">
            <summary> Fires the <c>OnAcmNetworkNotAvailable</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmOperationalStateChange(System.Guid)">
            <summary> Fires the <c>OnAcmOperationalStateChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmPowerSettingChange(System.Guid,wclWiFi.wclWiFiPowerSetting)">
            <summary> Fires the <c>OnAcmPowerSettingChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Setting"> The new power setting of an interface. </param>
            <seealso cref="T:wclWiFi.wclWiFiPowerSetting" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmProfileBlocked(System.Guid)">
            <summary> Fires the <c>OnAcmProfileBlocked</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmProfileChange(System.Guid)">
            <summary> Fires the <c>OnAcmProfileChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmProfileNameChange(System.Guid,System.String,System.String)">
            <summary> Fires then <c>OnAcmProfileNameChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldName"> The old profile name. </param>
            <param name="NewName"> The new profile name. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmProfilesExhausted(System.Guid)">
            <summary> Fires the <c>OnAcmProfilesExhausted</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmProfileUnblocked(System.Guid)">
            <summary> Fires the <c>OnAcmProfileUnblocked</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmScanComplete(System.Guid)">
            <summary> Fires the <c>OnAcmScanComplete</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmScanFail(System.Guid,System.Int32)">
            <summary> Fires the <c>OnAcmScanFail</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Reason"> The reason the WLAN operation failed. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmScanListRefresh(System.Guid)">
            <summary> Fires the <c>OnAcmScanListRefresh</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoAcmScreenPowerChange(System.Guid,System.Boolean)">
            <summary> Fires the <c>OnAcmScreenPowerChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="SwitchedOn"> The value of the screen power change. When
              this value is <c>True</c>, the screen changed to on. When this value
              is <c>False</c>, the screen changed to off. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoHostedNetworkPeerStateChange(System.Guid,wclWiFi.wclWiFiHostedNetworkPeerState,wclWiFi.wclWiFiHostedNetworkPeerState,System.Int32)">
            <summary> Fires the <c>OnHostednetworkPeerStateChange</c>
              event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldState"> The previous network state for a data peer on
              the wireless Hosted Network. </param>
            <param name="NewState"> The current network state for a data peer on the
              wireless Hosted Network. </param>
            <param name="Reason"> The reason for the network state change for the
              data peer. </param>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkPeerState" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoHostedNetworkRadioStateChange(System.Guid,wclWiFi.wclWiFiRadioState,wclWiFi.wclWiFiRadioState)">
            <summary> Fires the <c>OnHostedNetworkRadioStateChange</c>
              event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="SoftwareState"> The software radio state of the wireless
              Hosted Network. </param>
            <param name="HardwareState"> The hardware radio state of the wireless
              Hosted Network. </param>
            <seealso cref="T:wclWiFi.wclWiFiRadioState" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoHostedNetworkStateChange(System.Guid,wclWiFi.wclWiFiHostedNetworkState,wclWiFi.wclWiFiHostedNetworkState,System.Int32)">
            <summary> Fires the <c>OnHostedNetworkStateChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldState"> The previous network state on the wireless
              Hosted Network. </param>
            <param name="NewState"> The current network state on the wireless
              Hosted Network. </param>
            <param name="Reason"> The reason for the network state change. </param>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkState" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmAdapterOperationModeChange(System.Guid,wclWiFi.wclWiFiOperationMode)">
            <summary> Fires the <c>OnMsmAdapterOperationModeChange</c>
              event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Mode"> The new operation mode. </param>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmAdapterRemoval(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmAdapterRemoval</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmAssociated(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmAssociated</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmAssociating(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmAssociating</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmAuthenticating(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the "OnMsmAuthenticating" event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. Refer to
              <see cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmConnected(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmConnected</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmDisassociating(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmDisassociating</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmDisconnected(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmDisconnected</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmLinkDegraded(System.Guid)">
            <summary> Fires the <c>OnMsmLinkDegraded</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmLinkImproved(System.Guid)">
            <summary> Fires the <c>OnMsmLinkImproved</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmPeerJoin(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmPeerJoin</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmPeerLeave(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmPeerLeave</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmRadioStateChange(System.Guid,wclWiFi.wclWiFiPhyRadioState)">
            <summary> Fires the <c>OnMsmRadioStateChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> The new radio state. </param>
            <seealso cref="T:wclWiFi.wclWiFiPhyRadioState" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmRoamingEnd(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmRoamingEnd</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmRoamingStart(System.Guid,wclWiFi.wclWiFiMsmConnectionEventData)">
            <summary> Fires the <c>OnMsmRoamingStart</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> The connection-related information. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoMsmSignalQualityChange(System.Guid,System.UInt32)">
            <summary> Fires when <c>OnMsmSignalQualityChange</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Quality"> The new signal quality. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoOneXAuthRestarted(System.Guid,System.Int32)">
            <summary> Fires the <c>OnOneXAuthRestarted</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Reason"> The reason that 802.1X authentication was
              restarted. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoOneXAuthUpdate(System.Guid,wclWiFi.wclWiFiOneXStatusUpdate)">
            <summary> Fires the <c>OnOneXAuthUpdate</c> event. </summary>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> Contains information on a status change to 802.1X
              authentication. </param>
            <seealso cref="T:wclWiFi.wclWiFiOneXStatusUpdate" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.DoIpChanged(System.Guid,wclWiFi.wclWiFiIpSettings,wclWiFi.wclWiFiIpSettings)">
            <summary> Fires the <c>OnIpChanged</c> event. </summary>
            <param name="IfaceId"> The WLAN interface ID. </param>
            <param name="Old"> The old IP settings. </param>
            <param name="New"> The new IP settings. </param>
            <seealso cref="T:wclWiFi.wclWiFiIpSettings" />
        </member>
        <member name="M:wclWiFi.wclWiFiEvents.#ctor">
            <summary> Creates a new <c>wclWiFiEvents</c> component. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmAdHocNetworkStateChange">
            <summary> The event fires when a state change has occurred for an
              adhoc network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmAdHocNetworkStateChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmAutoconfDisabled">
            <summary> The event fires when autoconfiguration is disabled on the
              auto configuration module (ACM). </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmAutoconfEnabled">
            <summary> The event fires when autoconfiguration is enabled on the
              auto configuration module (ACM). </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmBackgroundScanDisabled">
            <summary> The event fires when background scans are disabled on the
              auto configuration module (ACM). </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmBackgroundScanEnabled">
            <summary> The event fires when background scans are enabled on the
              auto configuration module (ACM). </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmBssTypeChange">
            <summary> The event fires when the BSS type for an interface
              has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmBssTypeChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmConnectionAttemptFail">
            <summary> The event fires when a connection attempt has
              failed. </summary>
            <remarks> A connection consists of one or more connection attempts. An
              application may receive zero or more <c>OnAcmConnectionAttemptFail</c>
              events between receiving the <c>OnAcmConnectionStart</c> event and the
              <c>OnAcmConnectionComplete</c> event. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmConnectionComplete">
            <summary> The event fires when a connection has completed. </summary>
            <remarks> The connection succeeded if the <c>Reason</c> field of the
              <c>Data</c> parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise,
              the connection has failed. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmConnectionStart">
            <summary> The event fires when a connection has started to a network
              in range. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmDisconnected">
            <summary> The event fires when the wireless service has disconnected
              from a connectable network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmDisconnecting">
            <summary> The event fires when the wireless service is disconnecting
              from a connectable network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmFilterListChange">
            <summary> The event fires when a change in the filter list has occurred,
              either through group policy or a call to the WiFI
              functions. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmInterfaceArrival">
            <summary> The event fires when a wireless LAN interface is been added
              to or enabled on the local computer. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmInterfaceRemoval">
            <summary> The event fires when a wireless LAN interface has been
              removed or disabled on the local computer. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmNetworkAvailable">
            <summary> The event fires when the wireless service found a connectable
              network after a scan, the interface was in the disconnected state,
              and there is no compatible auto-connect profile that the wireless
              service can use to connect. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmNetworkNotAvailable">
            <summary> The event fires when the wireless service cannot find any
              connectable network after a scan. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmOperationalStateChange">
            <summary> The event fires when the operational state has
              changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmPowerSettingChange">
            <summary> The event fires when the power setting for an interface
              has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmPowerSettingChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmProfileBlocked">
            <summary> The event fires when a profile has been bloacked. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmProfileChange">
            <summary> The event fires when a change in a profile or the profile
              list has occurred, either through group policy or by calls to Native
              Wifi functions. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmProfileNameChange">
            <summary> The event fires when a profile name has changed, either
              through group policy or by calls to Native Wifi
              functions. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmProfileNameChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmProfilesExhausted">
            <summary> The event fires when all profiles were exhausted in an
              attempt to autoconnect. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmProfileUnblocked">
            <summary> The event fires when a profile has been unbloacked. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmScanComplete">
            <summary> The event fires when a scan for networks has
              completed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmScanFail">
            <summary> The event fires when a scan for connectable networks
              failed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmScanFailEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmScanListRefresh">
            <summary> The event fires when a scan list has been
              refreshed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnAcmScreenPowerChange">
            <summary> The event fires when rhe screen power has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAcmScreenPowerChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnHostedNetworkPeerStateChange">
            <summary> The event fires when the wireless Hosted Network peer state
              has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkPeerStateChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnHostedNetworkRadioStateChange">
            <summary> The event fires when the wireless Hosted Network radio state
              has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkRadioStateChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnHostedNetworkStateChange">
            <summary> The event fires when the wireless Hosted Network state has
              changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkStateChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmAdapterOperationModeChange">
            <summary> The event fires when the operation mode of the wireless
              device has changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmAdapterOperationModeChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmAdapterRemoval">
            <summary> The event fires when a wireless adapter has been removed from
              the local computer. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmAssociated">
            <summary> The event fires when the wireless device has associated
              with an access point or a peer station. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmAssociating">
            <summary> The event fires when a wireless device is in the process of
              associating with an access point or a peer station. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmAuthenticating">
            <summary> The event fires when the wireless device is in the process
              of authenticating. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmConnected">
            <summary> The event fires when the wireless device is associated with
              an access point or a peer station, keys have been exchanged, and
              the wireless device is available to send data. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmDisassociating">
            <summary> The event fires when a wireless device is in the process of
              disassociating from an access point or a peer station. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmDisconnected">
            <summary> The event fires when the wireless device is not associated
              with an access point or a peer station. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmLinkDegraded">
            <summary> The event fires when the link was degraded. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmLinkImproved">
            <summary> The event fires when the link was improved. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmPeerJoin">
            <summary> The event fires when a peer has joined an adhoc
              network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmPeerLeave">
            <summary> The event fires when a peer has left an adhoc
              network. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmRadioStateChange">
            <summary> The event fires when the radio state for an adapter has
              changed. Each physical layer (PHY) has its own radio state. The
              radio for an adapter is switched off when the radio state
              of every PHY is off. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmRadioStateChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmRoamingEnd">
            <summary> The event fires when the wireless device was connected to
              an access point and has completed roaming to another access
              point. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmRoamingStart">
            <summary> The event fires when the wireless device is connected to an
              access point and has initiated roaming to another access
              point. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnMsmSignalQualityChange">
            <summary> The event fires when a signal quality change for the
              currently associated access point or peer station. </summary>
            <seealso cref="T:wclWiFi.wclWiFiMsmSignalQualityChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnOneXAuthRestarted">
            <summary> The event fires when the 802.1X authentication process
              was restarted. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXAuthRestartedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnOneXAuthUpdate">
            <summary> The event fires when the 802.1X authentication status hsa
              been updated. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXAuthUpdateEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiEvents.OnIpChanged">
            <summary> The event fires when IP settings has been changed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiIpChangedEvent" />
        </member>
        <member name="T:wclWiFi.wclWiFiAcmAdHocNetworkStateChangeEvent">
            <summary> The <c>OnAcmAdHocNetworkStateChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> The new adhoc network state. </param>
            <seealso cref="T:wclWiFi.wclWiFiAdHocNetworkState" />
        </member>
        <member name="T:wclWiFi.wclWiFiAcmBssTypeChangeEvent">
            <summary> The <c>OnAcmBssTypeChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="BssType"> The new basic service set (BSS) type. </param>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="T:wclWiFi.wclWiFiAcmConnectionEvent">
            <summary> The event handler prototype for ACM connection related
              events </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <seealso cref="T:wclWiFi.wclWiFiAcmConnectionEventData" />
        </member>
        <member name="T:wclWiFi.wclWiFiAcmPowerSettingChangeEvent">
            <summary> The <c>OnAcmPowerSettingChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Setting"> The new power setting of an interface. </param>
            <seealso cref="T:wclWiFi.wclWiFiPowerSetting" />
        </member>
        <member name="T:wclWiFi.wclWiFiAcmProfileNameChangeEvent">
            <summary> The <c>OnAcmProfileNameChange</c> event handler
              ptototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldName"> The old profile name. </param>
            <param name="NewName"> The new profile name. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiAcmScanFailEvent">
            <summary> The <c>OnAcmScanFail</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Reason"> The reason the WLAN operation failed. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiAcmScreenPowerChangeEvent">
            <summary> The <c>OnAcmScreenPowerChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="SwitchedOn"> The value of the screen power change. When this
              value is <c>True</c>, the screen changed to on. When this value is
              <c>False</c>, the screen changed to off. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkPeerStateChangeEvent">
            <summary> The <c>OnHostednetworkPeerStateChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldState"> The previous network state for a data peer on
              the wireless Hosted Network. </param>
            <param name="NewState"> The current network state for a data peer on the
              wireless Hosted Network. </param>
            <param name="Reason"> The reason for the network state change for the data
              peer. </param>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkPeerState" />
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkRadioStateChangeEvent">
            <summary> The <c>OnHostedNetworkRadioStateChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="SoftwareState"> The software radio state of the wireless
              Hosted Network. </param>
            <param name="HardwareState"> The hardware radio state of the wireless
              Hosted Network. </param>
            <seealso cref="T:wclWiFi.wclWiFiRadioState" />
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkStateChangeEvent">
            <summary> The <c>OnHostedNetworkStateChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="OldState"> The previous network state on the wireless
              Hosted Network. </param>
            <param name="NewState"> The current network state on the wireless
              Hosted Network. </param>
            <param name="Reason"> The reason for the network state change. </param>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkState" />
        </member>
        <member name="T:wclWiFi.wclWiFiMsmAdapterOperationModeChangeEvent">
            <summary> The <c>OnMsmAdapterOperationModeChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Mode"> The new operation mode. </param>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="T:wclWiFi.wclWiFiMsmConnectionEvent">
            <summary> The event handler prototype for MSM connection related
              events </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Data"> Contains information about connection related
              event. </param>
            <seealso cref="T:wclWiFi.wclWiFiMsmConnectionEventData" />
        </member>
        <member name="T:wclWiFi.wclWiFiMsmRadioStateChangeEvent">
            <summary> The <c>OnMsmRadioStateChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> The new radio state. </param>
            <seealso cref="T:wclWiFi.wclWiFiPhyRadioState" />
        </member>
        <member name="T:wclWiFi.wclWiFiMsmSignalQualityChangeEvent">
            <summary> The <c>OnMsmSignalQualityChange</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Quality"> The new signal quality. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXAuthRestartedEvent">
            <summary> The <c>OnOneXAuthRestarted</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="Reason"> The reason that 802.1X authentication was
              restarted. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXAuthUpdateEvent">
            <summary> The <c>OnOneXAuthUpdate</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
            <param name="State"> Contains information on a status change to 802.1X
              authentication. </param>
            <seealso cref="T:wclWiFi.wclWiFiOneXStatusUpdate" />
        </member>
        <member name="T:wclWiFi.wclWiFiIpChangedEvent">
            <summary> The <c>OnIpChanged</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The WLAN interface ID. </param>
            <param name="Old"> The old IP settings. </param>
            <param name="New"> The new IP settings. </param>
            <seealso cref="T:wclWiFi.wclWiFiIpSettings" />
        </member>
        <member name="T:wclWiFi.wclWiFiEvent">
            <summary> The very basic WiFi event handler prototype. This
              type used in lot of events of the WiFi components. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="IfaceId"> The interface's ID on which the event
              is for. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiAdHocNetworkState">
            <summary> The connection state of an ad hoc network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAdHocNetworkState.asFormed">
            <summary> The ad hoc network has been formed, but no client or
              host is connected to the network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAdHocNetworkState.asConnected">
            <summary> A client or host is connected to the ad hoc
              network. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiBssType">
            <summary> Defines a basic service set (BSS) network type.. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssType.bssInfrastructure">
            <summary> Specifies an infrastructure BSS network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssType.bssIndependent">
            <summary> Specifies an independent BSS (IBSS) network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBssType.bssAny">
            <summary> Specifies either infrastructure or IBSS network. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiConnectionMode">
            <summary> Defines the mode of connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmProfile">
            <summary> A profile will be used to make the connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmTemporaryProfile">
            <summary> A temporary profile will be used to make the
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmDiscoverySecure">
            <summary> Secure discovery will be used to make the
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmDiscoveryUnsecure">
            <summary> Unsecure discovery will be used to make the
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmAuto">
            <summary> The connection is initiated by the wireless service
              automatically using a persistent profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionMode.cmInvalid">
            <summary> The connection mode is invalid or unsupported. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiConnectionFlag">
            <summary> The flags that provide additional information for the network
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionFlag.cfAdHocNetworkFormed">
            <summary> Indicates that an adhoc network is formed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionFlag.cfConsoleUserProfile">
            <summary> Indicates that the connection uses a per-user profile owned
              by the console user. Non-console users will not be able to see the
              profile in their profile list. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiPowerSetting">
            <summary> The WiFi power saving modes. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPowerSetting.psNo">
            <summary> Specifies no power-saving activity performed by the 802.11
              station. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPowerSetting.psLow">
            <summary> Specifies a power save polling (PSP) mode that uses the
              fastest power-saving mode. This power mode must provide the best
              combination of network performance and power usage. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPowerSetting.psMedium">
            <summary> Specifies a PSP mode that uses the maximum (MAX) power saving
              capabilities. The MAX power save mode results in the greatest power
              savings for the radio on the 802.11 station. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPowerSetting.psMaximum">
            <summary> Specifies a proprietary PSP mode implemented by the
              independent hardware vendor (IHV) that exceeds the "psMedium"
              power-saving level. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPowerSetting.psInvalid">
            <summary> The supplied power setting is invalid. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkPeerAuthState">
            <summary> The possible values for the authentication state of a peer on
              the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkPeerAuthState.asInvalid">
            <summary> An invalid peer state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkPeerAuthState.asAuthenticated">
            <summary> The peer is authenticated. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiRadioState">
            <summary> Specifies an 802.11 radio state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiRadioState.rsUnknown">
            <summary> The radio state is unknown. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiRadioState.rsOn">
            <summary> The radio is on. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiRadioState.rsOff">
            <summary> The radio is off. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkState">
            <summary> The network state of the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkState.hnUnavailable">
            <summary> The wireless Hosted Network is unavailable. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkState.hnIdle">
            <summary> The wireless Hosted Network is idle. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkState.hnActive">
            <summary> The wireless Hosted Network is active. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOperationMode">
            <summary> The interface operation modes. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omUnknown">
            <summary> The operation mode is unknown or unsupported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omStation">
            <summary> Specifies the Station (STA) operation mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omAccessPoint">
            <summary> Specifies the Access Point (AP) operation mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omExtensibleStation">
            <summary> Specifies the Extensible Station (ExtSTA) operation
              mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omExtensibleAccessPoint">
            <summary> Specifies the Extensible Access Point (ExtAP) operation
              mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omWiFiDirectDevice">
            <summary> Specifies the WiFiIsBandSupported Direct Device operation mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omWiFiDirectGroupOwner">
            <summary> Specifies the WiFi Direct Group Owner operation
              mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omWiFiDirectClient">
            <summary> Specifies the WiFi Direct Client operation mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omManufacturing">
            <summary> Specifies the manufacturing operation mode. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOperationMode.omNetworkMonitor">
            <summary> Specifies the Network Monitor (NetMon) operation
              mode. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiPhy">
            <summary> Defines an 802.11 PHY and media type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyAny">
            <summary> Any PHY type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyFhss">
            <summary> A frequency-hopping spread-spectrum (FHSS) PHY.
              Bluetooth devices can use FHSS or an adaptation of FHSS. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyDsss">
            <summary> A direct sequence spread spectrum (DSSS) PHY type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyIr">
            <summary> An infrared (IR) baseband PHY type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyOfdm">
            <summary> An orthogonal frequency division multiplexing (OFDM) PHY
              type. 802.11a devices can use OFDM. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyHrDsss">
            <summary> A high-rate DSSS (HRDSSS) PHY type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyErp">
            <summary> An extended rate PHY type (ERP). 802.11g devices can use
              ERP. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyHt">
            <summary> The 802.11n PHY type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyVht">
            <summary> The 802.11ac PHY type. This is the very high throughput PHY
              type specified in IEEE 802.11ac. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhy.phyUnknown">
            <summary> An unknown or uninitialized PHY type. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXAuthStatus">
            <summary> The type specifies the possible values for the 802.1X
              authentication status. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthNotStarted">
            <summary> 802.1X authentication was not started. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthInProgress">
            <summary> 802.1X authentication is in progress. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthNoAuthenticatorFound">
            <summary> No 802.1X authenticator was found. The 802.1X authentication
              was attempted, but no 802.1X peer was found. In this case, either the
              network does not support or is not configured to support the 802.1X
              standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthSuccess">
            <summary> 802.1X authentication was successful. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthFailure">
            <summary> 802.1X authentication was a failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthStatus.oxAuthInvalid">
            <summary> Unknown or invalid status. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXEapMethodBackendSupport">
            <summary> The type specifies the possible values for whether the EAP
              method configured on the supplicant for 802.1X authentication is
              supported on the authentication server. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapMethodBackendSupport.oxEapMethodBackendSupportUnknown">
            <summary> It is not known whether the EAP method configured on the
              supplicant for 802.1X authentication is supported on the
              authentication server. This value can be returned if the 802.1X
              authentication process is in the initial state. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapMethodBackendSupport.oxEapMethodBackendSupported">
            <summary> The EAP method configured on the supplicant for 802.1X
              authentication is supported on the authentication server. The 802.1X
              handshake is used to decide what is an acceptable EAP method to
              use. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapMethodBackendSupport.oxEapMethodBackendUnsupported">
            <summary> The EAP method configured on the supplicant for 802.1X
              authentication is not supported on the authentication
              server. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXSupplicantMode">
            <summary> The type defines possible supplicant mode values. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXSupplicantMode.oxSupplicantModeInhibitTransmission">
            <summary> EAPOL-Start messages are not transmitted. Valid for wired LAN
              profiles only. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXSupplicantMode.oxSupplicantModeLearn">
            <summary> The client determines when to send EAPOL-Start packets based
              on network capability. EAPOL-Start messages are only sent when
              required. Valid for wired LAN profiles only. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXSupplicantMode.oxSupplicantModeCompliant">
            <summary> EAPOL-Start messages are transmitted as specified by 802.1X.
              Valid for both wired and wireless LAN profiles. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXSupplicantMode.oxSupplicantModeInvalid">
            <summary> Unknown or unsupported supplicant mode. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOnexXAuthMode">
            <summary> The type defines possible authentication mode values. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeMachineOrUser">
            <summary> Use machine or user credentials. When a user is logged on, the
              user's credentials are used for authentication. When no user is
              logged on, machine credentials are used. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeMachineOnly">
            <summary> Use machine credentials only. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeUserOnly">
            <summary> Use user credentials only. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeGuest">
            <summary> Use guest (empty) credentials only. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeUnspecified">
            <summary> Credentials to use are not specified. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthMode.oxAuthModeInvalid">
            <summary> Unknown or unsupported authentication mode. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXAuthIdentity">
            <summary> The type specifies the possible values of the identity used for
              802.1X authentication status. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityNone">
            <summary> No identity is specified in the profile used for 802.1X
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityMachine">
            <summary> The identity of the local machine account is used for 802.1X
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityUser">
            <summary> The identity of the logged-on user is used for 802.1X
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityExplicitUser">
            <summary> The identity of an explicit user as specified in the profile
              is used for 802.1X authentication. This value is used when performing
              single signon or when credentials are saved with the
              profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityGuest">
            <summary> The identity of the Guest account as specified in the profile
              is used for 802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityInvalid">
            <summary> The identity is not valid as specified in the profile used for
              802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXAuthIdentity.oxAuthIdentityUnknown">
            <summary> Unknown or unspecified identity. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiIsolationState">
            <summary> Defines the set of possible isolation state values of a machine.
              The isolation state of a machine determines its network
              connectivity. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIsolationState.isUnknonw">
            <summary> The client's access to the network is unknown. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIsolationState.isNotRestricted">
            <summary> The client has unrestricted full access to the
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIsolationState.isInProbation">
            <summary> The client has probationary access to the network for a
              limited amount of time during which time they must fix their
              system. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIsolationState.isRestrictedAccess">
            <summary> The client has restricted access to the network; the client is
              allowed access to some servers only from which they can obtain
              necessary information and patches to update themselves to become
              healthy. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIsolationState.isInvalid">
            <summary> The isolation state is invalid or unspecified. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiAcmConnectionEventData">
            <summary> The record contains information about connection related
              events. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.ConnectionMode">
            <summary> The mode of the connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.ProfileName">
            <summary> The name of the profile used for the connection.
              Profile names are case-sensitive. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.Ssid">
            <summary> The SSID of the association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.BssType">
            <summary> The BSS network type. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.SecurityEnabled">
            <summary> Indicates whether security is enabled for this connection.
              If <c>True</c>, security is enabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.Reason">
            <summary> The reason for an operation failure. This field has a value
              of <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> for all connection-related
              events except <c>OnAcmConnectionComplete</c>. If the connection fails,
              this field indicates the reason for the failure. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.Flags">
            <summary> A set of flags that provide additional information for the
              network connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionFlag" />
        </member>
        <member name="F:wclWiFi.wclWiFiAcmConnectionEventData.ProfileXml">
            <summary> The XML presentation of the profile used for discovery,
              if the connection succeeds. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkPeerState">
            <summary> The record contains information about the peer state for a peer
              on the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkPeerState.Mac">
            <summary> The MAC address of the peer being described. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkPeerState.AuthState">
            <summary> The current authentication state of this peer. </summary>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkPeerAuthState" />
        </member>
        <member name="T:wclWiFi.wclWiFiMsmConnectionEventData">
            <summary> The record contains information about media specific module
              (MSM) connection related notifications. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.ConnectionMode">
            <summary> The mode of the connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.ProfileName">
            <summary> The name of the profile used for the connection.
              Profile names are case-sensitive. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.Ssid">
            <summary> The SSID of the association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.BssType">
            <summary> The BSS network type. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.Mac">
            <summary> The MAC address of the peer or access point. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.SecurityEnabled">
            <summary> Indicates whether security is enabled for this connection.
              If <c>True</c>, security is enabled. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.FirstPeer">
            <summary> <para> Indicates whether the peer is the first to join the ad
              hoc network created by the machine. If <c>True</c>, the peer is the
              first to join. </para>
              <para> After the first peer joins the network, the interface state of
              the machine that created the ad hoc network changes from
              <c>isAdHocFormed</c> to <c>isConnected</c>. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceState" />
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.LastPeer">
            <summary> Indicates whether the peer is the last to leave the ad hoc
              network created by the machine. If <c>True</c>, the peer is the last
              to leave. After the last peer leaves the network, the interface state
              of the machine that created the ad hoc network changes from
              <c>isConnected</c> to <c>isAdHocFormed</c>. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceState" />
        </member>
        <member name="F:wclWiFi.wclWiFiMsmConnectionEventData.Reason">
            <summary> The reason for an operation failure. If the operation
              succeeds, this field has a value of <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />.
              Otherwise, this field indicates the reason for the failure. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiPhyRadioState">
            <summary> Specifies the radio state on a specific physical layer (PHY)
              type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiPhyRadioState.Phy">
            <summary> The PHY type on which the radio state is being set or
              queried. </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiPhyRadioState.SoftwareState">
            <summary> Indicates the software radio state. </summary>
            <seealso cref="T:wclWiFi.wclWiFiRadioState" />
        </member>
        <member name="F:wclWiFi.wclWiFiPhyRadioState.HardwareState">
            <summary> Indicates the hardware radio state. </summary>
            <seealso cref="T:wclWiFi.wclWiFiRadioState" />
        </member>
        <member name="T:wclWiFi.wclWiFiIpSettings">
            <summary> The record represents IP settings. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Static">
            <summary> <c>True</c> if IP address is static. <c>False</c> if
              IP address is assigned by DHCP. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Address">
            <summary> The IP address. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Mask">
            <summary> The subnet mask. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Gateway">
            <summary> The default gateway. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Dns1">
            <summary> The primary DNS address. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiIpSettings.Dns2">
            <summary> The secondary DNS address. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXStatus">
            <summary> The structure contains the current 802.1X authentication
              status. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatus.Status">
            <summary> The current status of the 802.1X authentication process. Any
              error that may have occurred during authentication is indicated below
              by the value of the <c>Reason</c> and <c>Error</c> members of the
              <c>wclWiFiOneXStatus</c> structure. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXAuthStatus" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatus.Reason">
            <summary> If an error occurred during 802.1X authentication, this
              member contains the reason for the error  This member is normally
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> when 802.1X authentication is successful
              and no error occurs. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatus.Error">
            <summary> If an error occurred during 802.1X authentication, this member
              contains the error. This member is normally
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />, except when an EAPHost error
              occurs. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXConnectionProfile">
            <summary> The structure contains information on the 802.1X connection
              profile currently used for 802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.SupplicantMode">
            <summary> The supplicantMode element in the 802.1X schema that specifies
              the method of transmission used for EAPOL-Start messages. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXSupplicantMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.AuthMode">
            <summary> The authMode element in the 802.1X schema that specifies the
              type of credentials used for 802.1X authentication. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOnexXAuthMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.HeldPeriod">
            <summary> The heldPeriod element in the 802.1X schema that specifies the
              length of time, in seconds, in which a client will not re-attempt
              authentication after a failed authentication attempt. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.AuthPeriod">
            <summary> The authPeriod element in the 802.1X schema that specifies the
              maximum length of time, in seconds, in which a client waits for a
              response from the authenticator. If a response is not received within
              the specified period, the client assumes that there is no
              authenticator present on the network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.StartPeriod">
            <summary> The startPeriod element in the 802.1X schema that specifies
              the length of time, in seconds, to wait before an EAPOL-Start is sent.
              An EAPOL-Start message is sent to start the 802.1X authentication
              process. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.MaxStart">
            <summary> The maxStart element in the 802.1X schema that specifies the
              maximum number of EAPOL-Start messages sent. After the maximum number
              of EAPOL-Start messages has been sent, the client assumes that there
              is no authenticator present on the network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.MaxAuthFailures">
            <summary> The maxAuthFailures element in the 802.1X schema that
              specifies the maximum number of authentication failures allowed for a
              set of credentials. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.NetworkAuthTimeout">
            <summary> The time, in seconds, to wait for 802.1X authentication
              completion before normal logon proceeds. This value is used in single
              signon (SSO) scenarios. This value defaults to 10 seconds in an
              802.1X profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.NetworkAuthWithUITimeout">
            <summary> <para> The maximum duration time, in seconds, to wait for a
              connection in case a user interface dialog box that requires user
              input is displayed during the per-logon SSO. </para>
              <para> On Windows Vista with SP1 and later, this value is hardcoded
              to 10 minutes and is not configurable. On Windows Vista Release to
              Manufacturing, this value defaults to 60 seconds in an 802.1X profile
              and was controlled by the maxDelayWithAdditionalDialogs element in the
              schema. </para>
              <para> On Windows Vista with SP1 and later, the
              maxDelayWithAdditionalDialogs element in the 802.1X schema is ignored
              and deprecated. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.AllowLogonDialogs">
            <summary> A value that specifies whether to allow EAP dialogs to be
              displayed when using pre-logon SSO. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXConnectionProfile.UserBasedVLan">
            <summary> The userBasedVirtualLan element in the 802.1X schema that
              specifies if the virtual LAN (VLAN) used by the device changes based
              on the user's credentials. Some network access server (NAS) devices
              change the VLAN after a user authenticates. When userBasedVirtualLan
              is <c>TRUE</c>, the NAS may change a device's VLAN after a user
              authenticates. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOnexXAuthParams">
            <summary> The structure contains 802.1X authentication parameters used for
              802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.UpdatePending">
            <summary> Indicates if a status update is pending for 802.X
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.Profile">
            <summary> The 802.1X authentication connection profile. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXConnectionProfile" />
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.AuthIdentity">
            <summary> The identity used for 802.1X authentication status. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXAuthIdentity" />
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.QuarantineState">
            <summary> The quarantine isolation state value of the local computer.
              The isolation state determines its network connectivity. </summary>
            <seealso cref="T:wclWiFi.wclWiFiIsolationState" />
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.SessiondId">
            <summary> The session ID of the user currently logged on to the
              console. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.Identity">
            <summary> The 802.1X identity used for 802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.UserName">
            <summary> The user name used for 802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOnexXAuthParams.Domain">
            <summary> The domain used for 802.1X authentication. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiEapType">
            <summary> The structure contains type and vendor identification
              information for an EAP method. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiEapType.EapType">
            <summary> The numeric type code for this EAP method. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiEapType.VendorId">
            <summary> The vendor ID for the EAP method. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiEapType.VendorType">
            <summary> The numeric type code for the vendor of this EAP
              method. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiEapMethodType">
            <summary> The structure contains type, identification, and author
              information about an EAP method. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiEapMethodType.EapType">
            <summary> Contains the ID for the EAP method as well as specific
              vendor information. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEapType" />
        </member>
        <member name="F:wclWiFi.wclWiFiEapMethodType.AuthorId">
            <summary> The numeric ID for the author of the EAP method. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXEapError">
            <summary> structure contains 802.1X EAP error when an error occurs with
              802.1X authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.Error">
            <summary> The OS error code. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.MethodType">
            <summary> The EAP method type that raised the error during 802.1X
              authentication. </summary>
            <seealso cref="T:wclWiFi.wclWiFiEapMethodType" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.Reason">
            <summary> The reason the EAP method failed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.RootCauseGuid">
            <summary> A unique ID that identifies cause of error in EAPHost. An EAP
              method can define a new GUID and associate the GUID with a specific
              root cause. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.RepairGuid">
            <summary> A unique ID that maps to a localizable string that identifies
              the repair action that can be taken to fix the reported
              error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.HelpLinkGuid">
            <summary> A unique ID that maps to a localizable string that specifies
              an URL for a page that contains additional information about an error
              or repair message. An EAP method can potentially define a new GUID and
              associate with one specific help link. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.RootCauseString">
            <summary> A localized and readable string that describes the root cause
              of the error. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXEapError.RepairString">
            <summary> A localized and readable string that describes the possible
              repair action. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiOneXStatusUpdate">
            <summary> The structure contains information on a status change to 802.1X
              authentication. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatusUpdate.Status">
            <summary> Specifies the current 802.1X authentication status. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXStatus" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatusUpdate.BackendSupport">
            <summary> <para> Indicates if the configured EAP method on the
              supplicant is supported on the 802.1X authentication server. </para>
              <para> EAP permits the use of a backend authentication server, which
              may implement some or all authentication methods, with the
              authenticator acting as a pass-through for some or all methods and
              peers. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXEapMethodBackendSupport" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatusUpdate.BackendEngaged">
            <summary> Indicates if a response was received from the 802.1X
              authentication server. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatusUpdate.AuthParams">
            <summary> The 802.1X authentication parameters. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOnexXAuthParams" />
        </member>
        <member name="F:wclWiFi.wclWiFiOneXStatusUpdate.EapError">
            <summary> An EAP error value. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOneXEapError" />
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetwork">
            <summary> The <c>wclWiFiHostedNetwork</c> component provides access to
              the WiFi Hosted Network features. </summary>
            <remarks> In order to receiver the Hosted Network notifications an
              application must use the <see cref="T:wclWiFi.wclWiFiEvents" />
              component. </remarks>
            <summary> The <c>wclWiFiHostedNetwork</c> component provides access to
              the WiFi Hosted Network features. </summary>
            <remarks> In order to receiver the Hosted Network notifications an
              application must use the <see cref="T:wclWiFi.wclWiFiEvents" />
              component. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.InternalClose">
            <summary> Executes additional finalization procedures. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.InternalOpen">
            <summary> Executes additional initialization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetConnectionSettings(wclWiFi.wclWiFiHostedNetworkConnectionSettings@)">
            <summary> Reads the information about the connection settings on the
              wireless Hosted Network. </summary>
            <param name="Settings"> The hosted network connection settings. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkConnectionSettings" />
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetKey(System.Byte[]@,System.Boolean@,System.Boolean@)">
            <summary> Reads the secondary security key that is configured to be
              used by the wireless Hosted Network. </summary>
            <param name="KeyData"> A value that receives a buffer
              returned with the secondary security key data, if the call to the
              method succeeds. </param>
            <param name="IsPassPhrase"> <para> A Boolean value that indicates if the
              key data array pointed to by the <c>KeyData</c> parameter is in
              passphrase format. </para>
              <para> If this parameter is <c>True</c>, the key data array is in
              passphrase format. If this parameter is <c>False</c>, the key data
              array is not in passphrase format. </para> </param>
            <param name="Persistent"> <para> A Boolean value that indicates if the
              key data array pointed to by the <c>KeyData</c> parameter is to be
              stored and reused later or is for one-time use only. </para>
              <para> If this parameter is <c>True</c>, the key data array is to be
              stored and reused later. If this parameter is <c>False</c>, the key
              data array is for one-time use only. </para> </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> A client application calls the <c>GetKey</c> method to
              query the secondary security key that will be used by the wireless
              Hosted Network. This function will return the key information
              including key data, key length, whether it is a passphrase, and
              whether it is persistent or for one-time use. This function does not
              change the state or properties of the wireless Hosted Network. </para>
              <para> The secondary security key is a passphrase if the value of the
              <c>IsPassPhrase</c> parameter is <c>True</c>. The secondary security
              key is a binary key if the value of the "IsPassPhrase" parameter is
              <c>False</c>. </para>
              <para> The secondary security key returned in the buffer pointed to
               by the <c>KeyData</c> parameter is used with WPA2-Personal
              authentication and is in one of the following formats: </para>
              <list type="bullet">
                <item> A key passphrase that consists of an array of ASCII
                       characters from 8 to 63 characters. </item>
                <item> A binary key that conists of 32 bytes of binary key
                       data. </item>
              </list>
              <para> The secondary security key is persistent if the value of the
              <c>Persistent</c> parameter is <c>True</c>. When persistent, the
              secondary security key would be used immediately if the Hosted
              Network is already started, and also reused whenever Hosted Network
              is started in the future. </para>
              <para> If secondary security key is not specified as persistent, it
              will be used immediately if the Hosted Network is already started, or
              only for the next time when the Hosted Network is started. After the
              Hosted Network is stopped, this secondary security key will never be
              used again and will be removed from the system. </para>
              <para> If there is no secondary security key currently configured, the
              value returned in the <c>KeyData</c> parameter will be <c>null</c>.
              In such case, the value returned in the <c>IsPassPhrase</c> and
              <c>Persistent</c> parameters will be meaningless. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetLocalIp(System.String@)">
            <summary> Gets the local IP address for the Hosted Network Virtual
              WiFi adapter. </summary>
            <param name="Address"> If the method completed with success on output
              contains the Hosted Network local IP address. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetConnectedPeers(System.String[]@)">
            <summary> Gets the list of currently connected peers. </summary>
            <param name="Peers"> If the method completed with success on output
              contains the list of current connected peers. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetProfile(System.String@)">
            <summary> Reads the wireless Hosted Network station profile. </summary>
            <param name="ProfileXml"> Contains an XML WLAN profile for connecting
              to the wireless Hosted Network is returned. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetRemoteIp(System.String,System.String@)">
            <summary> Gets the remote IP address for the device connected to Hosted
              Network Virtual WiFi adapter. </summary>
            <param name="Mac"> The remote device's MAC address. </param>
            <param name="Address"> If the method completed with success on output
              contains the remote IP address. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetSecuritySettings(wclWiFi.wclWiFiAuthCipherPair@)">
            <summary> Reads the information about the security settings on the
              wireless Hosted Network. </summary>
            <param name="Settings"> The security settings on the wireless Hosted
              Network. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiAuthCipherPair" />
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetStatus(wclWiFi.wclWiFiHostedNetworkStatus@)">
            <summary> The function queries the current status of the
              wireless Hosted Network. </summary>
            <param name="Status"> Receives a current status of the wireless Hosted
              Network, if the call to the GetStatus method succeeds. The current
              status is returned in a <see cref="T:wclWiFi.wclWiFiHostedNetworkStatus" />
              record. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.GetState(System.Boolean@)">
            <summary> Reads the wireless Hosted Network enabled flag. </summary>
            <param name="Enabled"> <c>True</c> if the Wireless Hosted Network is
              enabled. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> The method can be called without opening the Hosted
              Network. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.SetConnectionSettings(wclWiFi.wclWiFiHostedNetworkConnectionSettings)">
            <summary> Writes the information about the connection settings on the
              wireless Hosted Network. </summary>
            <param name="Settings"> The hosted network connection settings.</param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkConnectionSettings" />
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.SetKey(System.Byte[],System.Boolean,System.Boolean)">
            <summary> The method configures the secondary security key that will
              be used by the wireless Hosted Network. </summary>
            <param name="KeyData"> A pointer to a buffer that contains the key
              data. </param>
            <param name="IsPassPhrase"> <para> A Boolean value that indicates if the
              key data array pointed to by the <c>KeyData</c> parameter is in
              passphrase format. </para>
              <para> If this parameter is <c>True</c>, the key data array is in
              passphrase format. If this parameter is <c>False</c>, the key data
              array is not in passphrase format. </para> </param>
            <param name="Persistent"> <para> A Boolean value that indicates if the
              key data array pointed to by the <c>KeyData</c> parameter is to be
              stored and reused later or is for one-time use only. </para>
              <para> If this parameter is <c>True</c>, the key data array is to be
              stored and reused later. If this parameter is <c>False</c>, the key
              data array is to be used for one session (either the current session
              or the next session if the Hosted Network is not
              started). </para> </param>
            <remarks> <para> A client application calls the <c>SetKey</c> method to
              configure the secondary security key that will be used by the
              wireless Hosted Network. Any Hosted Network change caused by this
              function would not be automatically undone if the calling application
              closes or if the process ends. </para>
              <para> Once started, the wireless Hosted Network will allow wireless
              peers to associate with this secondary security key in addition to the
              primary security key. The secondary security key is always specified
              by the user as needed, while the primary security key is generated by
              the operating system with greater security strength. </para>
              <para> The secondary security key passed in the buffer pointed to by
              the <c>KeyData</c> parameter is used with WPA2-Personal authentication
              and should be in one of the following formats: </para>
              <list type="bullet">
                <item> A key passphrase that consists of an array of ASCII
                       characters from 8 to 64 characters including the
                       terminating <c>0</c> in the passphrase. </item>
                <item> A binary key that consists of 32 bytes of binary key
                       data. </item>
              </list>
              <para> To configure a valid secondary security key, the
              <c>KeyData</c> parameter should be a valid byte array
              containing the specified bytes of data. To remove the currently
              configured secondary security key from the system, the application
              should call the <c>SetKey</c> method with <c>null</c> in the
              <c>KeyData</c> parameter. </para>
              <para> The secondary security key can be specified as persistent if
              the <c>Persistent</c> parameter is set to <c>True</c>. When specified
              as persistent, the secondary security key would be used immediately
              and also reused whenever Hosted Network is started in the
              future. </para>
              <para> If secondary security key is not specified as persistent, it
              will be used immediately, or only for the next time when Hosted
              Network is started. After the Hosted Network is stopped, this
              secondary security key will never be used again and will be removed
              from the system. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.SetState(System.Boolean)">
            <summary> Writes the wireless Hosted Network enabled flag. </summary>
            <param name="Enabled"> <c>True</c> to enable the Wireless Hosted
              Network. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.RefreshSecuritySettings">
            <summary> The function refreshes the configurable and auto-generated
              parts of the wireless Hosted Network security settings. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> A client application calls the
              <c>RefreshSecuritySettings</c> method to force a refresh of the
              configurable and auto-generated parts of the security settings (the
              primary key) on the wireless Hosted Network. </para>
              <para> An application might call the <c>RefreshSecuritySettings</c>
              method after ensuring that the user accepts the impact of updating the
              security settings. In order to succeed, this function must persist the
              new settings which would require that Hosted Network state be
              transitioned to <c>hnIdle</c> if it was currently running
              (<c>hnActive</c>). </para>
              <note type="note"> Any network clients (PCs or devices) on the
              wireless Hosted Network would have to be re-configured after calling
              the <c>RefreshSecuritySettings</c> method if their continued usage is
              a goal. An application would typically call this function in
              situations where the user feels that the security of the previous
              primary key used for security by the wireless Hosted Network has been
              violated. </note>
              <para> Note that the <c>RefreshSecuritySettings</c> method does not
              change or reset the secondary key. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.Restart">
            <summary> Restarts the Hosted Network service. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiHostedNetwork.SetPsdIe(System.String,System.Byte[])">
            <summary> Sets the proximity service discovery (PSD) information element
              (IE) data. </summary>
            <param name="Format"> The format of a PSD IE in the PSD IE data. This is
              a URI string that specifies the namespace of the protocol used for
              discovery. </param>
            <param name="Data"> The PSD IE data. The data must not exceed 240
              bytes. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> To reset PSD IE set the <c>Format</c> parameter to an
              empty string and the <c>Data</c> parameter to an empty array. </para>
              <para> The Proximity Service Discovery Protocol is a Microsoft
              proprietary protocol that allows a client to discover services in its
              physical proximity, which is defined by the radio range. The purpose
              of the Proximity Service Discovery Protocol is to convey service
              discovery information, such as service advertisements, as part of
              Beacon frames. Access points (APs) and stations (STAs) that operate in
              ad hoc mode periodically broadcast beacon frames. The beacon frame can
              contain single or multiple proprietary information elements that carry
              discovery information pertaining to the services that the device
              offers. </para>
              <para> A PSD IE is used to transmit compressed information provided by
              higher-level discovery protocols for the purpose of passive discovery.
              One such higher-level protocol used for discovery is the WS-Discovery
              protocol. Any protocol can be used for discovery. </para> </remarks>
        </member>
        <member name="P:wclWiFi.wclWiFiHostedNetwork.Data">
            <summary> Gets the PSD IE data. </summary>
            <value> The bytes array represents a raw PSD IE data. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiHostedNetwork.Format">
            <summary> Gets the PSD IE format string. </summary>
            <value> The string value represents PSD IE format. </value>
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkStatus">
            <summary> he structure contains information about the status of the
              wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.State">
            <summary> <para> The current state of the wireless Hosted
              Network. </para>
              <para> If the value of this member is <c>hnUnavailable</c>, then the
              values of the other fields in this structure should not be
              used. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkState" />
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.Id">
            <summary> <para> The actual network Device ID used for the wireless
              Hosted Network. </para>
              <para> This is member is the GUID of a virtual wireless device which
              would not be available through calls to the <c>EnumInterfaces</c>
              method of the <see cref="T:wclWiFi.wclWiFiClient" /> component. This GUID can
              be used for calling other higher layer networking functions that use
              the device GUID (IP Helper functions, for example). </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.BssId">
            <summary> The BSSID used by the wireless Hosted Network in packets,
              beacons, and probe responses. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.Phy">
            <summary> <para> The physical type of the network interface used by
              wireless Hosted Network. </para>
              <para> This is one of the types reported by the related physical
              interface. This value is correct only if the <c>State</c> member is
              <c>hnActive</c>. </para> </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.ChannelFrequency">
            <summary> <para> The channel frequency of the network interface used by
              wireless Hosted Network. </para>
              <para> This value is correct only if <c>State</c> is
              <c>hnActive</c>. </para> </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkStatus.Peers">
            <summary> <para> A dynamic array of
              <see cref="T:wclWiFi.wclWiFiHostedNetworkPeerState" /> structures
              describing each of the current peers on the wireless Hosted
              Network. </para>
              <para> This value is correct only if <c>State</c> is
              <c>hnActive</c>. </para> </summary>
            <remarks> The caller is responsible to release the memory allocated
              for the dynamic array. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetworkPeerState" />
        </member>
        <member name="T:wclWiFi.wclWiFiHostedNetworkConnectionSettings">
            <summary> The structure contains information about the connection settings
              on the wireless Hosted Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkConnectionSettings.Ssid">
            <summary> The SSID associated with the wireless Hosted
              Network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiHostedNetworkConnectionSettings.MaxNumberOfPeers">
            <summary> The maximum number of concurrent peers allowed by the wireless
              Hosted Network. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiInformationElementParser">
            <summary> The helper class to parse raw Information Elements data
              stream. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.AddElement(wclWiFi.wclWiFiInformationElement,wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Adds new Element to the Elements array. </summary>
            <param name="Element"> The Information Element structure. </param>
            <param name="Elements"> The Information Elements list. </param>
            <seealso cref="T:wclWiFi.wclWiFiInformationElement"/>
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.#ctor">
            <summary> Creates new Information Element parser object. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.ExtractInformationElements(wclWiFi.wclWiFiBss,wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts information elements from WiFi BSS data. </summary>
            <param name="Bss"> The WiFi BSS data. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <seealso cref="T:wclWiFi.wclWiFiBss" />
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.ExtractInformationElements(System.Byte[],wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts information elements from WiFi frame IE raw
              data. </summary>
            <param name="Raw"> The WiFi frame IE raw bytes array. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.ExtractInformationElements(wclWiFi.wclWiFiInformationElementId,wclWiFi.wclWiFiBss,wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts information elements with specified ID from WiFi
              BSS data. </summary>
            <param name="Id"> The required Information Element ID. </param>
            <param name="Bss"> The WiFi BSS data. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <remarks> As Windows may combine multiple Information Elements received
              in different Beacon advertisement in a single raw data stream there
              can be more than one IE with given ID. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiInformationElementId" />
            <seealso cref="T:wclWiFi.wclWiFiBss" />
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="M:wclWiFi.wclWiFiInformationElementParser.ExtractInformationElements(wclWiFi.wclWiFiInformationElementId,System.Byte[],wclWiFi.wclWiFiInformationElement[]@)">
            <summary> Extracts information elements with specified ID from WiFi
              frame IE raw data. </summary>
            <param name="Id"> The required Information Element ID. </param>
            <param name="Raw"> The WiFi frame IE raw bytes array. </param>
            <param name="Elements"> If the method completed with success and at
              least one IE was found on output contains the array of IEs. If the
              method was success but no one IE found or if the method failed the
              output value is <c>null</c>. </param>
            <remarks> As Windows may combine multiple Information Elements received
              in different Beacon advertisement in a single raw data stream there
              can be more than one IE with given ID. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiInformationElementId" />
            <seealso cref="T:wclWiFi.wclWiFiInformationElement" />
        </member>
        <member name="T:wclWiFi.wclWiFiInformationElementId">
            <summary> Information Element IDs as described in IEEE Std 802.11-2016,
              9.4.2.1, Table 9-77. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSsid">
            <summary> SSID element. </summary>
            <remarks> The SSID element indicates the identity of an ESS or
              IBSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSuppRates">
            <summary> Supported rates and BSS membership selectors
              element. </summary>
            <remarks> The supported rates and BSS membership selectors element
              specifies up to eight rates in the OperationalRateSet parameter, as
              described in the MLME-JOIN.request and MLME-START.request primitives,
              and zero or more BSS membership selectors. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidCfParams">
            <summary> DSSS parameter set element. </summary>
            <remarks> The DSSS parameter set element contains information to allow
              channel number identification for STAs. </remarks>
            <summary> CF parameter set element. </summary>
            <remarks> <para>The CF Parameter Set element contains the set of
              parameters necessary to support the PCF.</para>
              <para><c>The PCF mechanism is obsolete. Consequently, this subclause
              might be removed in a later revision of the
              standard.</c></para> </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTim">
            <summary> TIM element. </summary>
            <remarks> The TIM element contains four fields: DTIM Count, DTIM Period,
              Bitmap Control, and Partial Virtual Bitmap. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidIbssParams">
            <summary> IBSS parameter set element. </summary>
            <remarks> The IBSS parameter set element contains the set of parameters
              necessary to support an IBSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidCountry">
            <summary> Country element. </summary>
            <remarks> The country element contains the information required to allow
              a STA to identify the regulatory domain in which the STA is located
              and to configure its PHY for operation in that regulatory
              domain. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRequest">
            <summary> Request element. </summary>
            <remarks> This element is placed in a Probe Request frame or Information
              Request frame to request that the responding STA include the requested
              information in the Probe Response frame or Information Response frame,
              respectively. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBssLoad">
            <summary> BSS load element. </summary>
            <remarks> The BSS load element contains information on the current STA
              population and traffic levels in the BSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidEdcaParamSet">
            <summary> EDCA parameter set elemen. </summary>
            <remarks> The EDCA Parameter Set element provides information needed by
              STAs for proper operation of the QoS facility during the
              CP. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTspec">
            <summary> TSPEC element. </summary>
            <remarks> The TSPEC element contains the set of parameters that define
              the characteristics and QoS expectations of a traffic flow, in the
              context of a particular STA, for use by the HC or PCP and STA(s) or a
              mesh STA and its peer mesh STAs in support of QoS traffic transfer
              using the procedures defined in 11.4 and 11.24.16.3. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTclas">
            <summary> TCLAS element. </summary>
            <remarks> The TCLAS element contains a set of parameters necessary to
              identify various kinds of PDU or incoming MSDU (from a higher layer in
              all STAs or from the DS in an AP) that belong to a particular TS. The
              TCLAS element is also used when the traffic does not belong to a TS,
              for example, by the FMS, DMS, and TFS services. If required, the TCLAS
              element is provided in ADDTS Request and ADDTS Response frames only
              for the downlink or bidirectional links. The TCLAS element is always
              included when a PTP TSPEC is transmitted to a peer STA via an AP or
              PCP. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSchedule">
            <summary> Schedule element. </summary>
            <remarks> The Schedule element is transmitted by the HC to a STA to
              announce the schedule that the HC/AP follows for admitted streams
              originating from or destined to that STA, or GCR-SP streams destined
              to that STA, in the future. The information in this element might be
              used by the STA for power management, internal scheduling, or any
              other purpose. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChallenge">
            <summary> Challenge text element. </summary>
            <remarks> The Challenge Text element contains the challenge text within
              Authentication exchanges. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPwrConstraint">
            <summary> Power constraint element. </summary>
            <remarks> The Power Constraint element contains the information
              necessary to allow a STA to determine the local maximum transmit power
              in the current channel. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPwrCapability">
            <summary> Power capability element. </summary>
            <remarks> The Power Capability element specifies the minimum and maximum
              transmit powers with which a STA is capable of transmitting in the
              current channel. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTpcRequest">
            <summary> TPC request element. </summary>
            <remarks> The TPC Request element contains a request for a STA to report
              transmit power and link margin information using a TPC Report
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTpcReport">
            <summary> TPC report element. </summary>
            <remarks> The TPC Report element contains transmit power and link margin
              information sent in response to a TPC Request element or a Link
              Measurement Request frame. A TPC Report element is included in a
              Beacon frame or Probe Response frame without a corresponding
              request. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSupportedChannels">
            <summary> Supported channels element. </summary>
            <remarks> The Supported Channels element contains a list of channel
              subbands (from those channels defined in 17.3.8.4.3) in which a STA is
              capable of operating. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChannelSwitch">
            <summary> Channel switch announcement element. </summary>
            <remarks> The Channel Switch Announcement element is used by an AP, IBSS
              STA, mesh STA, or PCP to advertise when it is changing to a new
              channel and the channel number of the new channel. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeasureRequest">
            <summary> Measurement request element. </summary>
            <remarks> The Measurement Request element contains a request that the
              receiving STA undertake the specified measurement action. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeasureReport">
            <summary> Measurement report elemen. </summary>
            <remarks> The Measurement Report element contains a measurement
              report. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQuiet">
            <summary> Quiet element. </summary>
            <remarks> The Quiet element defines an interval during which no
              transmission occurs in the current channel. This interval might be
              used to assist in making channel measurements without interference
              from other STAs in the BSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidIbssDfs">
            <summary> IBSS DFS element. </summary>
            <remarks> The IBSS DFS element contains information for DFS operation in
              an IBSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidErpInfo">
            <summary> ERP element. </summary>
            <remarks> The ERP element contains information on the presence of
              Clause 15 or Clause 16 STAs in the BSS that are not capable of Clause
              18 (ERP-OFDM) data rates. It also contains the requirement of the ERP
              element sender (AP, IBSS STA, or mesh STA) as to the use of protection
              mechanisms to optimize BSS performance and as to the use of long or
              short Barker preambles. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTsDelay">
            <summary> TS delay element. </summary>
            <remarks> The TS Delay element is used in an ADDTS Response frame
              transmitted by an HC and indicates the time after which the ADDTS can
              be retried. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTclasProcessing">
            <summary> TCLAS processing element. </summary>
            <remarks> The TCLAS Processing element is present in ADDTS Request,
              ADDTS Response, FMS Request, FMS Response, DMS Request, DMS Response,
              TFS Request and SCS Descriptor frames if there are multiple TCLAS
              elements associated with the request, response or descriptor. It is
              optionally present in the ADDTS Request and ADDTS Response frames if
              there are no TCLAS elements. Together with the TCLAS element(s), if
              present, it indicates how a PDU or MSDU should be processed by the
              classifie. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidHtCap">
            <summary> HT capabilities element. </summary>
            <remarks> The HT Capabilities element contains a number of fields that
              are used to advertise optional HT capabilities of an HT STA. The HT
              Capabilities element is present in Beacon, Association Request,
              Association Response, Reassociation Request, Reassociation Response,
              Probe Request, Probe Response, Mesh Peering Open, and Mesh Peering
              Close frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQos">
            <summary> QoS capability element. </summary>
            <remarks> The QoS Capability element contains a number of subfields that
              are used to advertise optional QoS capabilities at a QoS STA. The QoS
              Capability element is present in Beacon frames that do not contain the
              EDCA Parameter Set element and in (Re)Association Request
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRns">
            <summary> RSNE. </summary>
            <remarks> The RSNE contains the information required to establish an
              RSNA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtSuppRates">
            <summary> Extended supported rates and BSS membership selectors
              element. </summary>
            <remarks> The Extended Supported Rates and BSS Membership Selectors
              element specifies the rates in the OperationalRateSet parameter, as
              described in the MLME-JOIN.request and MLME-START.request primitives,
              and zero or more BSS membership selectors, where these are not carried
              in the Supported Rates and BSS Membership Selectors
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidApChannelReport">
            <summary> AP channel report element. </summary>
            <remarks> The AP Channel Report element contains a list of channels
              where a STA is likely to find an AP. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidNeightborReport">
            <summary> Neighbor report element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRcpi">
            <summary> RCPI element. </summary>
            <remarks> The RCPI element indicates the received frame power level at
              the receiving STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMobilityDomain">
            <summary> Mobility domain element (MDE). </summary>
            <remarks> The MDE contains the MDID (Mobility Domain Identifier) field
              and the FT Capability and Policy field. The AP uses the MDE to
              advertise that it is included in the group of APs that constitute a
              mobility domain, to advertise its support for FT capability, and to
              advertise its FT policy information. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidFastBssTransition">
            <summary> Fast BSS transition element (FTE). </summary>
            <remarks> The FTE includes information needed to perform the FT
              authentication sequence during a fast BSS transition in an
              RSN. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTimeoutInterval">
            <summary> Timeout interval element (TIE). </summary>
            <remarks> The TIE specifies time intervals and timeouts. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRicData">
            <summary> RIC Data element (RDE). </summary>
            <remarks> <para>The RIC refers to a collection of elements that are used
              to express a resource request and to convey responses to the
              corresponding requests.</para>
              <para>A RIC is a sequence of one or more Resource Requests, or a
              sequence of one or more Resource Responses. Each Resource Request or
              Response consists of an RDE, followed by one or more elements that
              describe that resource.</para> </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDseRegisteredLocation">
            <summary> DSE Registered Location element. </summary>
            <remarks> A DSE Registered Location element includes DSE location
              configuration information (LCI), which contains latitude, longitude,
              and altitude information. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSupportedOperatingClasses">
            <summary> Supported pperating classes element. </summary>
            <remarks> The Supported Operating Classes element is used by a STA to
              advertise the operating classes that it is capable of operating with
              in this country. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtChanSwitchAnn">
            <summary> Extended channel switch announcement element. </summary>
            <remarks> The Extended Channel Switch Announcement element is used by an
              AP, IBSS STA, or mesh STA to advertise when the BSS is changing to a
              new channel or a new channel in a new operating class. The
              announcement includes both the operating class and the channel number
              of the new channel. The element is present only when an extended
              channel switch is pending. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidHtOperation">
            <summary> HT Operation element. </summary>
            <remarks> The operation of HT STAs in the BSS is controlled by the HT
              Operation element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSecondaryChannelOffset">
            <summary> Secondary channel offset element. </summary>
            <remarks> The Secondary Channel Offset element is used by an AP, IBSS
              STA or mesh STA when changing to a new 40 MHz or wider
              channel. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBssAverageAccessDelay">
            <summary> BSS average access delay element. </summary>
            <remarks> The BSS Average Access Delay element contains the AP Average
              Access Delay, which is a measure of load in the BSS and is available
              in both QoS APs and non-QoS APs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAntenna">
            <summary>  Antenna element. </summary>
            <remarks> The Antenna element contains the Antenna ID field. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRsni">
            <summary> RSNI element. </summary>
            <remarks> The RSNI element contains an RSNI value. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeasurementPilotTransmission">
            <summary> Measurement pilot transmission element. </summary>
            <remarks> The Measurement Pilot Transmission element contains a
              Measurement Pilot Transmission field. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBssAvailableAdmCapa">
            <summary> BSS available admission capacity element. </summary>
            <remarks> The BSS Available Admission Capacity element contains a list
              of Available Admission Capacity fields at different User Priorities
              and Access Categories. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBssAcAccessDelay">
            <summary> BSS AC Access Delay element. </summary>
            <remarks> The BSS AC access delay element contains an Access Category
              Access Delay field. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTimeAdvertisement">
            <summary> Time advertisement element. </summary>
            <remarks> The Time Advertisement element specifies fields describing the
              source of time corresponding to a time standard, an external clock
              (external time source), an estimate of the offset between that time
              standard and the TSF timer, and an estimate of the standard deviation
              of the error in the offset estimate. This information is used by a
              receiving STA to align its own estimate of the time standard based on
              that of another STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRrmEnabledCapabilities">
            <summary> RM enabled capabilities element. </summary>
            <remarks> The RM Enabled Capabilities element signals support for radio
              measurements in a STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMultipleBssid">
            <summary> Multiple BSSID element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eid2040BssCoexistence">
            <summary> 20/40 BSS coexistence element. </summary>
            <remarks> The 20/40 BSS Coexistence element is used by STAs to exchange
              information that affects 20/40 BSS coexistence. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eid2040BssIntolerant">
            <summary> 20/40 BSS intolerant channel report element. </summary>
            <remarks> The 20/40 BSS Intolerant Channel Report element contains a
              list of channels on which a STA has found conditions that disallow the
              use of a 20/40 MHz BSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidOverlappingBssScanParams">
            <summary> Overlapping BSS scan parameters element. </summary>
            <remarks> The Overlapping BSS Scan Parameters element is used by an AP
              to indicate the values to be used by BSS members when performing OBSS
              scan operations. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRicDescriptor">
            <summary> RIC Descriptor element. </summary>
            <remarks> The RIC Descriptor element is used with an RDE during a fast
              BSS transition to negotiate resources that are not otherwise described
              by elements. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMmie">
            <summary> Management MIC element. </summary>
            <remarks> The Management MIC element (MME) provides message integrity
              and protects group addressed robust Management frames from forgery and
              replay. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidEventRequest">
            <summary> Event request element. </summary>
            <remarks> The Event Request element contains a request to the receiving
              STA to perform the specified event action. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidEventReport">
            <summary> Event report element. </summary>
            <remarks> The Event Report element is used by a STA to report an
              event. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDiagnosticRequest">
            <summary> Diagnostic request element. </summary>
            <remarks> The Diagnostic Request element contains a request that the
              receiving STA undertake the specified diagnostic action. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDiagnosticReport">
            <summary> Diagnostic report element. </summary>
            <remarks> The Diagnostic Report element contains a Diagnostic
              report. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidLocationParameters">
            <summary> Location parameters element. </summary>
            <remarks> The Location Parameters element is used for location
              service. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidNontransmittedBssidCapa">
            <summary> Nontransmitted BSSID capability element. </summary>
            <remarks> When transmitted by a DMG STA, the Nontransmitted BSSID
              Capability element includes the DMG BSS Control and the Nontransmitted
              BSSID DMG Capabilities Element fields. These fields are not present if
              this element is transmitted by non-DMG STAs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSsidList">
            <summary> SSID List element. </summary>
            <remarks> The SSID List field is a list of SSID elements for which the
              STA is requesting information. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMultipleBssidIndex">
            <summary> Multiple BSSID-Index element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidFmsDescriptor">
            <summary> FMS descriptor element. </summary>
            <remarks> The FMS Descriptor element defines information about group
              addressed BUs buffered at the AP. It is present in the Beacon frames
              when dot11FMSActivated is true. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidFmsRequest">
            <summary> FMS request element. </summary>
            <remarks> The FMS Request element defines information about the group
              addressed frames being requested by the non-AP STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidFmsResponse">
            <summary> FMS response element. </summary>
            <remarks> The FMS Response element provides information about the
              delivery of group addressed frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQosTrafficCapability">
            <summary> QoS traffic capability element. </summary>
            <remarks> The QoS Traffic Capability element provides information about
              types of traffic generated by a non-AP QoS STA and is used by a QoS AP
              to indicate the access categories of associated non-AP QoS
              STAs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBssMaxIdlePeriod">
            <summary> BSS max idle period element. </summary>
            <remarks> The BSS Max Idle Period element contains the time period a
              non-AP STA can refrain from transmitting frames to the AP before the
              AP disassociates the STA due to inactivity. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTfsReq">
            <summary> TFS request element. </summary>
            <remarks> The TFS Request element defines information about the traffic
              filters that are enabled at the AP for the requesting non-AP
              STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTfsResp">
            <summary> TFS response element. </summary>
            <remarks> The TFS Response element defines information about the status
              of the requested filtering parameters. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidWnmSleep">
            <summary> WNM sleep mode element. </summary>
            <remarks> The WNM Sleep Mode element is used to enter and exit the WNM
              sleep mode. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTimBroadcastRequest">
            <summary> TIM broadcast request element. </summary>
            <remarks> The TIM Broadcast Request element contains information about
              the periodic TIM broadcast being requested by the non-AP
              STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTimBroadcastResponse">
            <summary> TIM broadcast response element. </summary>
            <remarks> The TIM Broadcast Response element contains information about
              the periodic TIM broadcast by the AP. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidCollocatedInterferenceReport">
            <summary> Collocated interference report element. </summary>
            <remarks> The Collocated Interference Report element contains some
              characteristics of the reported collocated interference. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChannelUsage">
            <summary> Channel usage element. </summary>
            <remarks> The Channel Usage element defines the channel usage
              information for BSSs that are not infrastructure BSSs or an off
              channel TDLS direct link. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTimeZone">
            <summary> Time zone element. </summary>
            <remarks> The Time Zone element contains the local time zone of the
              AP. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmsRequest">
            <summary> DMS request element. </summary>
            <remarks> The DMS Request element defines information about the group
              addressed frames to be transmitted as individual addressed
              frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmsResponse">
            <summary> DMS response element. </summary>
            <remarks> The DMS Response element provides the status information about
              the requested group addressed frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidLinkId">
            <summary> Link identifier element. </summary>
            <remarks> The Link Identifier element contains information that
              identifies a TDLS direct link. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidWakeupSchedule">
            <summary> Wakeup schedule element. </summary>
            <remarks> The Wakeup Schedule element contains information regarding the
              periodic wakeup schedule for TDLS peer PSM. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChannelSwitchTiming">
            <summary> Channel switch timing element. </summary>
            <remarks> The Channel Switch Timing element contains information
              regarding the channel switch timing. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPtiControl">
            <summary> PTI control element. </summary>
            <remarks> The PTI Control element contains information regarding the
              traffic buffered at the TPU buffer STA for the TPU sleep STA at the
              time a TDLS Peer Traffic Indication frame is transmitted by the TPU
              buffer STA. The element is optionally included in the TDLS Peer
              Traffic Indication frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTpuBufferStatus">
            <summary> TPU buffer status element. </summary>
            <remarks> The TPU Buffer Status element contains information regarding
              the traffic buffered at the TPU buffer STA for the TPU sleep STA at
              the time a TDLS Peer Traffic Indication frame is transmitted by the
              TPU buffer STA. The element is included in the TDLS Peer Traffic
              Indication frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidInterworking">
            <summary> Interworking element. </summary>
            <remarks> The Interworking element contains information about the
              interworking service capabilities of a STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAdvProto">
            <summary> Advertisement protocol element. </summary>
            <remarks> The Advertisement Protocol element contains information that
              identifies a particular advertisement protocol and its corresponding
              Advertisement Control. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExpeditedBandwidthReq">
            <summary> Expedited bandwidth request element. </summary>
            <remarks> The Expedited Bandwidth Request element is transmitted from a
              non-AP STA to an AP in an ADDTS Request frame containing a TSPEC
              element and provides usage information for the bandwidth
              request. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQosMapSet">
            <summary> QoS map element. </summary>
            <remarks> The QoS Map element is transmitted from an AP to a non-AP STA
              in a (Re)Association Response frame or a QoS Map Configure frame and
              provides the mapping of higher layer quality-of-service constructs to
              User Priorities defined by transmission of Data frames in this
              standard. This element maps the higher layer priority from the DSCP
              field used with the Internet Protocol to User Priority as defined by
              this standard. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRoamingConsortium">
            <summary> Roaming consortium element. </summary>
            <remarks> The Roaming Consortium element contains information
              identifying the roaming consortium and/or SSP whose security
              credentials can be used to authenticate with the AP transmitting this
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidEmergencyAlertId">
            <summary> Emergency alert identifier element. </summary>
            <remarks> The Emergency Alert Identifier element provides a hash to
              identify instances of the active EAS messages that are currently
              available from the network. The hash allows the non-AP STA to assess
              whether an EAS message advertised by an AP has been previously
              received and therefore whether it is necessary to download from the
              network. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeshConfig">
            <summary> Mesh configuration element. </summary>
            <remarks> The Mesh Configuration element is used to advertise mesh
              services. It is contained in Beacon frames and Probe Response frames
              transmitted by mesh STAs and is also contained in Mesh Peering Open
              and Mesh Peering Confirm frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeshId">
            <summary> Mesh ID element. </summary>
            <remarks> The Mesh ID element is used to advertise the identification of
              an MBSS. The Mesh ID element is transmitted in Mesh Peering Open
              frames, Mesh Peering Confirm frames, Mesh Peering Close frames, Beacon
              frames, and Probe Request and Response frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeshLinkMetricReport">
            <summary> Mesh link metric report element. </summary>
            <remarks> The Mesh Link Metric Report element is transmitted by a mesh
              STA to a neighbor peer mesh STA to indicate the quality of the link
              between the transmitting mesh STA and the neighbor peer mesh
              STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidCongestionNotification">
            <summary> Congestion notification element. </summary>
            <remarks> The Congestion Notification element is used to indicate the
              congestion status of the mesh STA per mesh destination and AC, and the
              duration for which the STA expects the congestion to last. The
              Congestion Notification element is included in Congestion Control
              Notification frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPeerMgmt">
            <summary> Mesh peering management element. </summary>
            <remarks> The Mesh Peering Management element is used to manage a mesh
              peering with a neighbor mesh STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeshChannelSwitchParameters">
            <summary> Mesh channel switch parameters element. </summary>
            <remarks> The Mesh Channel Switch Parameters element is used together
              with Channel Switch Announcement element and Extended Channel Switch
              Announcement element by a mesh STA to advertise to other mesh STAs
              when it is changing to a new operating channel and/or operating
              class. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMeshAwakeWindow">
            <summary> Mesh awake window element. </summary>
            <remarks> The Mesh Awake Window element is present in DTIM Beacon frames
              and is optionally present in Beacon and Probe Response
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBeaconTiming">
            <summary> Beacon timing element. </summary>
            <remarks> The Beacon Timing element is used to advertise the beacon
              timing information of neighbor STAs (mesh STAs, IBSS APs, or IBSS
              STAs). </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMccaopSetupRequest">
            <summary> MCCAOP setup request element. </summary>
            <remarks> The MCCAOP Setup Request element is used to make an MCCAOP
              reservation. This element is transmitted in individually addressed
              MCCA Setup Request frames or in group addressed MCCA Setup Request
              frames. The mesh STA transmitting the MCCA Setup Request element is
              the MCCAOP owner of the MCCAOPs that will be scheduled with this
              reservation setup request. The receivers of the MCCAOP Setup Request
              frame are the MCCAOP responders. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMccaopSetupReplay">
            <summary> MCCAOP setup reply element. </summary>
            <remarks> The MCCAOP Setup Reply element is used to reply to an MCCAOP
              Setup Request. This element is transmitted in individually addressed
              MCCA Setup Reply frames. The mesh STA transmitting the MCCA Setup
              Reply element is the MCCAOP responder of the MCCAOPs scheduled in this
              reservation setup. The receiver of the MCCAOP Setup Reply is the
              MCCAOP owner. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMccaopAdvertisement">
            <summary> MCCAOP advertisement element. </summary>
            <remarks> The MCCAOP Advertisement element is used by a mesh STA to
              advertise MCCAOP reservations to its neighbors. This element is
              transmitted in MCCA Advertisement frames and optionally present in
              Beacon frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMccaopTeardown">
            <summary> MCCAOP teardown element. </summary>
            <remarks> The MCCAOP Teardown element is used to announce the teardown
              of an MCCAOP reservation. The MCCAOP Teardown element is transmitted
              in individually addressed MCCA Teardown frames or in group addressed
              MCCA Teardown frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidGann">
            <summary> GANN element. </summary>
            <remarks> The GANN (gate announcement) element is used for announcing
              the presence of a mesh gate in the MBSS. The GANN element is
              transmitted in a Gate Announcement frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRann">
            <summary> RANN element. </summary>
            <remarks> The RANN (root announcement) element is used for announcing
              the presence of a mesh STA configured as root mesh STA with
              dot11MeshHWMProotMode set to rann (4). RANN elements are sent out
              periodically by such a root mesh STA. The RANN element is transmitted
              in an HWMP Mesh Path Selection frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtCapab">
            <summary> Extended capabilities element. </summary>
            <remarks> The Extended Capabilities element carries information about
              the capabilities of a STA that augment the capabilities specified in
              the Capability Information field. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPreq">
            <summary> PREQ element. </summary>
            <remarks> The PREQ (path request) element is used for discovering a path
              to one or more target mesh STAs, maintaining a path (optional),
              building a proactive (reverse) path selection tree to the root mesh
              STA, and confirming a path to a target mesh STA (optional). The PREQ
              element is transmitted in an HWMP Mesh Path Selection
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPrep">
            <summary> PREP element. </summary>
            <remarks> The PREP (path reply) element is used to establish a forward
              path to a target and to confirm that a target is reachable. The PREP
              element is issued in response to a PREQ element. The PREP element is
              transmitted in an HWMP Mesh Path Selection frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPerr">
            <summary> PERR element. </summary>
            <remarks> The PERR (path error) element is used for announcing an
              unreachable destination. The PERR element is transmitted in an HWMP
              Mesh Path Selection frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPxu">
            <summary> PXU element. </summary>
            <remarks> The PXU (proxy update) element is used to inform the
              destination mesh STA of the proxy information at the originator mesh
              STA. The PXU element is transmitted in a Proxy Update
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPxuc">
            <summary> PXUC element. </summary>
            <remarks> The PXUC (proxy update confirmation) element is used to
              confirm the previously received PXU. The PXUC element is transmitted
              in a Proxy Update Confirmation frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAmpe">
            <summary> Authenticated mesh peering exchange element. </summary>
            <remarks> The Authenticated Mesh Peering Exchange element includes
              information needed to perform the authentication sequence during an
              authenticated mesh peering exchang. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMic">
            <summary> MIC element. </summary>
            <remarks> The MIC element provides message integrity to mesh peering
              Management frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDestinationUri">
            <summary> Destination URI element. </summary>
            <remarks> The Destination URI element contains URI and ESS Detection
              Interval values from the requesting STA that the responding STA can be
              used to deliver Event or Diagnostic Report frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidUApsdCoex">
            <summary> U-APSD coexistence element. </summary>
            <remarks> The U-APSD coexistence provides the duration of requested
              transmission during a U-APSD service period. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgWakeupSchedule">
            <summary> DMG wakeup schedule element. </summary>
            <remarks> The DMG Wakeup Schedule element is used to communicate the
              wakeup schedule (WS) of DMG STAs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtendedSchedule">
            <summary> Extended Schedule element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidStaAvailability">
            <summary> STA availability element. </summary>
            <remarks> The STA Availability element is used by a non-AP and non-PCP
              STA to inform an AP or PCP about the STA availability during the
              subsequent CBAPs and to indicate participation in the dynamic
              allocation of service periods. The AP or PCP uses the STA Availability
              element to inform the non-AP and non-PCP STAs of other STAs
              availability during subsequent CBAPs and participation of other STAs
              in the Dynamic allocation of service periods. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgTspec">
            <summary> DMG TSPEC element. </summary>
            <remarks> The DMG TSPEC element is present in the ADDTS Request frame
              sent by a non-AP and non-PCP DMG STA and contains the set of
              parameters needed to create or modify an airtime allocation. The DMG
              TSPEC element is also present in the ADDTS Response frame sent by a
              DMG AP or PCP and reflects the parameters, possibly modified, by which
              the allocation was create. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidNextDmgAti">
            <summary> Next DMG ATI element. </summary>
            <remarks> The Next DMG ATI element indicates the earliest start time for
              the next ATI in a subsequent beacon interval. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgCapabilities">
            <summary> DMG capabilities element. </summary>
            <remarks> The DMG Capabilities element contains a STA identifier and
              several fields that are used to advertise the support of optional DMG
              capabilities of a DMG STA. The element is present in Association
              Request, Association Response, Reassociation Request, Reassociation
              Response, Probe Request and Probe Response frames and can be present
              in DMG Beacon, Information Request, and Information Response
              frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgOperation">
            <summary> DMG operation element. </summary>
            <remarks> The operational parameters of a BSS provided by the AP or PCP
              are determined by the DMG Operation element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgBssParameterChange">
            <summary> DMG BSS parameter change element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgBeamRefinement">
            <summary> DMG beam refinement element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChannelMeasurementFeedback">
            <summary> Channel measurement feedback element. </summary>
            <remarks> The Channel Measurement Feedback element is used to carry the
              channel measurement feedback data that the STA has measured on the
              TRN-T fields of the BRP packet that contained the Channel Measurement
              request, to provide a list of sectors identified during a sector
              sweep, or during beam combination. The format and size of the Channel
              Measurement Feedback element are defined by the parameter values
              specified in the accompanying DMG Beam Refinement element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAwakeWindow">
            <summary> Awake window element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMultiBand">
            <summary> Multi-band element. </summary>
            <remarks> The Multi-band element indicates that the STA transmitting
              this element (the transmitting STA) is within a multi-band device
              capable of operating in a frequency band or operating class or channel
              other than the one in which this element is transmitted and that the
              transmitting STA is able to accomplish a session transfer from the
              current channel to a channel using another STA in the same device, in
              the other or same band. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAddbaExtension">
            <summary> ADDBA Extension element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidNextPcpList">
            <summary> Next PCP list element. </summary>
            <remarks> The Next PCP List element contains one or more AID of NextPCP
              <c>i</c> fields. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidPcpHandover">
            <summary> PCP handover element. </summary>
            <remarks> The PCP Handover element is used to indicate which STA becomes
              the new PCP following an explicit or implicit handover
              procedure. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgLinkMargin">
            <summary> DMG link margin element. </summary>
            <remarks> The DMG Link Margin element is included in a Link Measurement
              Report frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSwitchingStream">
            <summary> Switching stream element. </summary>
            <remarks> The Switching Stream element indicates the streams that the
              transmitting STA requests to be switched to a new frequency band or
              operating class or channel. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidSessionTransition">
            <summary> Session transition element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDynamicTonePairingReport">
            <summary> Dynamic tone pairing (DTP) report element. </summary>
            <remarks> The DTP Report element is included in the DTP Response
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidClusterReport">
            <summary> Cluster report element. </summary>
            <remarks> The Cluster Report element is included Action frames, such as
              Announce and Information Response frames, transmitted to the AP or PCP
              of the BSS. Because the Length field supports only 255 octets of
              information in an element, the STA can split the content of the
              Extended Schedule Element field in different Cluster Report
              elements. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRelayCapabilities">
            <summary> Relay capabilities element. </summary>
            <remarks> A STA that intends to participate in relay operation
              advertises its capabilities through the Relay Capabilities
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidRelayTransferParamSet">
            <summary> Relay transfer parameter set element. </summary>
            <remarks> A source REDS that intends to transfer frames via an RDS
              advertises the parameters for the relay operation with the
              transmission of a Relay Transfer Parameter Set element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidBeamLinkMaintenance">
            <summary> BeamLink maintenance element. </summary>
            <remarks> The BeamLink Maintenance element is included in Action frames,
              such as Probe, Announce and the Information Request and Response
              frames, transmitted between a non-AP and non-PCP DMG STA and a DMG AP
              or PCP. The element is included in the Probe and Information Request
              and Response frames transmitted between non-AP and non-PCP DMG
              STAs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMultipleMacSublayers">
            <summary> Multiple MAC sublayers (MMS) element. </summary>
            <remarks> The MMS element is included in Action frames, such as Probe
              Request, Association Request, Information Request, Announce, and
              Information Response frames, transmitted to the peer STA and the AP or
              PCP of the BSS. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidUPid">
            <summary> U-PID element. </summary>
            <remarks> The Upper Layer Protocol Identification (U-PID)
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDmgLinkAdaptationAck">
            <summary> DMG link adaptation acknowledgment element. </summary>
            <remarks>  The DMG Link Adaptation Acknowledgment element is carried in
              the Optional Subelements field of the Link Measurement Report
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidMccaopAdvertisementOverview">
            <summary> MCCAOP advertisement overview element. </summary>
            <remarks> The MCCAOP Advertisement Overview element is used by a mesh
              STA to advertise its MCCA Information and information about its MCCAOP
              Advertisement elements, representing its MCCAOP advertisement set,
              to its neighbors. This element is transmitted in MCCA Advertisement
              frames and optionally present in Beacon frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQuietPeriodRequest">
            <summary> Quiet period request element. </summary>
            <remarks> The Quiet Period Request element defines a periodic sequence
              of quiet intervals that the requester AP requests the responder AP to
              schedule. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQuietPeriodResponse">
            <summary> Quiet period response element. </summary>
            <remarks> The Quiet Period Response element defines the feedback
              information from the AP that received the Quiet Period Request
              element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQmfPolicy">
            <summary>  Quality-of-Service management frame policy
              element. </summary>
            <remarks> The Quality-of-Service Management Frame (QMF) Policy element
              defines a QMF access category mapping QACM) of Management frames and
              is used to advertise and exchange QMF policy between STAs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidEcapcPolicy">
            <summary> ECAPC policy element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidClusterTimeOffset">
            <summary> Cluster time offset element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidIntraAccessCategoryPriority">
            <summary> Intra-access category priority element. </summary>
            <remarks> The Intra-Access Category Priority element provides
              information from a non-AP STA to an AP on the relative priorities of
              streams within an AC. This element is optionally present in ADDTS
              Request, QoS Map Configure, or SCS Request frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidScsDescriptor">
            <summary> SCS descriptor element. </summary>
            <remarks> The SCS Descriptor element defines information about the
              stream. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQLoadReport">
            <summary> QLoad report element. </summary>
            <remarks> The QLoad Report element contains the set of parameters
              necessary to support OBSS management. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidHccaTxopUpdateCount">
            <summary> HCCA TXOP update count element. </summary>
            <remarks> The HCCA TXOP Update Count element is used by an AP to
              advertise its change in TXOP schedule. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidHigherLayerStreamId">
            <summary> Higher layer stream ID element. </summary>
            <remarks> The Higher Layer Stream ID element identifies a stream from a
              higher layer protocol. This element is used to bind messages that are
              exchanged in order to complete a procedure, e.g., messages exchanged
              in an AP-initiated TS setup procedure. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidGcrGroupAddress">
            <summary> GCR group address element. </summary>
            <remarks> The GCR Group Address element defines information about group
              addressed frames to be transmitted using the GCR service. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAntennaSectorIdPattern">
            <summary> Antenna sector ID pattern element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidVhtCap">
            <summary> VHT capabilities element. </summary>
            <remarks> The VHT Capabilities element contains a number of fields that
              are used to advertise the VHT capabilities of a VHT STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidVhtOperation">
            <summary> VHT operation element. </summary>
            <remarks> The operation of VHT STAs in the BSS is controlled by the HT
              Operation element and the VHT Operation element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtendedBssLoad">
            <summary> Extended BSS load element. </summary>
            <remarks> The Extended BSS Load element reported by the AP contains
              information on MIMO spatial stream underutilization and bandwidth
              utilization. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidWideBwChSwitch">
            <summary> Wide bandwidth channel switch element. </summary>
            <remarks> The Wide Bandwidth Channel Switch element is included in
              Channel Switch Announcement frames Extended Channel Switch
              Announcement frames, and TDLS Channel Switch Request
              frames. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTransmitPowerEnvelop">
            <summary> Transmit power envelope element. </summary>
            <remarks> The Transmit Power Envelope element conveys the local maximum
              transmit power for various transmission bandwidths. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidChannelSwitchWrapper">
            <summary> Channel switch wrapper element. </summary>
            <remarks> The Channel Switch Wrapper element contains subelements that
              indicate characteristics of the BSS after a channel switch. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidAid">
            <summary> AID element. </summary>
            <remarks> The AID element includes the AID assigned by an AP during
              association that represents the 16-bit ID of a STA. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidQuietChannel">
            <summary> Quiet channel element. </summary>
            <remarks> The Quiet Channel element is used to indicate that the
              secondary 80 MHz channel of a VHT BSS is to be quieted during a quiet
              interval, and, in an infrastructure BSS, to indicate if the primary
              80 MHz channel of a VHT BSS can be used during the quiet interval. A
              quiet interval is established using either a Quiet element or, in an
              infrastructure BSS, the Quiet Channel element if its AP Quiet Mode
              field is equal to 1. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidOperatingModeNotification">
            <summary> Operating mode notification element. </summary>
            <remarks> The Operating Mode Notification element is used to notify STAs
              that the transmitting STA is changing one or more of its operating
              channel width, the maximum number of spatial streams it can receive,
              and its LDPC receive preference. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidUpsim">
            <summary> UPSIM element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidReducedNeightborReport">
            <summary> Reduced neighbor report element. </summary>
            <remarks> The Reduced Neighbor Report element contains channel and other
              information related to neighbor APs. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidTvhtOperation">
            <summary> TVHT operation element. </summary>
            <remarks> The operation of TVHT STAs in the BSS is controlled by the
              TVHT Operation element. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidDeviceLocation">
            <summary> Device location element. </summary>
            <remarks> A Device Location element includes the location configuration
              information (LCI), which contains latitude, longitude, and altitude
              information. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidWhiteSpaceMap">
            <summary> White space map element. </summary>
            <remarks> The White Space Map element includes available radio frequency
              information obtained from a GDB. The format of the WSM Information
              field is determined by the value of the WSM Type field. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidFtmParameters">
            <summary> Fine timing measurement parameters element. </summary>
            <remarks> The Fine Timing Measurement Parameters element contains a
              number of fields that are used to advertise the requested or allocated
              FTM configuration from one STA to another. The Fine Timing Measurement
              Parameters element is included in the initial Fine Timing Measurement
              Request frame and the initial Fine Timing Measurement
              frame. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidVendorSpecific">
            <summary> Vendor specific element. </summary>
            <remarks> The Vendor Specific element is used to carry information not
              defined in this standard within a single defined format, so that
              reserved element IDs are not usurped for nonstandard purposes and so
              that interoperability is more easily achieved in the presence of
              nonstandard information. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElementId.eidExtension">
            <summary> Extension element. </summary>
            <remarks> Use Element ID Extension field. </remarks>
        </member>
        <member name="T:wclWiFi.wclWiFiInformationElement">
            <summary> The record contains one information element. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElement.Id">
            <summary> The information element ID. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInformationElementId" />
        </member>
        <member name="F:wclWiFi.wclWiFiInformationElement.Data">
            <summary> The information element raw data. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiInterface">
            <summary> The <c>wclWiFiInterface</c> class represents the WLAN
              interface and allows an application to control the Wireless LAN
              interface. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.#ctor(System.Guid)">
            <summary> Creates a new <c>wclWiFiInterface</c> object. </summary>
            <param name="Id"> The interface's ID. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.Finalize">
            <summary> Frees the <c>wclWiFiInterface</c> object. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.Close">
            <summary> Closes the WLAN interface and releases allocated WLAN
              resources. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.Open">
            <summary> Opens the WLAN interface and allocates the WLAN
              resources. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> Before an application can use any of the
              <c>wclWiFiInterface</c> object's methods it must open the
              interface. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetAuthCipherPairs(System.Boolean,wclWiFi.wclWiFiAuthCipherPair[]@)">
            <summary> Reads the supported authentication and cipher
              pairs. </summary>
            <param name="AdHoc"> If this parameter set to <c>True</c> the method
              returns the pairs for the ad hoc mode. Otherwise the method returns
              pairs for the infrastructure mode. </param>
            <param name="Pairs"> The method fills this parameter with the array of
              the supported authentication and cipher pairs. If no pairs were found
              the <c>Pairs</c> parameter will set to <c>null</c>. </param>
            <returns> If the method succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The caller is responsible for clear memory allocated for the
              <c>Pairs</c> dynamic array. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiAuthCipherPair" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetAutoConfState(System.Boolean@)">
            <summary> Reads the interface's auto configuration setting. </summary>
            <param name="Enabled"> The auto configuration state. If <c>True</c> then
              the auto configuration is enabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetBackgroundScanState(System.Boolean@)">
            <summary> Reads the interface's blackground scan setting. </summary>
            <param name="Enabled"> The background scan state. If <c>True</c> then
              the background scan is enabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetBssType(wclWiFi.wclWiFiBssType@)">
            <summary> Reads the interface's BSS type. </summary>
            <param name="BssType"> The BSS type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetCapability(wclWiFi.wclWiFiInterfaceCapability@)">
            <summary> Reads the interface's capabilities. </summary>
            <param name="Capability"> A
              <see cref="T:wclWiFi.wclWiFiInterfaceCapability" /> record
              which will be filled with the interface's capabilities. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetCertifiedSafeMode(System.Boolean@)">
            <summary> Reads the interface's certified safe mode support. </summary>
            <param name="Supported"> The certified safe mode support. <c>True</c> if
              the certified safe mode is supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetChannel(System.UInt32@)">
            <summary> Reads the interface's channel number. </summary>
            <param name="Channel"> The channel number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetConnectionAttributes(wclWiFi.wclWiFiConnectionAttributes@)">
            <summary> Read the interface's connection attributes. </summary>
            <param name="Attributes"> The connection attributes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiConnectionAttributes" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetCountyOrRegions(System.String[]@)">
            <summary> Reads the WiFi interface supported Countries or Regions
              list. </summary>
            <param name="List"> The supported Countries and Regions List. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The caller is responsible for clear memory allocated for the
              <c>List</c> dynamic array. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetHostedNetworkCapable(System.Boolean@)">
            <summary> Reads the WiFi Hosted Network capability of the
              interface. </summary>
            <param name="Supported"> The Hosted network support. <c>True</c> if the
              Hosted Network is supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetManagementFrameProtectionCapable(System.Boolean@)">
            <summary> Reads the WiFi Management Frame Protection capability of the
              interface. </summary>
            <param name="Supported"> The Management Frame Protection support.
             <c>True</c> if the Management Frame Protection is supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetMediaStreaming(System.Boolean@)">
            <summary> Reads the interface's media streaming setting. </summary>
            <param name="Enabled"> The media streaming state. <c>True</c> if the
              media streaming is enabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetOperationMode(wclWiFi.wclWiFiOperationMode@)">
            <summary> Reads the interface's current operation mode. </summary>
            <param name="Mode"> The WiFi interface's current operation
              mode. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetRadioState(wclWiFi.wclWiFiPhyRadioState[]@)">
            <summary> Reads the interface's radio states for each supported
              PHY. </summary>
            <param name="States"> The array of radios states. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The caller is responsible for clear memory allocated for the
              <c>States</c> dynamic array. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiPhyRadioState" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetRssi(System.Int32@)">
            <summary> Reads the RSSI value. </summary>
            <param name="Rssi"> The RSSI value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetSafeMode(System.Boolean@)">
            <summary> Reads the interface's safe mode support. </summary>
            <param name="Supported"> The safe mode support. <c>True</c> if the safe
              mode is supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetSecondarySta(System.Boolean@)">
            <summary> Querying dual-STA synchronized connections state. </summary>
            <param name="Enabled"> A <c>Boolean</c> value indicating whether the
              primary and secondary STA connections are synchronized. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> To determine whether an adapter will automatically connect
              over the secondary STA interface following a connection over the
              primary STA interface, your application can call this
              method. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetState(wclWiFi.wclWiFiInterfaceState@)">
            <summary> Reads the interface's state. </summary>
            <param name="State"> The interface state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceState" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetAutoConfState(System.Boolean)">
            <summary> Sets the interface's auto configuration setting. </summary>
            <param name="Enable"> If <c>True</c> then the auto configuration will be
              enabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetBackgroundScanState(System.Boolean)">
            <summary> Sets the interface's blackground scan setting. </summary>
            <param name="Enable"> If <c>True</c> then the background scan will be
              enabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetBssType(wclWiFi.wclWiFiBssType)">
            <summary> Sets the interface's BSS type. </summary>
            <param name="BssType"> The BSS type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetMediaStreaming(System.Boolean)">
            <summary> Sets the interface's media streaming setting. </summary>
            <param name="Enable"> <c>True</c> to enable then media
              streaming. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetOperationMode(wclWiFi.wclWiFiOperationMode)">
            <summary> Sets the interface's operation mode. </summary>
            <param name="Mode"> The WiFi interface's operation mode.  </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetRadioState(wclWiFi.wclWiFiPhyRadioState)">
            <summary> Sets the software radio state of a specific physical layer
              (PHY) for the interface. </summary>
            <param name="State"> The radio state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiPhyRadioState" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetSecondarySta(System.Boolean)">
            <summary> Enables or disables secondary STA on the given
              interface. </summary>
            <param name="Enable"> Set this parameter to <c>true</c> to enable
              a secondary STA on the given interface. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetCurrentIp(System.Boolean@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary> Gets the current IP address of the interface. </summary>
            <param name="Static"> <c>True</c> if the interface uses static IP
              configuration. <c>False</c> if the interface uses DHCP. </param>
            <param name="Address"> The current IP address. </param>
            <param name="Mask"> The subnet mask. </param>
            <param name="Gateway"> The default gateway address. </param>
            <param name="Dns1"> The first DNS server address. </param>
            <param name="Dns2"> The second DNS server address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.GetIpSettings(System.Boolean@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary> Gets current IP settings. </summary>
            <param name="Static"> <c>True</c> if the interface uses static IP
              configuration. <c>False</c> if the interface uses DHCP. </param>
            <param name="Address"> The current IP address. </param>
            <param name="Mask"> The subnet mask. </param>
            <param name="Gateway"> The default gateway address. </param>
            <param name="Dns1"> The first DNS server address. </param>
            <param name="Dns2"> The second DNS server address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.SetStaticIp(System.String,System.String,System.String,System.String,System.String)">
            <summary> Sets current IP settings as static IP configuration. </summary>
            <param name="Address"> The current IP address. </param>
            <param name="Mask"> The subnet mask. </param>
            <param name="Gateway"> The default gateway address. </param>
            <param name="Dns1"> The first DNS server address. </param>
            <param name="Dns2"> The second DNS server address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.EnableDhcp">
            <summary> Enables DHCP configuration for the interface. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.TurnOff">
            <summary> Turns a WiFi Interface off. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.TurnOn">
            <summary> Turns a WiFi Interface on. </summary>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.EnumInterfaces(wclWiFi.wclWiFiInterfaceData[]@)">
            <summary> Enumerate secondary interfaces of the current WLAN
              adapter. </summary>
            <param name="Ifaces"> The dynamic array of the
              <see cref="T:wclWiFi.wclWiFiInterfaceData" /> structures which receives the
              returned list of wireless LAN interfaces. </param>
            <returns> <para> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </para>
              <para> If the function fails, the return value may be one of the WCL
              error codes. </para> </returns>
            <remarks> An application is responsible for releasing a memory
              allocated for the <c>Ifaces</c> dynamic array. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceData" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.FrequencyToBand(System.UInt32)">
            <summary> The method converts the given frequency to the WLAN
              band. </summary>
            <param name="Frequency"> The central frequency. </param>
            <returns> The method returns the WLAN band. </returns>
            <seealso cref="T:wclWiFi.wclWiFiBand" />
        </member>
        <member name="M:wclWiFi.wclWiFiInterface.FrequencyToChannel(System.UInt32)">
            <summary> The method converts given central frequency to the WLAN
              channel number. </summary>
            <param name="Frequency"> The central frequency. </param>
            <returns> If the <c>Frequency</c> if a valid central frequency the method
              returns the channel number. If the central frequency is invalid or
              unknown the method returns 0. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiInterface.Active">
            <summary> Gets the interface active state. </summary>
            <value> <c>True</c> if the interface is opened. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiInterface.Id">
            <summary> Gets the WLAN interface's ID. </summary>
            <value> The WLAN interface's ID. </value>
        </member>
        <member name="T:wclWiFi.wclWiFiInterfaceType">
            <summary> Specifies the wireless interface type. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceType.itEmulated">
            <summary> An emulated 802.11 interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceType.itNative">
            <summary> A native 802.11 interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceType.itInvalid">
            <summary> The interface specified is invalid. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiInterfaceState">
            <summary> Indicates the state of an interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isNotReady">
            <summary> The interface is not ready to operate. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isConnected">
            <summary> The interface is connected to a network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isAdHocFormed">
            <summary> The interface is the first node in an ad hoc network. No peer
              has connected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isDisconnecting">
            <summary> The interface is disconnecting from the current
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isDisconnected">
            <summary> The interface is not connected to any network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isAssociating">
            <summary> The interface is attempting to associate with a
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isDiscovering">
            <summary> Auto configuration is discovering the settings for the
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceState.isAuthenticating">
            <summary> The interface is in the process of authenticating. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiBand">
            <summary> The enumeration defines WiFi bands. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wb24GHz">
            <summary> The 2.4Ghz band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wb365GHz">
            <summary> The 3.65GHz band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wb5GHz">
            <summary> The 5GHz band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wb6GHz">
            <summary> The 6GHz band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wb60GHz">
            <summary> The 60GHz band. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiBand.wbUnknown">
            <summary> The unknown band. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiAuthCipherPair">
            <summary> Defines a pair of 802.11 authentication and cipher algorithms
              that can be enabled at the same time on the 802.11 station. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthCipherPair.AuthAlgorithm">
            <summary> An authentication algorithm as specified by a
              <see cref="T:wclWiFi.wclWiFiAuthAlgorithm" /> value. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAuthCipherPair.CipherAlgorithm">
            <summary> A cipher algorithm as specified by a
              <see cref="T:wclWiFi.wclWiFiCipherAlgorithm" /> value. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiInterfaceCapability">
            <summary> Contains information about the capabilities of the
              WLAN interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceCapability.IfaceType">
            <summary> Indicates the type of the interface. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceType" />
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceCapability.Dot11dSupport">
            <summary> Indicates whether 802.11d is supported by the interface.
              If <c>True</c>, 802.11d is supported. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceCapability.MaxDesiredSsidListSize">
            <summary> The maximum size of the SSID list supported by this
               interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceCapability.MaxDesiredBssidListSize">
            <summary> The maximum size of the basic service set (BSS) identifier
              list supported by this interface. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiInterfaceCapability.SupportedPhys">
            <summary> A set of <see cref="T:wclWiFi.wclWiFiPhy" /> values that specify the
              supported PHY types. </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="T:wclWiFi.wclWiFiAssociationAttributes">
            <summary> Contains association attributes for a connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.Ssid">
            <summary> The SSID of the association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.BssType">
            <summary> The value specifies whether the network is infrastructure or
              ad hoc. </summary>
            <seealso cref="T:wclWiFi.wclWiFiBssType" />
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.BssId">
            <summary> The BSSID of the association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.Phy">
            <summary> The physical type of the association. </summary>
            <seealso cref="T:wclWiFi.wclWiFiPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.SignalQuality">
            <summary> A percentage value that represents the signal quality of the
              network. Contains a value between 0 and 100. A value of 0 implies an
              actual RSSI signal strength of -100 dbm. A value of 100 implies an
              actual RSSI signal strength of -50 dbm. You can calculate the RSSI
              signal strength value for <c>SignalQuality</c> values between 1 and 99
              using linear interpolation. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.RxRate">
            <summary> The receiving rate of the association. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiAssociationAttributes.TxRate">
            <summary> The transmission rate of the association. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiSecurityAttributes">
            <summary> Defines the security attributes for a wireless
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSecurityAttributes.SecurityEnabled">
            <summary> Indicates whether security is enabled for this
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSecurityAttributes.OneXEnabled">
            <summary> Indicates whether 802.1X is enabled for this
              connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSecurityAttributes.AuthCiperPair">
            <summary> Authentication and cipher algorithms used for this
              connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAuthCipherPair" />
        </member>
        <member name="T:wclWiFi.wclWiFiConnectionAttributes">
            <summary> Defines the attributes of a wireless connection. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionAttributes.State">
            <summary> Indicates the state of the interface. </summary>
            <seealso cref="T:wclWiFi.wclWiFiInterfaceState" />
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionAttributes.Mode">
            <summary> Indicates the mode of the connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiConnectionMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionAttributes.ProfileName">
            <summary> The name of the profile used for the connection. Profile names
              are case-sensitive. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionAttributes.Association">
            <summary> The attributes of the association. </summary>
            <seealso cref="T:wclWiFi.wclWiFiAssociationAttributes" />
        </member>
        <member name="F:wclWiFi.wclWiFiConnectionAttributes.Security">
            <summary> The security attributes of the connection. </summary>
            <seealso cref="T:wclWiFi.wclWiFiSecurityAttributes" />
        </member>
        <member name="T:wclWiFi.wclMobileHotspot">
            <summary> The class allows to control Mobile Hotspot feature on Windows 10
              platform. </summary>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.DoClosed">
            <summary> Fires the <c>OnClosed</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.DoOpened">
            <summary> Fires the <c>OnOpened</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.#ctor">
            <summary> Creates a Mobile Hotspot component. </summary>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.Finalize">
            <summary> Frees the component. </summary>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.Close">
            <summary> Closes the Mobile Hotspot API and uninitializes the
              component. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method does not change current Mobile Hotspot state.
              The method simple releases the Mobile Hotspot API. </remarks>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.Open">
            <summary> Opens the Mobile Hotspot API and initializes the
              component. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method does not change current Mobile Hotspot state.
              The method simple initializes the Mobile Hotspot API. </remarks>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.Start">
            <summary> Starts the Mobile Hotspot. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.Stop">
            <summary> Stops the Mobile Hotspot. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetState(wclWiFi.wclMobileHotspotState@)">
            <summary> Gets the current Mobile Hotspot state. </summary>
            <param name="State"> If the function completed with success on output
              the parameter contains the current Mobile Hotspot state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclMobileHotspotState" />
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetSsid(System.String@)">
            <summary> Gets the AP SSID. </summary>
            <param name="Ssid"> If the method completed with success on output
              contains the current SSID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.SetSsid(System.String)">
            <summary> Sets the AP SSID. </summary>
            <param name="Ssid"> The new SSID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetPassphrase(System.String@)">
            <summary> Gets the AP passphrase. </summary>
            <param name="Passphrase"> If the method completed with success on output
              contains the current passphrase. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.SetPassphrase(System.String)">
            <summary> Sets the AP passphrase. </summary>
            <param name="Passphrase"> The new passphrase. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.IsBandSupported(wclWiFi.wclMobileHotspotBand,System.Boolean@)">
            <summary> Checks whether the WiFi Mobile Hotspot supports the specified
              wireless frequency band. </summary>
            <param name="Band"> A <see cref="T:wclWiFi.wclMobileHotspotBand" /> constant,
              specifying the frequency band to query about. </param>
            <param name="Supported"> If the function completed with success
              on output contains a Boolean indicates if specified band si supported
              or not. <c>True</c> if the frequency band is supported, otherwise
              <c>False</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> For single band WiFi adapter this method may returns
              <c>False</c> for both bands. </para>
              <para> This feature is supported on Windows 10 2004 abd
              above. </para> </remarks>
            <see cref="T:wclWiFi.wclMobileHotspotBand" />
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetBand(wclWiFi.wclMobileHotspotBand@)">
            <summary> Gets the wireless frequency band of the WiFi Mobile
              Hotspot. </summary>
            <param name="Band"> If the function completed with success on output
              containt a <see cref="T:wclWiFi.wclMobileHotspotBand" /> constant,
              specifying the current frequency band. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 2004 abd
              above. </remarks>
            <see cref="T:wclWiFi.wclMobileHotspotBand" />
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.SetBand(wclWiFi.wclMobileHotspotBand)">
            <summary> Sets the wireless frequency band of the WiFi Mobile
              Hotspot. Use <c>IsBandSupported</c> to check whether the WiFi
              adapter allows configuring a specific frequency band. </summary>
            <param name="Band"> A <see cref="T:wclWiFi.wclMobileHotspotBand" /> constant,
              specifying the frequency band. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 2004 abd
              above. </remarks>
            <see cref="T:wclWiFi.wclMobileHotspotBand" />
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetMaxClientCount(System.UInt32@)">
            <summary> Gets the maximum number of client connections over a
              Mobile Hotspot. </summary>
            <param name="Count"> If the method completed with success on output
              contains the maximum number of client connections. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetClientCount(System.UInt32@)">
            <summary> Gets the current number of connected clients on the Mobile
              Hotspot. </summary>
            <param name="Count"> If the method completed with success on output
              contains the current number of connected clients. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.GetClients(wclWiFi.wclMobileHotspotClient[]@)">
            <summary> Gets the list of connected clients. </summary>
            <param name="Clients"> If the function completed with success on output
              contains the array fo currently connected clients. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclMobileHotspotClient" />
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.IsNoConnectionsTimeoutEnabled(System.Boolean@)">
            <summary> Gets a value indicating whether the NoConnections timeout is
              enabled. If enabled, Mobile Hotspot turns off automatically in 5
              minutes after the last peer of the tethering connection goes
              away. </summary>
            <param name="Enabled"> If the method completed with success on output
              contains a Boolean indicates current NoConnectionTimeout state.
              <c>True</c> if the NoConnections timeout is enabled, otherwise
              <c>False</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 2004 abd
              above. </remarks>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.DisableNoConnectionsTimeout">
            <summary> Disables the NoConnections timeout. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 2004 abd
              above. </remarks>
        </member>
        <member name="M:wclWiFi.wclMobileHotspot.EnableNoConnectionsTimeout">
            <summary> Enables the NoConnections timeout. This means that Mobile
              Hotspot turns off automatically in 5 minutes after the last peer of
              the tethering connection goes away. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 2004 abd
              above. </remarks>
        </member>
        <member name="P:wclWiFi.wclMobileHotspot.Active">
            <summary> Gets the Mobile Hotspot component state. </summary>
            <value> Returns <c>True</c> if the Mobile Hotspot component is
              opened. </value>
            <remarks> This property does nto indicate the real status of the
              Mobile Hotspot on this system. To get Mobile Hotspot state use
              <c>GetState</c> method. </remarks>
        </member>
        <member name="E:wclWiFi.wclMobileHotspot.OnClosed">
            <summary> The event fires when the Mobile Hotspot has been
              closed. </summary>
        </member>
        <member name="E:wclWiFi.wclMobileHotspot.OnOpened">
            <summary> The event fires when the Mobile Hotspot has been
              opened. </summary>
        </member>
        <member name="T:wclWiFi.wclMobileHotspotState">
            <summary> Enumeration represents a Mobile Hotspot states. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotState.mhsUnknown">
            <summary> Current state is unknown. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotState.mhsOn">
            <summary> Mobile Hotspot is up and running. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotState.mhsOff">
            <summary> Mobile Hotspot if turned off. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotState.mhsInTransition">
            <summary> The Mobile Hotspot is currently in transition between the
              <c>On</c> and <c>Off</c> states. </summary>
        </member>
        <member name="T:wclWiFi.wclMobileHotspotBand">
            <summary> Defines constants that specify a wireless frequency band for a
              WiFi adapter used as Mobile Hotspot. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotBand.mhbAuto">
            <summary> Specifies that the WiFi adapter is free to choose any band per
              internal logic. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotBand.mhbTwoPointFourGigahertz">
            <summary> Specifies that the WiFi adapter uses only the 2.4 GHz
              band. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotBand.mhbFiveGigahertz">
            <summary> Specifies that the WiFi adapter uses only the 5 GHz
              band. </summary>
        </member>
        <member name="T:wclWiFi.wclMobileHotspotClient">
            <summary> Represents a Mobile Hotspot connected client. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotClient.Mac">
            <summary> The connected client's MAC address. </summary>
        </member>
        <member name="F:wclWiFi.wclMobileHotspotClient.Name">
            <summary> The host name. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiProfilesManager">
            <summary> Provides access to the Wireless Network profiles. </summary>
            <remarks> <para> An application uses this component to manage the
              Wireless LAN profiles. </para>
              <para> In order to receiver the profile changes notifications an
              application must use the <see cref="T:wclWiFi.wclWiFiEvents" />
              component. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.InternalClose">
            <summary> Executes additional finalization procedures. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.InternalOpen">
            <summary> Executes additional initialization produres. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.GetProfile(System.Guid,System.String,wclWiFi.wclWiFiProfileFlag@,System.String@)">
            <summary> The method retrieves all information about a specified
              wireless profile. </summary>
            <param name="IfaceId"> The ID of the wireless interface. </param>
            <param name="ProfileName"> The name of the profile. Profile names are
              case-sensitive. The maximum length of the profile name is 255
              characters. This means that the maximum length of this string
              is 255 characters. </param>
            <param name="Flags"> <para> On input is used to provide additional
              information about the request. If this parameter is an empty set on
              input, then no information on profile flags will be returned. </para>
              <para> On output is used to receive profile flags. </para> </param>
            <param name="ProfileXml"> A string that is the XML representation of
              the queried profile. There is no predefined maximum string
              length. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> If the <c>GetProfile</c> function succeeds, the
              wireless profile is returned in the <c>ProfileXml</c> parameter. This
              is a string that is the XML representation of the queried profile.
              For a description of the XML representation of the wireless profile,
              see <c>WLAN_profile</c> Schema. </para>
              <para> The <c>keyMaterial</c> element returned in the profile schema
              pointed to by the <c>ProfileXml</c> may be requested as plaintext if
              the <c>GetProfile</c> function is called with the
              <c>pfGetPlaintextKey</c> flag set in the value of the <c>Flags</c>
              parameter on input. </para>
              <para> For a WEP key, both 5 ASCII characters or 10 hexadecimal
              characters can be used to set the plaintext key when the profile is
              created or updated. However, a WEP profile will be saved with 10
              hexadecimal characters in the key no matter what the original input
              was used to create the profile. So in the profile returned by the
              <c>GetProfile</c> method, the plaintext WEP key is always returned
              as 10 hexadecimal characters. </para>
              <para> By default, the <c>keyMaterial</c> element returned in the
              profile in the <c>ProfileXml</c> is encrypted. If your process runs in
              the context of the <c>LocalSystem</c> account on the same computer,
              then you can unencrypt key material by calling the
              <c>CryptUnprotectData</c> function. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiProfileFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.GetProfileList(System.Guid,wclWiFi.wclWiFiProfileData[]@)">
            <summary> The method retrieves the list of profiles in preference
              order. </summary>
            <param name="IfaceId"> The ID of the wireless interface. </param>
            <param name="Profiles"> A dynamic array that contains the list of
              profile information. The caller is responsible to free the memory
              allocated for the dynamic array. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> The <c>GetProfileList</c> method returns only the basic
              information on the wireless profiles on a wireless interface. The list
              of wireless profiles on a wireless interface are retrieved in the
              preference order. The <c>SetProfilePosition</c> method can be used to
              change the preference order for the wireless profiles on a wireless
              interface. </para>
              <para> More detailed information for a wireless profile on a wireless
              interface can be retrieved by using the <c>GetProfile</c> method. The
              <c>GetProfileUserData</c> method can be used to retrieve custom user
              data for a wireless profile on a wireless interface. A list of the
              wireless interfaces and associated IDs on the local computer can be
              retrieved using the <c>EnumInterfaces</c> method of the
              <see cref="T:wclWiFi.wclWiFiClient" /> component. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiProfileData" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.DeleteProfile(System.Guid,System.String)">
            <summary> The method deletes a wireless profile for a wireless interface
              on the local computer. </summary>
            <param name="IfaceId"> The ID of the interface from which to delete the
              profile. </param>
            <param name="ProfileName"> The name of the profile to be
              deleted. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.RenameProfile(System.Guid,System.String,System.String)">
            <summary> Renames the specified profile. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="OldName"> The profile name to be changed. </param>
            <param name="NewName"> The new name of the profile. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SaveTemporaryProfile(System.Guid,System.String,System.Boolean,wclWiFi.wclWiFiTemporaryProfileFlag)">
            <summary> Saves a temporary profile to the profile store. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> The name of the profile to be saved. Profile
              names are case-sensitive. </param>
            <param name="OverWrite"> Specifies whether this profile is overwriting
              an existing profile. If this parameter is <c>False</c> and the profile
              already exists, the existing profile will not be overwritten and an
              error will be returned. </param>
            <param name="Flags"> The the flags to set on the profile. If the set is
              empty then the profile is an all-user profile. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> A temporary profile is the one passed to then
              <c>Connect</c> method of the <see cref="T:wclWiFi.wclWiFiClient" /> component
              or generated by the discovery engine. A network connection can be
              established using a temporary profile. Using this method saves the
              temporary profile and associated user data to the profile
              store. </para>
              <para> A new profile is added at the top of the list after the group
              policy profiles. A profile's position in the list is not changed if an
              existing profile is overwritten. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiTemporaryProfileFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetPosition(System.Guid,System.String,System.UInt32)">
            <summary> The method sets the position of a single, specified profile
              in the preference list. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> The name of the profile. Profile names are
              case-sensitive. </param>
            <param name="Position"> Indicates the position in the preference list
              that the profile should be shifted to. 0 (zero) corresponds to the
              first profile in the list that is returned by the
              <c>GetProfileList</c> method. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetProfile(System.Guid,wclWiFi.wclWiFiProfileFlag,System.String,System.Boolean)">
            <summary> The method sets the content of a specific profile. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="Flags"> The flags to set on the profile. </param>
            <param name="ProfileXml"> Contains the XML representation of the
              profile. The <c>WLANProfile</c> element is the root profile
              element. </param>
            <param name="Overwrite"> Specifies whether this profile is overwriting
              an existing profile. If this parameter is <c>False</c> and the profile
              already exists, the existing profile will not be overwritten and
              an error will be returned. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> The SetProfile method can be used to add a new
              wireless LAN profile or replace an existing wireless LAN
              profile. </para>
              <para> A new profile is added at the top of the list after the group
              policy profiles. A profile's position in the list is not changed if an
              existing profile is overwritten. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiProfileFlag" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetProfileList(System.Guid,System.String[])">
            <summary> The method sets the preference order of profiles for a
              given interface. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="Names"> The names of the profiles in the desired order.
              Profile names are case-sensitive. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> The method sets the preference order of wireless LAN
              profiles for a given wireless interface. </para>
              <para> The profiles in the list must be a one-to-one match with the
              current profiles returned by the <c>GetProfileList</c>
              method. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.GetProfileUserData(System.Guid,System.String,System.Byte[]@)">
            <summary> The method gets the custom user data associated with a
              wireless profile. </summary>
            <param name="IfaceId"> The ID of the wireless LAN interface. </param>
            <param name="ProfileName"> The name of the profile with which the custom
              user data is associated. Profile names are case-sensitive. </param>
            <param name="Data"> A bytes array of the user data. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> For every wireless WLAN profile used by the Native Wifi
              AutoConfig service, Windows maintains the concept of custom user data.
              This custom user data is initially non-existent, but can be set by
              calling the <c>SetProfileUserData</c> method. The custom user data
              gets reset to empty any time the profile is modified by calling the
              <c>SetProfile</c> method. </para>
              <para> Once custom user data has been set, this data can be accessed
              using the <c>GetProfileUserData</c> method. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetProfileUserData(System.Guid,System.String,System.Byte[])">
            <summary> Sets the custom user data associated with a
              profile. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> The name of the profile associated with the
              custom user data. Profile names are case-sensitive. </param>
            <param name="Data"> A bytes array of the user data to be set. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <remarks> <para> For every wireless WLAN profile used by the Native Wifi
              AutoConfig service, Windows maintains the concept of custom user data.
              This custom user data is initially non-existent, but can be set by
              calling the <c>SetProfileUserData</c> method. The custom user data
              gets reset to empty any time the profile is modified by calling the
              <c>SetProfile</c> method. </para>
              <para> Once custom user data has been set, this data can be accessed
              using the <c>GetProfileUserData</c> method. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetProfileEapXmlUserData(System.Guid,System.String,System.Boolean,System.String)">
            <summary> The method sets the Extensible Authentication Protocol (EAP)
              user credentials as specified by an XML string. The user credentials
              apply to a profile on an adapter (interface). These credentials can
              only be used by the caller. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> <para> The name of the profile associated
              with the EAP user data. Profile names are case-sensitive. </para>
              <para> Windows XP with SP3 and Wireless LAN API for Windows XP with
              SP2:  The supplied name must match the profile name derived
              automatically from the SSID of the network. For an infrastructure
              network profile, the SSID must be supplied for the profile name.
              For an ad hoc network profile, the supplied name must be the SSID of
              the ad hoc network followed by -adhoc. </para> </param>
            <param name="AllUsers"> If this parameter is <c>True</c> on Windows 7,
              Windows Server 2008 R2, and later, the EAP host data will be set for
              all users of this profile. </param>
            <param name="UserData"> An XML string represents a data used to set the
              user credentials. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.SetProfileEapUserData(System.Guid,System.String,System.Boolean,wclWiFi.wclWiFiEapMethodType,System.Byte[])">
            <summary> The function sets the Extensible Authentication Protocol (EAP)
              user credentials as specified by raw EAP data. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> <para> The name of the profile associated
              with the EAP user data. Profile names are case-sensitive. </para>
              <para> Windows XP with SP3 and Wireless LAN API for Windows XP with
              SP2:  The supplied name must match the profile name derived
              automatically from the SSID of the network. For an infrastructure
              network profile, the SSID must be supplied for the profile name.
              For an ad hoc network profile, the supplied name must be the SSID of
              the ad hoc network followed by -adhoc. </para> </param>
            <param name="AllUsers"> If this parameter is <c>True</c> on Windows 7,
              Windows Server 2008 R2, and later, the EAP host data will be set for
              all users of this profile. </param>
            <param name="EapMethod"> An <see cref="T:wclWiFi.wclWiFiEapMethodType" />
              structure that contains the method for which the caller is supplying
              EAP user credentials. </param>
            <param name="Data"> <para> A pointer to the raw EAP data used to set the
              user credentials. </para>
              <para> On Windows Vista and Windows Server 2008, this parameter must
              not be <c>nil</c>. </para>
              <para> On Windows 7, Windows Server 2008 R2, and later, this parameter
              can be set to <c>null</c> to delete the stored credentials for this
              profile if the <c>AllUsers</c> parameter contains set to
              <c>true</c>. </para> </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiEapMethodType" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.ShowUIEdit(System.Guid,System.String,wclWiFi.wclWiFiProfileEditPage)">
            <summary> Displays the wireless profile user interface (UI). This UI is
              used to view and edit advanced settings of a wireless network
              profile. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> Contains the name of the profile to be viewed
              or edited. Profile names are case-sensitive. The supplied profile must
              be present on the interface. That means the profile must have been
              previously created and saved in the profile store and that the profile
              must be valid for the supplied interface. </param>
            <param name="Page"> A <see cref="T:wclWiFi.wclWiFiProfileEditPage" /> value that
              specifies the active tab when the UI dialog box appears. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiProfileEditPage" />
        </member>
        <member name="M:wclWiFi.wclWiFiProfilesManager.ShowUIEdit(System.Guid,System.String)">
            <summary> Displays the wireless profile user interface (UI). This UI is
              used to view and edit advanced settings of a wireless network
              profile. </summary>
            <param name="IfaceId"> The ID of the interface. </param>
            <param name="ProfileName"> Contains the name of the profile to be viewed
              or edited. Profile names are case-sensitive. The supplied profile must
              be present on the interface. That means the profile must have been
              previously created and saved in the profile store and that the profile
              must be valid for the supplied interface. </param>
            <returns> If the function succeeds, the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. If the function fails, the return value
              may be one of the WCL return codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiProfileEditPage" />
        </member>
        <member name="T:wclWiFi.wclWiFiTemporaryProfileFlag">
            <summary> The flags to set on the profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiTemporaryProfileFlag.tpfUser">
            <summary> The profile is a per-user profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiTemporaryProfileFlag.tpfConnectionModeSetByClient">
            <summary> The profile was created by the client. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiTemporaryProfileFlag.tpfConnectionModeAuto">
            <summary> The profile was created by the automatic configuration
              module. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiProfileEditPage">
            <summary> Specifies the active tab when the wireless profile user
              interface dialog box appears. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileEditPage.epConnection">
            <summary> Displays the Connection tab. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileEditPage.epSecurity">
            <summary> Displays the Security tab. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileEditPage.epAdvanced">
            <summary> Display the Advanced tab. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiProfileFlag">
            <summary> The flags specifying settings for wireless profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileFlag.pfGroupPolicy">
            <summary> This flag indicates that this profile was created by group
              policy. A group policy profile is read-only. Neither the content nor
              the preference order of the profile can be changed. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileFlag.pfUser">
            <summary> This flag indicates that the profile is a per-user profile.
              If not set, this profile is an all-user profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileFlag.pfGetPlaintextKey">
            <summary> This flag indicates that the caller wants to retrieve the
              plain text key from a wireless profile. If the calling thread has
              the required permissions, the <c>GetProfile</c> method of the
              <see cref="T:wclWiFi.wclWiFiProfilesManager" /> returns the plain text key in
              the <c>keyMaterial</c> element of the profile returned in the buffer
              pointed to by the <c>ProfileXml</c> parameter. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiProfileData">
            <summary> The record contains basic information about a WLAN
              profile. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileData.Name">
            <summary> The name of the profile. This value may be the name of a
              domain if the profile is for provisioning. Profile names are
              case-sensitive. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiProfileData.Flags">
            <summary> A set of flags specifying settings for wireless
              profile. </summary>
            <seealso cref="T:wclWiFi.wclWiFiProfileFlag" />
        </member>
        <member name="T:wclWiFi.wclNetworkListManager">
            <summary> The <c>wclNetworkListManager</c> component provides a set of
              methods to perform network list management functions and receives
              events related to the Network List Manager. </summary>
            <remarks> The component is not thread safe. </remarks>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoAfterOpen">
            <summary> Firss the <c>AfterOpen</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoBeforeClose">
            <summary> Fires the <c>BeforeClose</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoConnectivityChanged(wclWiFi.wclNlmConnectivity)">
            <summary> Fires the <c>OnConnectivityChanged</c> event. </summary>
            <param name="Connectivity"> The new new connectivity settings of the
              machine. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoNetworkAdded(System.Guid)">
            <summary> Fires the <c>OnNetworkAdded</c> event. </summary>
            <param name="NetworkId"> A GUID that specifies the network that was
              added. </param>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoNetworkConnectivityChanged(System.Guid,wclWiFi.wclNlmConnectivity)">
            <summary> Fires then <c>OnNetworkConnectivityChanged</c>
              event. </summary>
            <param name="NetworkId"> A GUID that specifies the network. </param>
            <param name="Connectivity"> The new new connectivity settings of the
              machine. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoNetworkDeleted(System.Guid)">
            <summary> Fires the <c>OnNetworkDeleted</c> event. </summary>
            <param name="NetworkId"> A GUID that specifies the network that was
              deleted. </param>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoNetworkPropertyChanged(System.Guid,wclWiFi.wclNlmNetworkPropertyChange)">
            <summary> Fires the <c>OnNetworkPropertyChanged</c> event. </summary>
            <param name="NetworkId"> A GUID that specifies the network. </param>
            <param name="Change"> The value that specifies the network property
              that changed. </param>
            <seealso cref="T:wclWiFi.wclNlmNetworkPropertyChange" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoConnectionConnectivityChanged(System.Guid,wclWiFi.wclNlmConnectivity)">
            <summary> Fires the <c>OnConnectionConnectivityChanged</c>
              event. </summary>
            <param name="ConnectionId"> A GUID that identifies the network
              connection on which the event occurred. </param>
            <param name="Connectivity"> The new new connectivity settings of the
              connection. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DoConnectionPropertyChanged(System.Guid,wclWiFi.wclNlmConnectionProperty)">
            <summary> Fires the <c>OnConnectionPropertyChanged</c> event. </summary>
            <param name="ConnectionId"> A GUID that identifies the network
              connection on which the event occurred. </param>
            <param name="Prop"> Indicates the changed properties. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectionProperty" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.#ctor">
            <summary> Creates a new object. </summary>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.Close">
            <summary> Closes the Network List Manager and releases all allocated
              resources. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.Open">
            <summary> Opens the Network List Manager and prepares for events
              receiving. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetConnected(System.Boolean@)">
            <summary> Checks if the machine has network connectivity. </summary>
            <param name="Connected"> <para> If the method succeeded on output
              returns the network connectivity state. </para>
              <para> If the <c>Connected</c> is <c>True</c>, the network has at
              least local connectivity via ipv4 or ipv6 or both. The network may
              also have internet connectivity. Thus, the network is
              connected. </para>
              <para> If the <c>Connected</c> is <c>False</c>, the network does not
              have local or internet connectivity. The network is not
              connected. </para> </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetConnectedToInternet(System.Boolean@)">
            <summary> Checks if the local machine has internet
              connectivity. </summary>
            <param name="Connected"> <para> If the method succeeded on output
              returns the internet conictivity state. </para>
              <para> If the <c>Connected</c> is <c>True</c>, the local machine is
              connected to the internet; if the <c>Connected</c> is <c>False</c>, it
              is not. </para> </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetConnectivity(wclWiFi.wclNlmConnectivity@)">
            <summary> The <c>GetConnectivity</c> method reads the overall
              connectivity state of the machine. </summary>
            <param name="Connectivity"> If the method succeeded on output contains
              the information about the machine connectivity. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetConnections(wclWiFi.wclNlmConnection[]@)">
            <summary> The method enumerates a complete list of the network
              connections that have been made. </summary>
            <param name="Connections"> On output contains all network connections
              on the machine. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmConnection" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetNetwork(System.Guid,wclWiFi.wclNlmNetwork@)">
            <summary> The method retrieves a network based on a supplied
              network ID. </summary>
            <param name="NetworkId"> GUID that specifies the network ID. </param>
            <param name="Network"> If the method succeeded on output contains the
              <see cref="T:wclWiFi.wclNlmNetwork" /> object that represents the network.
              An application is responsible to dispose the returned
              object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmNetwork" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.GetNetworks(wclWiFi.wclNlmEnumNetwork,wclWiFi.wclNlmNetwork[]@)">
            <summary> Retrieves the list of networks available on the local
              machine. </summary>
            <param name="Flags"> The value specifies the flags for the network
              (specifically, connected or not connected). </param>
            <param name="Networks"> A dynamic array that receives the
              <see cref="T:wclWiFi.wclNlmNetwork" /> class objects for available
              networks. An application is responsible to free all the <c>Network</c>
              objects in the array as well as release the memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmEnumNetwork" />
        </member>
        <member name="M:wclWiFi.wclNetworkListManager.DeleteNetwork(System.Guid)">
            <summary> Deletes network profile with given ID. </summary>
            <param name="NetworkId"> GUID that specifies the network ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.AfterOpen">
            <summary> The event fires after Network List Manager opened. </summary>
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.BeforeClose">
            <summary> Teh event fires before the Network List Manager
              closed. </summary>
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnConnectivityChanged">
            <summary> The event fires  when network connectivity related changes
              occur. </summary>
            <seealso cref="T:wclWiFi.wclNlmConnectivityChangeEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnNetworkAdded">
            <summary> The event fires when a new network is added. </summary>
            <seealso cref="T:wclWiFi.wclNlmNetworkEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnNetworkConnectivityChanged">
            <summary> The event fires when network connectivity related changes
              occur. </summary>
            <seealso cref="T:wclWiFi.wclNlmNetworkConnectivityChangedEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnNetworkDeleted">
            <summary> The event fires when a network is deleted. </summary>
            <seealso cref="T:wclWiFi.wclNlmNetworkEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnNetworkPropertyChanged">
            <summary> The event fires when a network property change is
              detected. </summary>
            <seealso cref="T:wclWiFi.wclNlmNetworkPropertyChangedEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnConnectionConnectivityChanged">
            <summary> The event fires when connectivity change events occur on a
              network connection level. </summary>
            <seealso cref="T:wclWiFi.wclNlmConnectionConnectivityChangedEvent" />
        </member>
        <member name="E:wclWiFi.wclNetworkListManager.OnConnectionPropertyChanged">
            <summary> The event fires when property change events related to a
              specific network connection occur. </summary>
            <seealso cref="T:wclWiFi.wclNlmConnectionPropertyChangedEvent" />
        </member>
        <member name="T:wclWiFi.wclNlmConnection">
            <summary> The class represents a single network connection. </summary>
            <remarks> An application must never create objects of this class
              directly Instead an application must use the <c>GetConnections</c>
              method of the <see cref="T:wclWiFi.wclNetworkListManager" /> component or
              <see cref="T:wclWiFi.wclNlmNetwork" /> class. </remarks>
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetAdapterId(System.Guid@)">
            <summary> Reads the ID of the network adapter used by this
              connection. </summary>
            <param name="Id"> On output contains a GUID that specifies the adapter
              ID of the TCP/IP interface used by this network connection. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetConnected(System.Boolean@)">
            <summary> Checks if the associated network connection has network
              connectivity. </summary>
            <param name="Connected"> On output if <c>True</c>, this network
              connection has connectivity; if <c>False</c>, it does not. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetConnectedToInternet(System.Boolean@)">
            <summary> Checks if the associated network connection has internet
              connectivity. </summary>
            <param name="Connected"> On output if <c>True</c>, this network
              connection has connectivity to the internet; if <c>False</c>,
              it does not. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetConnectivity(wclWiFi.wclNlmConnectivity@)">
            <summary> Reads the connectivity state of the network
              connection. </summary>
            <param name="Connectivity"> On output contains the connectivity of this
              network connection. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetDomainType(wclWiFi.wclNlmDomainType@)">
            <summary> Reads the domain type of the network connection. </summary>
            <param name="DomainType"> On output contains the domain type of the
              network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmDomainType" />
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetId(System.Guid@)">
            <summary> Reads the Connection ID associated with this network
              connection. </summary>
            <param name="Id"> On output contains a GUID that specifies the
              Connection ID associated with this network connection. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmConnection.GetNetwork(wclWiFi.wclNlmNetwork@)">
            <summary> Gets the network associated with the connection. </summary>
            <param name="Network"> If the method succeeded on output contains the
              <see cref="T:wclWiFi.wclNlmNetwork" /> object that represents the network
              associated with the connection. An application is responsible to
              dispose the returned object. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmNetwork" />
        </member>
        <member name="T:wclWiFi.wclNlmConnectivityChangeEvent">
            <summary> The <c>OnConnectivityChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Connectivity"> The new new connectivity settings of the
              machine. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="T:wclWiFi.wclNlmNetworkConnectivityChangedEvent">
            <summary> The <c>OnNetworkConnectivityChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="NetworkId"> A GUID that specifies the network. </param>
            <param name="Connectivity"> The new new connectivity settings of the
              machine. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="T:wclWiFi.wclNlmNetworkEvent">
            <summary> The network event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="NetworkId"> A GUID that specifies the network. </param>
        </member>
        <member name="T:wclWiFi.wclNlmNetworkPropertyChangedEvent">
            <summary> The <c>OnNetworkPropertyChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="NetworkId"> A GUID that specifies the network. </param>
            <param name="Change"> The value that specifies the network property
              that changed. </param>
            <seealso cref="T:wclWiFi.wclNlmNetworkPropertyChange" />
        </member>
        <member name="T:wclWiFi.wclNlmConnectionConnectivityChangedEvent">
            <summary> The <c>OnConnectionConnectivityChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="ConnectionId"> A GUID that identifies the network connection
              on which the event occurred. </param>
            <param name="Connectivity"> The new connectivity settings of the
              connection. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="T:wclWiFi.wclNlmConnectionPropertyChangedEvent">
            <summary> The <c>OnConnectionPropertyChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="ConnectionId"> A GUID that identifies the network connection
              on which the event occurred. </param>
            <param name="Prop"> Indicates the changed properties. </param>
            <seealso cref="T:wclWiFi.wclNlmConnectionProperty" />
        </member>
        <member name="T:wclWiFi.wclNlmConnectivity">
            <summary> The <c>wclNlmConnectivity</c> enumeration describes the network
              connectivity of this machine. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmDisconnected">
            <summary> The underlying network interfaces have no connectivity to any
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv4NoTraffic">
            <summary> There is connectivity to a network, but the service cannot
              detect any IPv4 Network Traffic. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv6NoTraffic">
            <summary> There is connectivity to a network, but the service cannot
              detect any IPv6 Network Traffic. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv4Subnet">
            <summary> There is connectivity to the local subnet using the IPv4
              protocol. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv4LocalNetwork">
            <summary> There is connectivity to a routed network using the IPv4
              protocol. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv4Internet">
            <summary> There is connectivity to the Internet using the IPv4
              protocol. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv6Subnet">
            <summary> There is connectivity to the local subnet using the IPv6
              protocol. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv6LocalNetwork">
            <summary> There is connectivity to a local network using the IPv6
              protocol. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectivity.nlmIPv6Internet">
            <summary> There is connectivity to the Internet using the IPv6
              protocol. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmNetworkPropertyChange">
            <summary> The enumeration defines changes made to the properties of a
              network. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkPropertyChange.nlmNetworkChangeConnection">
            <summary> A connection to this network has been added or
              removed. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkPropertyChange.nlmNetworkChangeDescription">
            <summary> The description of the network has changed. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkPropertyChange.nlmNetworkChangeName">
            <summary> The name of the network has changed. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkPropertyChange.nlmNetworkChangeIcon">
            <summary> The icon of the network has changed. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkPropertyChange.nlmNetworkChangeCategoryValue">
            <summary> The category of the network has changed. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmNetworkCategory">
            <summary> The enumeration is a set of flags that specify the category
              type of a network. </summary>
            <remarks> The private or public network categories must never be used to
              assume which Windows Firewall ports are open, as the user can change the
              default settings of these categories. Instead, Firewall APIs should be
              called to ensure the ports that the required ports are open. </remarks>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkCategory.nlmCategoryPublic">
            <summary> The network is a public (untrusted) network.  </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkCategory.nlmCategoryPrivate">
            <summary> The network is a private (trusted) network.  </summary>
        </member>
        <member name="F:wclWiFi.wclNlmNetworkCategory.nlmCategoryDomainAuthenticated">
            <summary> The network is authenticated against an Active Directory domain. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmDomainType">
            <summary> The enumeration is a set of flags that specify the domain type
              of a network. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmDomainType.nlmNonDomainNetwork">
            <summary> The Network is not an Active Directory Network. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmDomainType.nlmDomainNetwork">
            <summary> The Network is an Active Directory Network, but this machine
              is not authenticated against it. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmDomainType.nlmDomainAuthenticated">
            <summary> The Network is an Active Directory Network, and this machine
              is authenticated against it. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmConnectionProperty">
            <summary> The enumeration is a set of flags that define changes made to
              the properties of a network connection. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmConnectionProperty.nlmAuthentication">
            <summary> The Authentication (Domain Type) of this Network Connection
              has changed. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmEnumNetwork">
            <summary> The enumeration contains a set of flags that specify what
              types of networks are enumerated. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmEnumNetwork.nlmEnumConnected">
            <summary> Returns connected networks. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmEnumNetwork.nlmEnumDisconnected">
            <summary> Returns disconnected networks. </summary>
        </member>
        <member name="F:wclWiFi.wclNlmEnumNetwork.nlmEnumAll">
            <summary> Returns connected and disconnected networks. </summary>
        </member>
        <member name="T:wclWiFi.wclNlmNetwork">
            <summary> The class represents a network on the local machine. It can
              also represent a collection of network connections with a similar
              network signature. </summary>
            <remarks> An application must never create this class directly.
              Instead of that an application must use <c>GetNetwork</c> or
              <c>GetNetworks</c> methods of the <see cref="T:wclWiFi.wclNetworkListManager" />
              component. </remarks>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetCategory(wclWiFi.wclNlmNetworkCategory@)">
            <summary> Reads the category of the network. </summary>
            <param name="Category"> On output specifies the category information
              for the network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The private or public network categories must never be used to
              assume which Windows Firewall ports are open, as the user can change
              the default settings of these categories. Instead, Windows Firewall
              APIs should be called to ensure the ports that the required ports
              are open. </remarks>
            <seealso cref="T:wclWiFi.wclNlmNetworkCategory" />
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetConnected(System.Boolean@)">
            <summary> Checks  if the network has any network
              connectivity. </summary>
            <param name="Connected"> <para> If the method succeeded on output
              returns the network connectivity state. </para>
              <para> If the <c>Connected</c> is <c>True</c>, the network has at
              least local connectivity via ipv4 or ipv6 or both. The network may
              also have internet connectivity. Thus, the network is
              connected. </para>
              <para> If the <c>Connected</c> is <c>False</c>, the network does not
              have local or internet connectivity. The network is not
              connected. </para> </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetConnectedToInternet(System.Boolean@)">
            <summary> Checks if the network has internet connectivity. </summary>
            <param name="Connected"> <para> If the method succeeded on output
              returns the internet conictivity state. </para>
              <para> If the <c>Connected</c> is <c>True</c>, the network is
              connected to the internet; if the <c>Connected</c> is <c>False</c>, it
              is not. </para> </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetConnections(wclWiFi.wclNlmConnection[]@)">
            <summary> The method returns an enumeration of all network connections
              for a network. A network can have multiple connections to it from
              different interfaces or different links from the same
              interface. </summary>
            <param name="Connections"> On output contains all network connections
              on the machine. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmConnection" />
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetConnectivity(wclWiFi.wclNlmConnectivity@)">
            <summary> Reads the connectivity state of the network. </summary>
            <param name="Connectivity"> On output contains a set that specifies the
              connectivity state of this network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmConnectivity" />
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetDescription(System.String@)">
            <summary> Reads the description string for the network. </summary>
            <param name="Description"> On output contains a string that specifies
              the text description of the network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetDomainType(wclWiFi.wclNlmDomainType@)">
            <summary> Reads the domain type of a network. </summary>
            <param name="DomainType"> On output contains the value that specifies
              the domain type of the network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmDomainType" />
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetName(System.String@)">
            <summary> Reads the name of a network. </summary>
            <param name="Name"> On output contains the name of the network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetNetworkId(System.Guid@)">
            <summary> Reads the unique identifier of a network. </summary>
            <param name="Id"> On output contains the network ID. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.GetTimeCreatedAndConnected(System.DateTime@,System.DateTime@)">
            <summary> Reads the local date and time when the network was created
              and connected. </summary>
            <param name="Created"> On output contains a datetime when the network
              was created. </param>
            <param name="Connected"> On output contains a datetime when the network
              was last connected to. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.SetCategory(wclWiFi.wclNlmNetworkCategory)">
            <summary> Sets the category of a network. Changes made take effect
              immediately. Administrative privileges are needed for this
              method. </summary>
            <param name="Category"> Specifies the new category of the
              network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclNlmNetworkCategory" />
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.SetDescription(System.String)">
            <summary> Sets or replaces the description for a network. </summary>
            <param name="Description"> Contains a string that contains the
              description of the network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclNlmNetwork.SetName(System.String)">
            <summary> Sets or renames a network. </summary>
            <param name="Name"> A string that contains the new name of the
              network. </param>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="T:wclWiFi.wclWiFiSniffer">
            <summary> The class allows your application to capture raw packets
              from your WiFi adapter. </summary>
            <remarks> <para> Please note, that not all WiFi adapters can capture the
              raw packets. To be able to do that your adapter must support Monitor
              Mode. </para>
              <para> The component requires Microsoft Network Monitor 3.4 filter
              driver to be installed on your system. You can download and install
              the Microsoft Network Monitor 3.4 by the following link:
              https://www.microsoft.com/en-us/download/details.aspx?id=4865 </para>
              <para> NOTE: The component is not thread-safe. </para> </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.DoAfterOpen">
            <summary> Fires the <c>AfterOpen</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.DoBeforeClose">
            <summary> Fires the <c>BeforeClose</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.DoFrameReceived(wclWiFi.wclWiFiSnifferFrameMetaData,System.Byte[])">
            <summary> Fires the <c>OnFrameReceived</c> event. </summary>
            <param name="Meta"> The frame's meta data. </param>
            <param name="Buffer"> The pointer to the buffer with received
              frame. </param>
            <seealso cref="T:wclWiFi.wclWiFiSnifferFrameMetaData" />
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.DoRawFrameReceived(System.Byte[])">
            <summary> Fires the <c>OnRawFrameReceived</c> event. </summary>
            <param name="Buffer"> The buffer with received frame. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.#ctor">
            <summary> Creates a new WiFi Sniffer. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.Close">
            <summary> Stops capturing WiFi frames and closes the sniffer. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.Open(System.Guid)">
            <summary> Opens the sniffer and starts capturing WiFI frames. </summary>
            <param name="Id"> The WiFi interface ID that should be used for
              capturing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.GetChannel(System.UInt32@)">
            <summary> Get the current channel. </summary>
            <param name="Channel"> On output the currently used channel. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.GetMacAddr(System.Int64@)">
            <summary> Gets the WiFi adapter current MAC address. </summary>
            <param name="Address"> On output the current MAC address of the WiFi
              adapter used for fram capturing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.GetPhy(wclWiFi.wclWiFiSnifferPhy@)">
            <summary> Gets the current adapter's PHY. </summary>
            <param name="Phy"> On output the currently used PHY. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiSnifferPhy" />
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.SetChannel(System.UInt32)">
            <summary> Sets the current channel. </summary>
            <param name="Channel"> The new RF channel number. </param>
            <remarks> Not all adapters allow to change the channel
              number. </remarks>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSniffer.SetPhy(wclWiFi.wclWiFiSnifferPhy)">
            <summary> Sets the current PHY. </summary>
            <param name="Phy"> The new PHY. </param>
            <remarks> Not all adapters allow to change the PHY. </remarks>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclWiFi.wclWiFiSnifferPhy" />
        </member>
        <member name="P:wclWiFi.wclWiFiSniffer.Active">
            <summary> Gets the sniffer's state. </summary>
            <value> <c>True</c> if the sniffer is active. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiSniffer.IfaceId">
            <summary> Gets the WiFi Interface ID. </summary>
            <value> The WiFi Interface ID. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiSniffer.Mode">
            <summary> Gets the current WiFi interface mode. </summary>
            <value> The WiFi interface operation mode. </value>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="P:wclWiFi.wclWiFiSniffer.DoNotChangeMode">
            <summary> Gets and sets the value controlled how the Sniffer will work
              with the WiFi hardware interface. </summary>
            <value> The boolean controls how to work with the WiFi hardware
              interface. </value>
            <remarks> Set this property to <c>True</c> to disable automatically
              switch the given WiFi hardware interface to the monitoring mode.
              If this property is <c>False</c> (the default value) the Sniffer will
              try to switch the given WiFi hardware interface to the
              monitoring mode. </remarks>
            <exception cref="T:wclWiFi.wclEWiFiSniffer" />
        </member>
        <member name="E:wclWiFi.wclWiFiSniffer.AfterOpen">
            <summary> The event fires after the Sniffer was opened with
              success. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiSniffer.BeforeClose">
            <summary> The event fires before the Sniffer will be closed. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiSniffer.OnFrameReceived">
            <summary> The event fires when a new frame received. </summary>
            <seealso cref="T:wclWiFi.wclWiFiSnifferFrameReceived" />
        </member>
        <member name="E:wclWiFi.wclWiFiSniffer.OnRawFrameReceived">
            <summary> The event fires when a new frame received. </summary>
            <seealso cref="T:wclWiFi.wclWiFiSnifferRawFrameReceived" />
        </member>
        <member name="T:wclWiFi.wclWiFiSnifferFrameReceived">
            <summary> The <c>OnFrameReceived</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Meta"> The frame's meta data. </param>
            <param name="Buffer"> The pointer to the received frame data buffer.
              The pointer is valid only inside the event handler. </param>
            <seealso cref="T:wclWiFi.wclWiFiSnifferFrameMetaData" />
        </member>
        <member name="T:wclWiFi.wclWiFiSnifferRawFrameReceived">
            <summary> The <c>OnRawFrameReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Buffer"> The bytes array of the received frame data buffer. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiSnifferPhy">
            <summary> The PHY types used by the WiFi Sniffer. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferPhy.ph802_11a">
            <summary> The 802.11a standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferPhy.ph802_11b">
            <summary> The 802.11b standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferPhy.ph802_11g">
            <summary> The 802.11g standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferPhy.ph802_11n">
            <summary> The 802.11n standard. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferPhy.phUndefined">
            <summary> Undefined or unknown PHY. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiSnifferFrameMetaData">
            <summary> The structure contains meta data information about captured
              WiFi frame. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Version">
            <summary> The meta data version. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Mode">
            <summary> The interface's operation mode. </summary>
            <seealso cref="T:wclWiFi.wclWiFiOperationMode" />
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Flags">
            <summary> The flags set. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Phy">
            <summary> The PHY. </summary>
            <seealso cref="T:wclWiFi.wclWiFiSnifferPhy" />
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Channel">
            <summary> The channel number. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Freq">
            <summary> The central frequency in MHz. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Rssi">
            <summary> The RSSI value in dBm. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Rate">
            <summary> The data rate in Mbps. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiSnifferFrameMetaData.Timestamp">
            <summary> The frame's timestamp. </summary>
        </member>
        <member name="T:wclWiFi.wclCustomWiFiDirectComponent">
            <summary> The base class for all WiFi Direct components. </summary>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiDirectComponent.HardwareRemoved">
            <summary> The method called when WiFi hardware has been switched off
              or removed. </summary>
            <remarks> A derived class must override this method to handle WiFi
              hardware changes. </remarks>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiDirectComponent.InitWlan">
            <summary> Initializes native WLAN subsystem. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiDirectComponent.UninitWlan">
            <summary> Uninitializes native WLAN subsystem. </summary>
        </member>
        <member name="M:wclWiFi.wclCustomWiFiDirectComponent.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="P:wclWiFi.wclCustomWiFiDirectComponent.HardwareAvailable">
            <summary> Gets the Hardware Available flag. </summary>
            <value> <c>True</c> if Hardware is available. <c>False</c>
              otherwise. </value>
            <remarks> This property is for internal use only. </remarks>
        </member>
        <member name="P:wclWiFi.wclCustomWiFiDirectComponent.Receiver">
            <summary> Gets the message receiver object. </summary>
            <value> The <see cref="T:wclCommon.wclMessageReceiver" /> object used by the
              component. </value>
            <seealso cref="T:wclCommon.wclMessageReceiver" />
        </member>
        <member name="M:wclWiFi.wclCustomWiFiDirectComponent.#ctor">
            <summary> Creates a new WiFi Direct Advertiser component. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectAdvertiser">
            <summary> The class allows to publish WiFi Direct
              advertisements. </summary>
            <remarks> <para> Windows 10, version 1607, supports Mobile Hotspot, an
              enhanced version of the mobile broadband tethering feature. If Mobile
              Hotspot is running, the functionality of this class is not supported.
              It is likely to stop working. </para>
              <para> The Mobile Hotspot and WiFi Direct technology cannot run at the
              same time. Mobile Hotspot takes precedence over all WiFi Direct
              scenarios. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiDirectConnectionComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.HardwareRemoved">
            <summary> The method called when WiFi hardware has been switched off
              or removed. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.FindDevice(System.String)">
            <summary> Gets device object by its ID. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <returns> If the device with given ID was found the function returns
              the <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object. Otherwise the function
              returns <c>null</c>. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.DoAcceptDevice(wclWiFi.wclWiFiDirectDevice,System.Boolean@)">
            <summary> Fires the <c>OnAcceptDevice</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Accept"> An application must set this parameter to
              <c>True</c> to accept a connection request. If an application sets
              the parameter to <c>False</c> a connection request will be
              rejected. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.DoDeviceConnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceConnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Error"> The connection result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection has
              been established. </param>
            <remarks> A derived class must always call the inherited method
              if this one is override. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.DoDeviceDisconnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceDisconnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Reason"> The disconnection reason. If the <c>Reason</c>
              is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> then the client disconnected
              by call the <c>Disconnect</c> method. </param>
            <remarks> A derived class must always call the inherited method
              if this one is override. </remarks>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.#ctor">
            <summary> Creates a new WiFi Direct Advertiser component. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.Start">
            <summary> Starts the WiFi Direct Advertisement. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectAdvertiser.Stop">
            <summary> Stops the WiFi Direct Advertisement. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Active">
            <summary> Gets the WiFi Direct Advertiser state. </summary>
            <value> <c>True</c> if advertising is running. <c>False</c> if
              advertising is not running. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Count">
            <summary> Gets connected devices number. </summary>
            <value> Number of connected WiFi Direct enabled devices. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Item(System.Int32)">
            <summary> Gets connected device. </summary>
            <param name="Index"> A connected devices' index. </param>
            <value> The WiFi Direct Device object. If device with given index was
              not found the value is <c>null</c>. </value>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.AutonomousGroupOwnerEnabled">
            <summary> Gets and sets the autonomous group owner state. </summary>
            <value> <c>True</c> if the autonomous group owner enabled.
              <c>False</c> otherwise. </value>
            <remarks> <para> If the Advertiser is not running settings this property
              to <c>False</c> will also set the <c>Legacy</c> property to
              <c>False</c>. Reading the property returns its default value. </para>
              <para> If the Advertiser is running setting this property does
              nothing and new value will be ignored. Reading the property returns
              current value used by the Advertiser. </para> </remarks>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Discoverability">
            <summary> Gets and sets the listen state and whether the WiFi Direct
              device is discoverable. </summary>
            <value> The listen state and whether the WiFi Direct device
              is discoverable. </value>
            <remarks> <para> If the Advertiser is not running setting the property
              changes its value. Reading the property returns its current
              value. </para>
              <para> If the Advertiser is running setting the property does nothing
              and new value will be ignored. Reading the property returns current
              value used by the Advertiser. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiDirectAdvertisementDiscoverability" />
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Legacy">
            <summary> Gets and sets the WiFi Direct Advertiser legacy node
              state. </summary>
            <value> The current Legacy state of the WiFi Direct
              Advertiser. </value>
            <remarks> <para> This property is used only if the
              <c>AutonomousGroupOwnerEnabled</c> is set to <c>True</c>. If the
              <c>AutonomousGroupOwnerEnabled</c> is <c>False</c> this property is
              always <c>False</c> and changing its value to <c>True</c> will not
              take effect. </para>
              <para> If the Advertiser is not running setting this property changes
              its current value. Reading the property returns its current
              value. </para>
              <para> If the Advertiser is running changing the property does nothing
              and new value will be ignored. Reading the property returns its value
              used by the Advertiser. </para> </remarks>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.OpenAuth">
            <summary> Gets and sets the Open Network flag. </summary>
            <value> A flag that turns Open Network mode on or off. </value>
            <remarks> <para> This property is used only if <c>Legacy</c> mode
              set to <c>True</c>. If the <c>Legacy</c> is <c>False</c> the value
              of the property will not be used. </para>
              <para> Windows 10 and Windows 10 Mobile can be configured to allow
              embedded mode, which allows a device to run a single app. If embedded
              mode is configured, the pass phrase can be empty to support Open/None
              Authentication. </para>
              <para> Instead of settings the <c>Passphrase</c> property to an
              empty string an application must set <c>OpenAuth</c> property to
              <c>True</c> to turn Open Authentication On. Or set the
              <c>OpenAuth</c> to <c>False</c> to switch to common authentication
              mode. </para>
              <para> If the Advertiser is running setting the property does nothing
              and new value will be ignored. Reading the property returns current
              value used by the Advertiser. </para>
              <para> Not all WiFi adapters may support this feature on
              Windows. </para> </remarks>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Passphrase">
            <summary> Gets and sets the pass phrase for Legacy mode. </summary>
            <value> A pass phrase used by non-WiFi Direct clients
              to connect to this access point in "legacy mode". </value>
            <remarks> <para> This property is used only if <c>Legacy</c> mode
              set to <c>True</c>. If the <c>Legacy</c> is <c>False</c> the value
              of the property will not be used. </para>
              <para> If the Advertiser is not running setting the property
              changes it current value. Reading the property returns its current
              value. </para>
              <para> If the Advertiser is running settings the property does
              nothing and new value will be ignored. If the <c>Legacy</c> is
              <c>True</c> reading the property returns its current value used
              by the Advertiser. If the value of the property was an empty string
              reading from the property returns auto generated random pass phrase
              used by the Advertiser. If the <c>Legacy</c> is <c>False</c> reading
              returns an empty string. </para> </remarks>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectAdvertiser.Ssid">
            <summary> Gets and sets the Service Set Identifier (SSID). </summary>
            <value> A WiFi Direct Advertiser SSID. </value>
            <remarks> <para> This propert used in both Legacy and non-Legacy
              modes. In Legacy mode it is the SoftAP SSID. In non-Legacy mode it
              is used as device name. </para>
              <para> If the Advertiser is running setting this property does nothing
              and new value will be ignored. Reading the property returns its
              current value used by the Advertiser. If the property was an empty
              string reading returns the auto generated SSID (device name) that
              begins with "DIRECT-". </para>
              <para> If the Advertiser is not running setting the property changes
              its value. Reading the property returns its current
              value. </para> </remarks>
        </member>
        <member name="E:wclWiFi.wclWiFiDirectAdvertiser.OnAcceptDevice">
            <summary> The event fires when a remote WiFi enable device connects to
              the WiFi Direct Advertiser and an application must accept or reject
              the connection request. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectAcceptDeviceEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectAdvertiser.OnStarted">
            <summary> The event fires when the WiFi Direct Advertiser has been
              started with success. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiDirectAdvertiser.OnStopped">
            <summary> The event fires when the WiFi Direct Advertiser has been
              stopped. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectClient">
            <summary> The WiFi Direct Client allows to connect to other WiFi Direct
              devices. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectConnectionComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.HardwareRemoved">
            <summary> The method called when WiFi hardware has been switched off
              or removed. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.FindDevice(System.String)">
            <summary> Gets device object by its ID. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <returns> If the device with given ID was found the function returns
              the <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object. Otherwise the function
              returns <c>null</c>. </returns>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.DoDeviceConnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceConnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Error"> The connection result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection has
              been established. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.DoDeviceDisconnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceDisconnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Reason"> The disconnection reason. If the <c>Reason</c>
              is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> then the client disconnected
              by call the <c>Disconnect</c> method. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.#ctor">
            <summary> Creates a new WiFi Direct Client component. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.Connect(System.String)">
            <summary> Connect to remote WiFi Direct device. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectClient.Disconnect">
            <summary> Disconnect from the connected remote WiFi Direct
              device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectClient.LocalAddress">
            <summary> Gets local IP address for the connection. </summary>
            <value> The connection's local IP address. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectClient.RemoteAddress">
            <summary> Gets remote IP address for the connection. </summary>
            <value> The connection's remote IP address. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectClient.State">
            <summary> Gets a client state. </summary>
            <value> The current client's state. </value>
            <seealso cref="T:wclWiFi.wclWiFiDirectDeviceState" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectConnectionComponent">
            <summary> The base class for WiFi Direct connection components. </summary>
            <seealso cref="T:wclWiFi.wclCustomWiFiDirectComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.FindDevice(System.String)">
            <summary> Gets device object by its ID. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <returns> If the device with given ID was found the function returns
              the <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object. Otherwise the function
              returns <c>null</c>. </returns>
            <remarks> A derived class must override this method. </remarks>
            /// <seealso cref="T:wclWiFi.wclWiFiDirectDevice"/>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoDeviceConnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceConnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Error"> The connection result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection has
              been established. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoDeviceDisconnected(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceDisconnected</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Reason"> The disconnection reason. If the <c>Reason</c>
              is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> then the client disconnected
              by call the <c>Disconnect</c> method. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoPairCompleted(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnPairComplete</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Result"> The pairing result code. If pairing completed
              with success the <c>Result</c> is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoPairConfirm(wclWiFi.wclWiFiDirectDevice,System.Boolean@)">
            <summary> Fires the <c>OnPairConfirm</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm paring. To reject pairing an application
              must set this parameter to <c>False</c>. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoPairDisplayPin(wclWiFi.wclWiFiDirectDevice,System.String)">
            <summary> Fires the <c>OnPairDisplayPin</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Pin"> The PIN code to display. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoPairGetParams(wclWiFi.wclWiFiDirectDevice,System.Int16@,wclWiFi.wclWiFiDirectConfigurationMethod@,wclWiFi.wclWiFiDirectPairingProcedure@)">
            <summary> Fires the <c>OnPairGetParams</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="GroupOwnerIntent"> The group owner intent value provided by
              the application and used for group owner negotiation in a WiFi Direct
              pairing operation. </param>
            <param name="ConfigurationMethods"> Supported pairing (configuration)
              methods provided by the application that should be used during
              pairing. </param>
            <param name="PairingProcedure"> The supported pairing procedure provided
              by the application to be used during pairing. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
            <seealso cref="T:wclWiFi.wclWiFiDirectConfigurationMethod" />
            <seealso cref="T:wclWiFi.wclWiFiDirectPairingProcedure" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.DoPairProvidePin(wclWiFi.wclWiFiDirectDevice,System.String@)">
            <summary> Fires the <c>OnPairProvidePin</c> event. </summary>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Pin"> An application must provide PIN for pairing. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectConnectionComponent.#ctor">
            <summary> Creates a new WiFi Direct Advertiser component. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnDeviceConnected">
            <summary> The event fires when a remote WiFi enabled device has been
              connected to the WiFi Direct Advertiser. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectConnectedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnDeviceDisconnected">
            <summary> The event fires when the remote WiFi enabled device has been
              disconnected from the WiFi Direct Advertiser. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectDisconnectedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnPairCompleted">
            <summary> The event fires when pairing with a remote WiFi enabled device
              has been completed (with or without success). </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectPairCompletedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnPairConfirm">
            <summary> The event fires when a remote WiFi enabled device requests
              simple pairing confirmation. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectPairConfirmEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnPairDisplayPin">
            <summary> The event fires when a remote WiFi enabled device requests the
              Display Pin pairing procedure. An application must show the
              Pin received from the event. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectPairDisplayPinEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnPairGetParams">
            <summary> The event fires when pairing parameters need to be
              set. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectPairGetParamsEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectConnectionComponent.OnPairProvidePin">
            <summary> The event fires when a remote WiFi enabled device requests Pin
              for pairing. An application must provide Pin. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectPairProvidePinEvent" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectAcceptDeviceEvent">
            <summary> The WiFi Direct Advertiser's <c>OnAcceptDevice</c> event handler
              prototype. </summary>
            <param name="Sender"> The object that fired the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Accept"> An application must set this parameter to
              <c>True</c> to accept a connection request. If an application sets
              the parameter to <c>False</c> a connection request will be
              rejected. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectConnectedEvent">
            <summary> The WiFi Direct <c>OnConnected</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Error"> The connection result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection has
              been established. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDisconnectedEvent">
            <summary> The WiFi Direct <c>OnConnected</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Reason"> The disconnection reason. If the <c>Reason</c>
              is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> then the client disconnected
              by call the <c>Disconnect</c> method. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairCompletedEvent">
            <summary> The WiFi Direct <c>OnPairCompleted</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Result"> The pairing result code. If pairing completed
              with success the <c>Result</c> is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairConfirmEvent">
            <summary> The WiFi Direct <c>OnPairConfirm</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm paring. To reject pairing an application
              must set this parameter to <c>False</c>. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairDisplayPinEvent">
            <summary> The WiFi Direct <c>OnPairDisplayPin</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Pin"> The PIN code to display. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairGetParamsEvent">
            <summary> The WiFi Direct <c>OnPairGetParams</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="GroupOwnerIntent"> The group owner intent value provided by
              the application and used for group owner negotiation in a WiFi Direct
              pairing operation. </param>
            <param name="ConfigurationMethods"> Supported pairing (configuration)
              methods provided by the application that should be used during
              pairing. </param>
            <param name="PairingProcedure"> The supported pairing procedure provided
              by the application to be used during pairing. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
            <seealso cref="T:wclWiFi.wclWiFiDirectConfigurationMethod" />
            <seealso cref="T:wclWiFi.wclWiFiDirectPairingProcedure" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairProvidePinEvent">
            <summary> The WiFi Direct <c>OnPairProvidePin</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Pin"> An application must provide PIN for pairing. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDevice">
            <summary> The class represents a WiFi Direct device. </summary>
            <remarks> An application must not create or destroy objects of this class
              directly. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDevice.#ctor(wclCommon.wclMessageReceiver,System.String,System.String,System.Boolean)">
            <summary> Creates new WiFi Direct device object. </summary>
            <param name="Receiver"> The message receiver object that will
              receive notification messages. If the <c>Receiver</c> parameter is
              <c>null</c> the <see cref="T:wclCommon.wclEInvalidArgument" /> exception
              raises. </param>
            <param name="Id"> The device's ID. If the <c>Id</c> parameter is an
              empty string the <see cref="T:wclCommon.wclEInvalidArgument" /> exception
              raises. </param>
            <param name="Name"> The device's name. </param>
            <param name="Legacy"> The device's legacy mode. </param>
            <remarks> An application must not create or destroy objects of this
              class directly. </remarks>
            <seealso cref="T:wclCommon.wclMessageReceiver" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDevice.Disconnect">
            <summary> Disconnects a WiFi Direct device. </summary>
            <returns> If the function succeeded the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.Id">
            <summary> Gets the device's ID. </summary>
            <value> The WiFi Direct device's ID. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.Legacy">
            <summary> gets the legacy setting. </summary>
            <value> <c>True</c> if the device is legacy WiFi device. <c>False</c>
              if the device is WiFi Direct device. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.LocalAddress">
            <summary> Gets the local IP address. </summary>
            <value> The connection's local IPD address. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.Name">
            <summary> Gets the device's name. </summary>
            <value> The WiFi Direct device's name. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.RemoteAddress">
            <summary> Gets the remote IP address. </summary>
            <value> The connection's remote IP address. </value>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDevice.State">
            <summary> Gets the current device's state. </summary>
            <value> The WiFi Direct device's state. </value>
            <seealso cref="T:wclWiFi.wclWiFiDirectDeviceState" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectConfigurationMethod">
            <summary> Specifies a WiFi Direct configuration method. Configuration is
              how a user tells one piece of WiFi Direct equipment to connect to
              another piece of WiFi Direct equipment. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectConfigurationMethod.cmDisplayPin">
            <summary> This device accepts connections from devices that provide the
              PIN this device currently displays. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectConfigurationMethod.cmProvidePin">
            <summary> This device accepts entry of the PIN being displayed on the
              accepting device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectConfigurationMethod.cmPushButton">
            <summary> This device uses the pushbutton method for pairing. A user
              pushes a button on both the connecting device and the accepting device
              in order to establish a connection between them. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectAdvertisementDiscoverability">
            <summary> Specifies whether the WiFi Direct device is listening and
              discoverable. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectAdvertisementDiscoverability.adIntensive">
            <summary> The device is discoverable when the app is in the foreground
              or in the background. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectAdvertisementDiscoverability.adNone">
            <summary> The device is not discoverable. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectAdvertisementDiscoverability.adNormal">
            <summary> The device is highly discoverable so long as the app is in
              the foreground. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectPairingProcedure">
            <summary> Specifies a direct pairing procedure. </summary>
            <remarks> WiFi Direct supports two different pairing procedures. In the
              Group Owner Negotiation procedure, the connecting device chooses the
              configuration method (PIN entry, PIN display, or pushbutton pairing.) In
              the P2P Invitation procdure, the accepting device chooses the
              configuration method. Use the values in this enumeration to identify a
              pairing procedure. </remarks>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectPairingProcedure.ppGroupOwnerNegotiation">
            <summary> Group Owner Negotiation. The connecting device chooses the
              configuration method. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectPairingProcedure.ppInvitation">
            <summary> P2P Invitation. The accepting device chooses the configuration
              method. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDeviceState">
            <summary> Possible WiFi Direct device states. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectDeviceState.dsDisconnected">
            <summary> WiFi Direct device is disconnected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectDeviceState.dsConnecting">
            <summary> WiFi Direct device is connecting to a remote
              WiFi Direct device. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectDeviceState.dsConnected">
            <summary> WiFi Direct device is connected. </summary>
        </member>
        <member name="F:wclWiFi.wclWiFiDirectDeviceState.dsDisconnecting">
            <summary> WiFi Direct device is disconnecting. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDeviceWatcher">
            <summary> The component allows you application to enumerate (discover)
              nearby WiFi Direct Devices, </summary>
            <seealso cref="T:wclWiFi.wclCustomWiFiDirectComponent" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.HardwareRemoved">
            <summary> The method called when WiFi hardware has been switched off
              or removed. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.DoDeviceFound(System.String,System.String)">
            <summary> Fires the <c>OnDeviceFound</c> event. </summary>
            <param name="Id"> The ID of the remote WiFi Direct device. </param>
            <param name="Name"> The name of the remote WiFi Direct device. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.DoDiscoveringCompleted(System.Int32)">
            <summary> Fires the <c>OnDiscoveringCompleted</c> event. </summary>
            <param name="Error"> The discovering result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the discovering completed
               with success. </param>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.DoDiscoveringStarted">
            <summary> Fires the <c>OnDiscoveringStarted</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.#ctor">
            <summary> Creates a new WiFi Device Watcher component. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.Discover">
            <summary> Starts discovering for nearby WiFi Direct devices. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.Terminate">
            <summary> Terminates discovering for nearby WiFi Direct
              devices. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.IsPaired(System.String,System.Boolean@)">
            <summary> Gets The WiFi Direct device's pairing status. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <param name="Paired"> If the method completed with success on output
              contains information about WiFi Direct pairing status. <c>True</c> if
              the WiFi Direct device is paired. <c>False</c> otherwise. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.Unpair(System.String)">
            <summary> Unpair a WiFi  Direct device. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.EnumPairedDevices(System.Collections.Generic.List{System.String})">
            <summary> Enumerates paired WiFi Direct devices. </summary>
            <param name="Devices"> The StringList object that will be filled with
              found paired WiFi Direct devices IDs. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A called is responsible to create the <c>Devices</c>
              StringList object before calling the method and to destroy it after
              usage. The <c>Devices</c> list will be cleared before filled with
              found devices IDs. </remarks>
        </member>
        <member name="M:wclWiFi.wclWiFiDirectDeviceWatcher.GetName(System.String,System.String@)">
            <summary> Gets the WiFi Direct device's name. </summary>
            <param name="Id"> The WiFi Direct device's ID. </param>
            <param name="Name"> If the method completed with success on output
              contains the WiFi Direct  device's name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiDirectDeviceWatcher.Discovering">
            <summary> Gets discovering state of the component. </summary>
            <value> The current discovering state. <c>True</c> if the discovering
              for nearby WiFi Direct devices is active. </value>
        </member>
        <member name="E:wclWiFi.wclWiFiDirectDeviceWatcher.OnDeviceFound">
            <summary> The event fires when a nearby WiFi Direct device has
              been found. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectDeviceFoundEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectDeviceWatcher.OnDiscoveringCompleted">
            <summary> The event fires when discovering for nearby WiFi Direct
              devices has been completed. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectDiscoveringCompletedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiDirectDeviceWatcher.OnDiscoveringStarted">
            <summary> The event fires when discovering for nearby WiFi Direct
              devices has been started. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDeviceFoundEvent">
            <summary> The <c>OnDeviceFound</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Id"> The ID of the remote WiFi Direct device. </param>
            <param name="Name"> The name of the remote WiFi Direct device. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectDiscoveringCompletedEvent">
            <summary> The <c>OnDiscovringCompleted</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Error"> The discovering result code. If the <c>Error</c>
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the discovering completed with
              success. </param>
        </member>
        <member name="T:wclWiFi.wclWiFiSoftAP">
            <summary> The component represents the WiFi Direct Legacy
              Soft AP. </summary>
            <remarks> <para> An application can use the <c>TwclWiFiSoftAP</c>
              component if needs to run Hosted Network (Legacy Soft AP) on a WiFi
              adapter that does not support Native WiFi Hosted network features and
              supports only WiFi Direct features. </para>
              <para> On other adapters that supports Native WiFi Hosted Network it is
              recommended to use the <see cref="T:wclWiFi.wclWiFiHostedNetwork" /> component
              instead. </para> </remarks>
            <seealso cref="T:wclWiFi.wclWiFiHostedNetwork" />
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoDeviceAccept(wclWiFi.wclWiFiDirectDevice,System.Boolean@)">
            <summary> Fires the <c>OnDeviceAccept</c> event. </summary>
            <param name="Device"> A <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object
              represents remote WiFi Direct enabled device. </param>
            <param name="Accept"> An application must set this to <c>False</c> to
              reject connection request. Setting it to <c>True</c> (the default
              value) accepts connection. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoDeviceConnected(wclWiFi.wclWiFiDirectDevice)">
            <summary> Fires the <c>OnDeviceConnected</c> event. </summary>
            <param name="Device"> A <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object
              represents remote WiFi Direct enabled device. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoDeviceConnectError(wclWiFi.wclWiFiDirectDevice,System.Int32)">
            <summary> Fires the <c>OnDeviceConnectError</c> event. </summary>
            <param name="Device"> A <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object
              represents remote WiFi Direct enabled device. </param>
            <param name="Error"> A connection error code. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoDeviceDisconnected(wclWiFi.wclWiFiDirectDevice)">
            <summary> Fires the <c>OnDeviceDisconnected</c> event. </summary>
            <param name="Device"> A <see cref="T:wclWiFi.wclWiFiDirectDevice" /> object
              represents remote WiFi Direct enabled device. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.#ctor">
            <summary> Creates a new WiFi Soft AP component. </summary>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.Start(System.String,System.String)">
            <summary> Starts the WiFi Direct Legacy Soft AP. </summary>
            <param name="Ssid"> The Soft AP SSID. If the parameter is an empty
              string the auto generated SSID will be used. An application can read
              the current SSID of the Soft AP by calling <c>GetSsid</c>
              method. </param>
            <param name="Passphrase"> The Soft AP passphrase. if the parameter is an
              empty string the auto generated random passphrase will be
              used. An application ca read the current Passphrase of the Soft AP by
              calling <c>GetPassphrase</c> method. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.Start(System.String)">
            <summary> Starts the WiFi Direct Legacy Soft AP in Open Authentication
              (Open Network) mode. </summary>
            <param name="Ssid"> The Soft AP SSID. If the parameter is an empty
              string the auto generated SSID will be used. An application can read
              the current SSID of the Soft AP by calling <c>GetSsid</c>
              method. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.Stop">
            <summary> Stops the WiFi Direct Legacy Soft AP. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.GetPassphrase(System.String@)">
            <summary> Reads the Soft AP passphrase. </summary>
            <param name="Passphrase"> If the function succeed on output contains
              the running Soft AP passphrase. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.GetSsid(System.String@)">
            <summary> Reads the Soft AP SSID. </summary>
            <param name="Ssid"> If the function succeed on output contains the
              running Soft AP SSID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.GetIpSettings(System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary> Gets current IP settings. </summary>
            <param name="Address"> The current IP address. </param>
            <param name="Mask"> The subnet mask. </param>
            <param name="Gateway"> The default gateway address. </param>
            <param name="Dns1"> The first DNS server address. </param>
            <param name="Dns2"> The second DNS server address. </param>
            <remarks> If the method returns
              <c>WCL_E_WIFI_INTERFACE_IP_NOT_CONFIGURED</c> then the interface uses
              system default settings. </remarks>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.SetIpSettings(System.String,System.String,System.String,System.String,System.String)">
            <summary> Sets current IP settings. </summary>
            <param name="Address"> The current IP address. </param>
            <param name="Mask"> The subnet mask. </param>
            <param name="Gateway"> The default gateway address. </param>
            <param name="Dns1"> The first DNS server address. </param>
            <param name="Dns2"> The second DNS server address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclWiFi.wclWiFiSoftAP.ResetIpSettings">
            <summary> Resets IP settings to its system default values. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclWiFi.wclWiFiSoftAP.Active">
            <summary> Gets the Soft AP status. </summary>
            <value> <c>True</c> if the Soft AP is running. <c>False</c>
              otherwise. </value>
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnDeviceAccept">
            <summary> The event fires when new device is tring to connected to the
              WiFI Direct Soft AP. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectSoftAPAcceptEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnDeviceConnected">
            <summary> The event fires when new device is connected to the WiFI
              Direct Soft AP. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectSoftAPConnectedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnDeviceConnectError">
            <summary> The event fires when new device is connected to the WiFI
              Direct Soft AP. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectSoftAPConnectErrorEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnDeviceDisconnected">
            <summary> The event fires when the WiFi Direct device is disconnected
              from the WiFI Direct Soft AP. </summary>
            <seealso cref="T:wclWiFi.wclWiFiDirectSoftAPDisconnectedEvent" />
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnStarted">
            <summary> The event fires when the Soft AP has been started with
              success. </summary>
        </member>
        <member name="E:wclWiFi.wclWiFiSoftAP.OnStopped">
            <summary> The event fires when the Soft AP has been stopped. </summary>
        </member>
        <member name="T:wclWiFi.wclWiFiDirectSoftAPAcceptEvent">
            <summary> The WiFi Direct SoftAP <c>OnDeviceAccept</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Accept"> An application must set this to <c>false</c> to
              reject connection request. Setting it to <c>true</c> (the default value)
              accepts connection. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectSoftAPConnectedEvent">
            <summary> The WiFi Direct SoftAP <c>OnDeviceConnected</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectSoftAPConnectErrorEvent">
            <summary> The WiFi Direct SoftAP <c>OnDeviceConnectError</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <param name="Error"> The connection error code. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
        <member name="T:wclWiFi.wclWiFiDirectSoftAPDisconnectedEvent">
            <summary> The WiFi Direct SoftAP <c>OnDeviceDisconnected</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Device"> The WiFi Direct device object. </param>
            <seealso cref="T:wclWiFi.wclWiFiDirectDevice" />
        </member>
    </members>
</doc>
